version: v1.0
name: Typha

execution_time_limit:
  hours: 4

agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu1804

global_job_config:
  secrets:
  - name: docker-hub
  prologue:
    commands:
      # Semaphore mounts a copy-on-write FS as /var/lib/docker in order to provide a pre-loaded cache of
      # some images. However, the cache is not useful to us and the copy-on-write FS is a big problem given
      # how much we churn docker containers during the build.  Disable it.
      - sudo systemctl stop docker
      - sudo umount /var/lib/docker && sudo killall qemu-nbd || true
      - sudo systemctl start docker
      # make some room on the disk
      - sudo rm -rf ~/.kiex ~/.phpbrew ~/.rbenv ~/.nvm ~/.kerl
      - echo $DOCKERHUB_PASSWORD | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
      - checkout
      # Unshallow the clone so the "git describe" can see all the tags.
      - git fetch --unshallow
      # Note that the 'cache restore' commands require that the "Build" block has been run. The "Build" block is what populates
      # the cache, therefore every block that requires the use of these cached items must make the "Build" block one of
      # it's dependencies.
      - 'cache restore go-pkg-cache-${SEMAPHORE_GIT_SHA}'
      - 'cache restore go-mod-cache-${SEMAPHORE_GIT_SHA}'
      - 'cache restore bin-${SEMAPHORE_GIT_SHA}'

blocks:
  - name: 'Build'
    dependencies: []
    task:
      agent:
        machine:
          type: e1-standard-4
          os_image: ubuntu1804
      jobs:
        - name: Build
          execution_time_limit:
            minutes: 30
          commands:
            - make build
            - 'cache store bin-${SEMAPHORE_GIT_SHA} bin'
            - 'cache store go-pkg-cache-${SEMAPHORE_GIT_SHA} .go-pkg-cache'
            - 'cache store go-mod-cache-${SEMAPHORE_GIT_SHA} ${HOME}/go/pkg/mod/cache'

  - name: 'UTs'
    dependencies: ["Build"]
    task:
      jobs:
        - name: Run UT
          execution_time_limit:
            minutes: 120
          commands:
            - make ci EXCEPT=k8sfv-test

  - name: 'FVs'
    dependencies: ["Build"]
    task:
      jobs:
        - name: Run FV
          execution_time_limit:
            minutes: 120
          commands:
            - make image
            - cd .. && git clone https://github.com/projectcalico/felix.git && cd felix
            - JUST_A_MINUTE=true USE_TYPHA=true FV_TYPHAIMAGE=calico/typha:latest TYPHA_VERSION=latest make k8sfv-test

  - name: 'Foss Checks'
    dependencies: ["Build"]
    task:
      secrets:
        - name: foss-api-key
      jobs:
        - name: Foss Checks
          execution_time_limit:
            minutes: 30
          commands:
            - if [ -z "${PULL_REQUEST_NUMBER}" ]; then make foss-checks; fi

  - name: 'Push Images (non-PR builds only)'
    dependencies: ["UTs", "FVs", "Foss Checks"]
    skip:
      # Only run on branches, not PRs.
      when: "branch !~ '.+'"
    task:
      secrets:
        - name: quay-robot-calico+semaphoreci
        - name: docker
      prologue:
        commands:
          - echo $DOCKER_TOKEN | docker login --username "$DOCKER_USER" --password-stdin
          - echo $QUAY_TOKEN | docker login --username "$QUAY_USER" --password-stdin quay.io
      jobs:
        - name: Run CD
          execution_time_limit:
            minutes: 15
          commands:
            - export BRANCH_NAME=$SEMAPHORE_GIT_BRANCH
            - if [ -z "${SEMAPHORE_GIT_PR_NUMBER}" ]; then make image-all cd CONFIRM=true; fi

  - name: Trigger pin updates
    dependencies: []
    skip:
      when: "(branch != 'master') and (branch !~ '^release-v\d*\.\d*')"
    task:
      secrets:
        - name: semaphore-api
      jobs:
        - name: Trigger pin updates
          execution_time_limit:
            minutes: 5
          commands:
            - checkout
            - make semaphore-run-auto-pin-update-workflows

promotions:
  # Run this manually via the semaphore UI if the cache is full
  - name: Clear Cache
    pipeline_file: clear_cache.yml
  # Run the pin update process in case there were a backlog of pin update requests
  - name: Update Pins
    pipeline_file: update_pins.yml
    auto_promote:
      # If the block has passed and the branch is for master or a release branch then run the pin updates. Note that
      # this doesn't try to restrict which release branches, as the presence of this auto promotion code means that
      # it can handle updating the pins in this fashion.
      when: "(result = 'passed') and ((branch = 'master') or (branch =~ '^release-v\d*\.\d*'))"
