{
  "Comment": "This file generated by calico-felix-docgen, DO NOT EDIT.",
  "Groups": [
    {
      "Name": "Datastore connection",
      "Fields": [
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "DatastoreType",
          "NameEnvVar": "FELIX_DatastoreType",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "One of: `\"etcdv3\"`, `\"kubernetes\"` (case insensitive)",
          "StringDefault": "etcdv3",
          "ParsedDefault": "etcdv3",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "Required": true,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "LocalOnly",
          "Description": "Controls which datastore driver Felix will use. Typically, this is detected from the environment\nand it does not need to be set manually. (For example, if `KUBECONFIG` is set, the kubernetes datastore driver\nwill be used by default).",
          "UserEditable": true,
          "GoType": ""
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "EtcdAddr",
          "NameEnvVar": "FELIX_EtcdAddr",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "String matching regex `^[^:/]+:\\d+$`",
          "StringDefault": "127.0.0.1:2379",
          "ParsedDefault": "127.0.0.1:2379",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "When using the `etcdv3` datastore driver, the etcd server and port to connect to. If EtcdEndpoints\nis also specified, it takes precedence.",
          "UserEditable": true,
          "GoType": ""
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "EtcdCaFile",
          "NameEnvVar": "FELIX_EtcdCaFile",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Path to file, which must exist",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "When using the `etcdv3` datastore driver, path to TLS CA file to use when connecting to\netcd. If the CA file is specified, the other TLS parameters are mandatory.",
          "UserEditable": true,
          "GoType": ""
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "EtcdCertFile",
          "NameEnvVar": "FELIX_EtcdCertFile",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Path to file, which must exist",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "When using the `etcdv3` datastore driver, path to TLS certificate file to use when connecting to\netcd. If the certificate file is specified, the other TLS parameters are mandatory.",
          "UserEditable": true,
          "GoType": ""
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "EtcdEndpoints",
          "NameEnvVar": "FELIX_EtcdEndpoints",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "List of HTTP endpoints: comma-delimited list of `http(s)://hostname:port`",
          "StringDefault": "",
          "ParsedDefault": "[]",
          "ParsedType": "[]string",
          "YAMLType": "",
          "YAMLSchema": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "When using the `etcdv3` datastore driver, comma-delimited list of etcd endpoints to connect to,\nreplaces EtcdAddr and EtcdScheme.",
          "UserEditable": true,
          "GoType": ""
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "EtcdKeyFile",
          "NameEnvVar": "FELIX_EtcdKeyFile",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Path to file, which must exist",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "When using the `etcdv3` datastore driver, path to TLS private key file to use when connecting to\netcd. If the key file is specified, the other TLS parameters are mandatory.",
          "UserEditable": true,
          "GoType": ""
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "EtcdScheme",
          "NameEnvVar": "FELIX_EtcdScheme",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "One of: `\"http\"`, `\"https\"` (case insensitive)",
          "StringDefault": "http",
          "ParsedDefault": "http",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "EtcdAddr: when using the `etcdv3` datastore driver, the URL scheme to use. If EtcdEndpoints\nis also specified, it takes precedence.",
          "UserEditable": true,
          "GoType": ""
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "FelixHostname",
          "NameEnvVar": "FELIX_FelixHostname",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "String matching regex `^[a-zA-Z0-9_.-]+$`",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "The name of this node, used to identify resources in the datastore that belong to this node.\nAuto-detected from the node's hostname if not provided.",
          "UserEditable": true,
          "GoType": ""
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "TyphaAddr",
          "NameEnvVar": "FELIX_TyphaAddr",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "String matching regex `^[^:/]+:\\d+$`",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "If set, tells Felix to connect to Typha at the given address and port. Overrides TyphaK8sServiceName.",
          "UserEditable": true,
          "GoType": ""
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "TyphaCAFile",
          "NameEnvVar": "FELIX_TyphaCAFile",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Path to file, which must exist",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "Path to the TLS CA file to use when communicating with Typha. If this parameter is specified,\nthe other TLS parameters must also be specified.",
          "UserEditable": true,
          "GoType": ""
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "TyphaCN",
          "NameEnvVar": "FELIX_TyphaCN",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "String",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "Common name to use when authenticating to Typha over TLS. If any TLS parameters are specified then one of\nTyphaCN and TyphaURISAN must be set.",
          "UserEditable": true,
          "GoType": ""
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "TyphaCertFile",
          "NameEnvVar": "FELIX_TyphaCertFile",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Path to file, which must exist",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "Path to the TLS certificate to use when communicating with Typha. If this parameter is specified,\nthe other TLS parameters must also be specified.",
          "UserEditable": true,
          "GoType": ""
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "TyphaK8sNamespace",
          "NameEnvVar": "FELIX_TyphaK8sNamespace",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "String",
          "StringDefault": "kube-system",
          "ParsedDefault": "kube-system",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "Namespace to look in when looking for Typha's service (see TyphaK8sServiceName).",
          "UserEditable": true,
          "GoType": ""
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "TyphaK8sServiceName",
          "NameEnvVar": "FELIX_TyphaK8sServiceName",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "String",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "If set, tells Felix to connect to Typha by looking up the Endpoints of the given Kubernetes\nService in namespace specified by TyphaK8sNamespace.",
          "UserEditable": true,
          "GoType": ""
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "TyphaKeyFile",
          "NameEnvVar": "FELIX_TyphaKeyFile",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Path to file, which must exist",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "Path to the TLS private key to use when communicating with Typha. If this parameter is specified,\nthe other TLS parameters must also be specified.",
          "UserEditable": true,
          "GoType": ""
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "TyphaReadTimeout",
          "NameEnvVar": "FELIX_TyphaReadTimeout",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Seconds (floating point)",
          "StringDefault": "30",
          "ParsedDefault": "30s",
          "ParsedType": "time.Duration",
          "YAMLType": "",
          "YAMLSchema": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "Read timeout when reading from the Typha connection. If typha sends no data for this long,\nFelix will exit and restart. (Note that Typha sends regular pings so traffic is always expected.)",
          "UserEditable": true,
          "GoType": ""
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "TyphaURISAN",
          "NameEnvVar": "FELIX_TyphaURISAN",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "String",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "URI SAN to use when authenticating to Typha over TLS. If any TLS parameters are specified then one of\nTyphaCN and TyphaURISAN must be set.",
          "UserEditable": true,
          "GoType": ""
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "TyphaWriteTimeout",
          "NameEnvVar": "FELIX_TyphaWriteTimeout",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Seconds (floating point)",
          "StringDefault": "10",
          "ParsedDefault": "10s",
          "ParsedType": "time.Duration",
          "YAMLType": "",
          "YAMLSchema": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "Write timeout when writing data to Typha.",
          "UserEditable": true,
          "GoType": ""
        }
      ]
    },
    {
      "Name": "Process: Feature detection/overrides",
      "Fields": [
        {
          "Group": "Process: Feature detection/overrides",
          "GroupWithSortPrefix": "00 Process: Feature detection/overrides",
          "NameConfigFile": "FeatureDetectOverride",
          "NameEnvVar": "FELIX_FeatureDetectOverride",
          "NameYAML": "featureDetectOverride",
          "NameGoAPI": "FeatureDetectOverride",
          "StringSchema": "Comma-delimited list of key=value pairs",
          "StringDefault": "",
          "ParsedDefault": "map[]",
          "ParsedType": "map[string]string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to override feature detection based on auto-detected platform capabilities. Values are specified in a comma separated list with no spaces, example; \"SNATFullyRandom=true,MASQFullyRandom=false,RestoreSupportsLock=\". A value of \"true\" or \"false\" will force enable/disable feature, empty or omitted values fall back to auto-detection.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Process: Feature detection/overrides",
          "GroupWithSortPrefix": "00 Process: Feature detection/overrides",
          "NameConfigFile": "FeatureGates",
          "NameEnvVar": "FELIX_FeatureGates",
          "NameYAML": "featureGates",
          "NameGoAPI": "FeatureGates",
          "StringSchema": "Comma-delimited list of key=value pairs",
          "StringDefault": "",
          "ParsedDefault": "map[]",
          "ParsedType": "map[string]string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to enable or disable tech-preview Calico features. Values are specified in a comma separated list with no spaces, example; \"BPFConnectTimeLoadBalancingWorkaround=enabled,XyZ=false\". This is used to enable features that are not fully production ready.",
          "UserEditable": true,
          "GoType": "string"
        }
      ]
    },
    {
      "Name": "Process: Go runtime",
      "Fields": [
        {
          "Group": "Process: Go runtime",
          "GroupWithSortPrefix": "00 Process: Go runtime",
          "NameConfigFile": "GoGCThreshold",
          "NameEnvVar": "FELIX_GoGCThreshold",
          "NameYAML": "goGCThreshold",
          "NameGoAPI": "GoGCThreshold",
          "StringSchema": "Integer: [-1,9223372036854775807]",
          "StringDefault": "40",
          "ParsedDefault": "40",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the Go runtime's garbage collection threshold. I.e. the percentage that the heap is allowed to grow before garbage collection is triggered. In general, doubling the value halves the CPU time spent doing GC, but it also doubles peak GC memory overhead. A special value of -1 can be used to disable GC entirely; this should only be used in conjunction with the GoMemoryLimitMB setting.\n\nThis setting is overridden by the GOGC environment variable.",
          "UserEditable": true,
          "GoType": "*int"
        },
        {
          "Group": "Process: Go runtime",
          "GroupWithSortPrefix": "00 Process: Go runtime",
          "NameConfigFile": "GoMaxProcs",
          "NameEnvVar": "FELIX_GoMaxProcs",
          "NameYAML": "goMaxProcs",
          "NameGoAPI": "GoMaxProcs",
          "StringSchema": "Integer: [-1,9223372036854775807]",
          "StringDefault": "-1",
          "ParsedDefault": "-1",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the maximum number of CPUs that the Go runtime will use concurrently. A value of -1 means \"use the system default\"; typically the number of real CPUs on the system.\n\nthis setting is overridden by the GOMAXPROCS environment variable.",
          "UserEditable": true,
          "GoType": "*int"
        },
        {
          "Group": "Process: Go runtime",
          "GroupWithSortPrefix": "00 Process: Go runtime",
          "NameConfigFile": "GoMemoryLimitMB",
          "NameEnvVar": "FELIX_GoMemoryLimitMB",
          "NameYAML": "goMemoryLimitMB",
          "NameGoAPI": "GoMemoryLimitMB",
          "StringSchema": "Integer: [-1,9223372036854775807]",
          "StringDefault": "-1",
          "ParsedDefault": "-1",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets a (soft) memory limit for the Go runtime in MB. The Go runtime will try to keep its memory usage under the limit by triggering GC as needed. To avoid thrashing, it will exceed the limit if GC starts to take more than 50% of the process's CPU time. A value of -1 disables the memory limit.\n\nNote that the memory limit, if used, must be considerably less than any hard resource limit set at the container or pod level. This is because felix is not the only process that must run in the container or pod.\n\nThis setting is overridden by the GOMEMLIMIT environment variable.",
          "UserEditable": true,
          "GoType": "*int"
        }
      ]
    },
    {
      "Name": "Process: Health port and timeouts",
      "Fields": [
        {
          "Group": "Process: Health port and timeouts",
          "GroupWithSortPrefix": "00 Process: Health port and timeouts",
          "NameConfigFile": "HealthEnabled",
          "NameEnvVar": "FELIX_HealthEnabled",
          "NameYAML": "healthEnabled",
          "NameGoAPI": "HealthEnabled",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "If set to true, enables Felix's health port, which provides readiness and liveness endpoints.",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Process: Health port and timeouts",
          "GroupWithSortPrefix": "00 Process: Health port and timeouts",
          "NameConfigFile": "HealthHost",
          "NameEnvVar": "FELIX_HealthHost",
          "NameYAML": "healthHost",
          "NameGoAPI": "HealthHost",
          "StringSchema": "String matching regex `^[a-zA-Z0-9:._+-]{1,64}$`",
          "StringDefault": "localhost",
          "ParsedDefault": "localhost",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The host that the health server should bind to.",
          "UserEditable": true,
          "GoType": "*string"
        },
        {
          "Group": "Process: Health port and timeouts",
          "GroupWithSortPrefix": "00 Process: Health port and timeouts",
          "NameConfigFile": "HealthPort",
          "NameEnvVar": "FELIX_HealthPort",
          "NameYAML": "healthPort",
          "NameGoAPI": "HealthPort",
          "StringSchema": "Integer: [0,65535]",
          "StringDefault": "9099",
          "ParsedDefault": "9099",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The TCP port that the health server should bind to.",
          "UserEditable": true,
          "GoType": "*int"
        },
        {
          "Group": "Process: Health port and timeouts",
          "GroupWithSortPrefix": "00 Process: Health port and timeouts",
          "NameConfigFile": "HealthTimeoutOverrides",
          "NameEnvVar": "FELIX_HealthTimeoutOverrides",
          "NameYAML": "healthTimeoutOverrides",
          "NameGoAPI": "HealthTimeoutOverrides",
          "StringSchema": "Comma-delimited list of `\u003ckey\u003e=\u003cduration\u003e` pairs, where durations use Go's standard format (e.g. 1s, 1m, 1h3m2s)",
          "StringDefault": "",
          "ParsedDefault": "map[]",
          "ParsedType": "map[string]time.Duration",
          "YAMLType": "array",
          "YAMLSchema": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Allows the internal watchdog timeouts of individual subcomponents to be overridden. This is useful for working around \"false positive\" liveness timeouts that can occur in particularly stressful workloads or if CPU is constrained. For a list of active subcomponents, see Felix's logs.",
          "UserEditable": true,
          "GoType": "[]v3.HealthTimeoutOverride"
        }
      ]
    },
    {
      "Name": "Process: Logging",
      "Fields": [
        {
          "Group": "Process: Logging",
          "GroupWithSortPrefix": "00 Process: Logging",
          "NameConfigFile": "LogDebugFilenameRegex",
          "NameEnvVar": "FELIX_LogDebugFilenameRegex",
          "NameYAML": "logDebugFilenameRegex",
          "NameGoAPI": "LogDebugFilenameRegex",
          "StringSchema": "Regular expression",
          "StringDefault": "",
          "ParsedDefault": "\u003cnil\u003e",
          "ParsedType": "*regexp.Regexp",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls which source code files have their Debug log output included in the logs. Only logs from files with names that match the given regular expression are included. The filter only applies to Debug level logs.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Process: Logging",
          "GroupWithSortPrefix": "00 Process: Logging",
          "NameConfigFile": "LogFilePath",
          "NameEnvVar": "FELIX_LogFilePath",
          "NameYAML": "logFilePath",
          "NameGoAPI": "LogFilePath",
          "StringSchema": "Path to file",
          "StringDefault": "/var/log/calico/felix.log",
          "ParsedDefault": "/var/log/calico/felix.log",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "The full path to the Felix log. Set to none to disable file logging.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Process: Logging",
          "GroupWithSortPrefix": "00 Process: Logging",
          "NameConfigFile": "LogPrefix",
          "NameEnvVar": "FELIX_LogPrefix",
          "NameYAML": "logPrefix",
          "NameGoAPI": "LogPrefix",
          "StringSchema": "String",
          "StringDefault": "calico-packet",
          "ParsedDefault": "calico-packet",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The log prefix that Felix uses when rendering LOG rules.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Process: Logging",
          "GroupWithSortPrefix": "00 Process: Logging",
          "NameConfigFile": "LogSeverityFile",
          "NameEnvVar": "FELIX_LogSeverityFile",
          "NameYAML": "logSeverityFile",
          "NameGoAPI": "LogSeverityFile",
          "StringSchema": "One of: `\"DEBUG\"`, `\"ERROR\"`, `\"FATAL\"`, `\"INFO\"`, `\"WARNING\"` (case insensitive)",
          "StringDefault": "INFO",
          "ParsedDefault": "INFO",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The log severity above which logs are sent to the log file.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Process: Logging",
          "GroupWithSortPrefix": "00 Process: Logging",
          "NameConfigFile": "LogSeverityScreen",
          "NameEnvVar": "FELIX_LogSeverityScreen",
          "NameYAML": "logSeverityScreen",
          "NameGoAPI": "LogSeverityScreen",
          "StringSchema": "One of: `\"DEBUG\"`, `\"ERROR\"`, `\"FATAL\"`, `\"INFO\"`, `\"WARNING\"` (case insensitive)",
          "StringDefault": "INFO",
          "ParsedDefault": "INFO",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The log severity above which logs are sent to the stdout.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Process: Logging",
          "GroupWithSortPrefix": "00 Process: Logging",
          "NameConfigFile": "LogSeveritySys",
          "NameEnvVar": "FELIX_LogSeveritySys",
          "NameYAML": "logSeveritySys",
          "NameGoAPI": "LogSeveritySys",
          "StringSchema": "One of: `\"DEBUG\"`, `\"ERROR\"`, `\"FATAL\"`, `\"INFO\"`, `\"WARNING\"` (case insensitive)",
          "StringDefault": "INFO",
          "ParsedDefault": "INFO",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The log severity above which logs are sent to the syslog. Set to None for no logging to syslog.",
          "UserEditable": true,
          "GoType": "string"
        }
      ]
    },
    {
      "Name": "Process: Prometheus metrics",
      "Fields": [
        {
          "Group": "Process: Prometheus metrics",
          "GroupWithSortPrefix": "00 Process: Prometheus metrics",
          "NameConfigFile": "PrometheusGoMetricsEnabled",
          "NameEnvVar": "FELIX_PrometheusGoMetricsEnabled",
          "NameYAML": "prometheusGoMetricsEnabled",
          "NameGoAPI": "PrometheusGoMetricsEnabled",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Disables Go runtime metrics collection, which the Prometheus client does by default, when set to false. This reduces the number of metrics reported, reducing Prometheus load.",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Process: Prometheus metrics",
          "GroupWithSortPrefix": "00 Process: Prometheus metrics",
          "NameConfigFile": "PrometheusMetricsEnabled",
          "NameEnvVar": "FELIX_PrometheusMetricsEnabled",
          "NameYAML": "prometheusMetricsEnabled",
          "NameGoAPI": "PrometheusMetricsEnabled",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Enables the Prometheus metrics server in Felix if set to true.",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Process: Prometheus metrics",
          "GroupWithSortPrefix": "00 Process: Prometheus metrics",
          "NameConfigFile": "PrometheusMetricsHost",
          "NameEnvVar": "FELIX_PrometheusMetricsHost",
          "NameYAML": "prometheusMetricsHost",
          "NameGoAPI": "PrometheusMetricsHost",
          "StringSchema": "String matching regex `^[a-zA-Z0-9:._+-]{1,64}$`",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The host that the Prometheus metrics server should bind to.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Process: Prometheus metrics",
          "GroupWithSortPrefix": "00 Process: Prometheus metrics",
          "NameConfigFile": "PrometheusMetricsPort",
          "NameEnvVar": "FELIX_PrometheusMetricsPort",
          "NameYAML": "prometheusMetricsPort",
          "NameGoAPI": "PrometheusMetricsPort",
          "StringSchema": "Integer: [0,65535]",
          "StringDefault": "9091",
          "ParsedDefault": "9091",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The TCP port that the Prometheus metrics server should bind to.",
          "UserEditable": true,
          "GoType": "*int"
        },
        {
          "Group": "Process: Prometheus metrics",
          "GroupWithSortPrefix": "00 Process: Prometheus metrics",
          "NameConfigFile": "PrometheusProcessMetricsEnabled",
          "NameEnvVar": "FELIX_PrometheusProcessMetricsEnabled",
          "NameYAML": "prometheusProcessMetricsEnabled",
          "NameGoAPI": "PrometheusProcessMetricsEnabled",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Disables process metrics collection, which the Prometheus client does by default, when set to false. This reduces the number of metrics reported, reducing Prometheus load.",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Process: Prometheus metrics",
          "GroupWithSortPrefix": "00 Process: Prometheus metrics",
          "NameConfigFile": "PrometheusWireGuardMetricsEnabled",
          "NameEnvVar": "FELIX_PrometheusWireGuardMetricsEnabled",
          "NameYAML": "prometheusWireGuardMetricsEnabled",
          "NameGoAPI": "PrometheusWireGuardMetricsEnabled",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Disables wireguard metrics collection, which the Prometheus client does by default, when set to false. This reduces the number of metrics reported, reducing Prometheus load.",
          "UserEditable": true,
          "GoType": "*bool"
        }
      ]
    },
    {
      "Name": "Dataplane: Common",
      "Fields": [
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "AllowIPIPPacketsFromWorkloads",
          "NameEnvVar": "FELIX_AllowIPIPPacketsFromWorkloads",
          "NameYAML": "allowIPIPPacketsFromWorkloads",
          "NameGoAPI": "AllowIPIPPacketsFromWorkloads",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls whether Felix will add a rule to drop IPIP encapsulated traffic from workloads.",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "AllowVXLANPacketsFromWorkloads",
          "NameEnvVar": "FELIX_AllowVXLANPacketsFromWorkloads",
          "NameYAML": "allowVXLANPacketsFromWorkloads",
          "NameGoAPI": "AllowVXLANPacketsFromWorkloads",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls whether Felix will add a rule to drop VXLAN encapsulated traffic from workloads.",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "ChainInsertMode",
          "NameEnvVar": "FELIX_ChainInsertMode",
          "NameYAML": "chainInsertMode",
          "NameGoAPI": "ChainInsertMode",
          "StringSchema": "One of: `\"append\"`, `\"insert\"` (case insensitive)",
          "StringDefault": "insert",
          "ParsedDefault": "insert",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": true,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "Controls whether Felix hooks the kernel's top-level iptables chains by inserting a rule at the top of the chain or by appending a rule at the bottom. insert is the safe default since it prevents Calico's rules from being bypassed. If you switch to append mode, be sure that the other rules in the chains signal acceptance by falling through to the Calico rules, otherwise the Calico policy will be bypassed.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "DataplaneDriver",
          "NameEnvVar": "FELIX_DataplaneDriver",
          "NameYAML": "dataplaneDriver",
          "NameGoAPI": "DataplaneDriver",
          "StringSchema": "Path to executable, which must exist. If not an absolute path, the directory containing this binary and the system path will be searched.",
          "StringDefault": "calico-iptables-plugin",
          "ParsedDefault": "calico-iptables-plugin",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": true,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "Filename of the external dataplane driver to use. Only used if UseInternalDataplaneDriver is set to false.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "DataplaneWatchdogTimeout",
          "NameEnvVar": "FELIX_DataplaneWatchdogTimeout",
          "NameYAML": "dataplaneWatchdogTimeout",
          "NameGoAPI": "DataplaneWatchdogTimeout",
          "StringSchema": "Seconds (floating point)",
          "StringDefault": "90",
          "ParsedDefault": "1m30s",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `\"1m30s123ms\"` or `\"1h5m\"`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The readiness/liveness timeout used for Felix's (internal) dataplane driver. Deprecated: replaced by the generic HealthTimeoutOverrides.",
          "UserEditable": true,
          "GoType": "*v1.Duration"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "DefaultEndpointToHostAction",
          "NameEnvVar": "FELIX_DefaultEndpointToHostAction",
          "NameYAML": "defaultEndpointToHostAction",
          "NameGoAPI": "DefaultEndpointToHostAction",
          "StringSchema": "One of: `\"ACCEPT\"`, `\"DROP\"`, `\"RETURN\"` (case insensitive)",
          "StringDefault": "DROP",
          "ParsedDefault": "DROP",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": true,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "Controls what happens to traffic that goes from a workload endpoint to the host itself (after the endpoint's egress policy is applied). By default, Calico blocks traffic from workload endpoints to the host itself with an iptables \"DROP\" action. If you want to allow some or all traffic from endpoint to host, set this parameter to RETURN or ACCEPT. Use RETURN if you have your own rules in the iptables \"INPUT\" chain; Calico will insert its rules at the top of that chain, then \"RETURN\" packets to the \"INPUT\" chain once it has completed processing workload endpoint egress policy. Use ACCEPT to unconditionally accept packets from workloads after processing workload endpoint egress policy.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "DeviceRouteProtocol",
          "NameEnvVar": "FELIX_DeviceRouteProtocol",
          "NameYAML": "deviceRouteProtocol",
          "NameGoAPI": "DeviceRouteProtocol",
          "StringSchema": "Integer",
          "StringDefault": "3",
          "ParsedDefault": "3",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the protocol to set on routes programmed by Felix. The protocol is an 8-bit label used to identify the owner of the route.",
          "UserEditable": true,
          "GoType": "*int"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "DeviceRouteSourceAddress",
          "NameEnvVar": "FELIX_DeviceRouteSourceAddress",
          "NameYAML": "deviceRouteSourceAddress",
          "NameGoAPI": "DeviceRouteSourceAddress",
          "StringSchema": "IPv4 address",
          "StringDefault": "",
          "ParsedDefault": "\u003cnil\u003e",
          "ParsedType": "net.IP",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "IPv4 address to set as the source hint for routes programmed by Felix. When not set the source address for local traffic from host to workload will be determined by the kernel.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "DeviceRouteSourceAddressIPv6",
          "NameEnvVar": "FELIX_DeviceRouteSourceAddressIPv6",
          "NameYAML": "deviceRouteSourceAddressIPv6",
          "NameGoAPI": "DeviceRouteSourceAddressIPv6",
          "StringSchema": "IPv6 address",
          "StringDefault": "",
          "ParsedDefault": "\u003cnil\u003e",
          "ParsedType": "net.IP",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "IPv6 address to set as the source hint for routes programmed by Felix. When not set the source address for local traffic from host to workload will be determined by the kernel.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "DisableConntrackInvalidCheck",
          "NameEnvVar": "FELIX_DisableConntrackInvalidCheck",
          "NameYAML": "disableConntrackInvalidCheck",
          "NameGoAPI": "DisableConntrackInvalidCheck",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Disables the check for invalid connections in conntrack. While the conntrack invalid check helps to detect malicious traffic, it can also cause issues with certain multi-NIC scenarios.",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "EndpointStatusPathPrefix",
          "NameEnvVar": "FELIX_EndpointStatusPathPrefix",
          "NameYAML": "endpointStatusPathPrefix",
          "NameGoAPI": "EndpointStatusPathPrefix",
          "StringSchema": "Path to file",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The path to the directory where endpoint status will be written. Endpoint status file reporting is disabled if field is left empty.\n\nChosen directory should match the directory used by the CNI plugin for PodStartupDelay.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "ExternalNodesCIDRList",
          "NameEnvVar": "FELIX_ExternalNodesCIDRList",
          "NameYAML": "externalNodesList",
          "NameGoAPI": "ExternalNodesCIDRList",
          "StringSchema": "Comma-delimited list of CIDRs",
          "StringDefault": "",
          "ParsedDefault": "[]",
          "ParsedType": "[]string",
          "YAMLType": "array",
          "YAMLSchema": "List of strings: `[\"\u003cstring\u003e\", ...]`.",
          "Required": false,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "A list of CIDR's of external, non-Calico nodes from which VXLAN/IPIP overlay traffic will be allowed. By default, external tunneled traffic is blocked to reduce attack surface.",
          "UserEditable": true,
          "GoType": "*[]string"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "FailsafeInboundHostPorts",
          "NameEnvVar": "FELIX_FailsafeInboundHostPorts",
          "NameYAML": "failsafeInboundHostPorts",
          "NameGoAPI": "FailsafeInboundHostPorts",
          "StringSchema": "Comma-delimited list of numeric ports with optional protocol and CIDR:`(tcp|udp):\u003ccidr\u003e:\u003cport\u003e`, `(tcp|udp):\u003cport\u003e` or `\u003cport\u003e`. IPv6 CIDRs must be enclosed in square brackets.",
          "StringDefault": "tcp:22,udp:68,tcp:179,tcp:2379,tcp:2380,tcp:5473,tcp:6443,tcp:6666,tcp:6667",
          "ParsedDefault": "[{ tcp 22} { udp 68} { tcp 179} { tcp 2379} { tcp 2380} { tcp 5473} { tcp 6443} { tcp 6666} { tcp 6667}]",
          "ParsedType": "[]config.ProtoPort",
          "YAMLType": "array",
          "YAMLSchema": "List of protocol/port objects with optional CIDR match: `[{protocol: \"TCP|UDP\", port: \u003cport\u003e, net: \"\u003ccidr\u003e\"}, ...]`.",
          "Required": false,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "A list of ProtoPort struct objects including UDP/TCP/SCTP ports and CIDRs that Felix will allow incoming traffic to host endpoints on irrespective of the security policy. This is useful to avoid accidentally cutting off a host with incorrect configuration. For backwards compatibility, if the protocol is not specified, it defaults to \"tcp\". If a CIDR is not specified, it will allow traffic from all addresses. To disable all inbound host ports, use the value \"[]\". The default value allows ssh access, DHCP, BGP, etcd and the Kubernetes API.",
          "UserEditable": true,
          "GoType": "*[]v3.ProtoPort"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "FailsafeOutboundHostPorts",
          "NameEnvVar": "FELIX_FailsafeOutboundHostPorts",
          "NameYAML": "failsafeOutboundHostPorts",
          "NameGoAPI": "FailsafeOutboundHostPorts",
          "StringSchema": "Comma-delimited list of numeric ports with optional protocol and CIDR:`(tcp|udp):\u003ccidr\u003e:\u003cport\u003e`, `(tcp|udp):\u003cport\u003e` or `\u003cport\u003e`. IPv6 CIDRs must be enclosed in square brackets.",
          "StringDefault": "udp:53,udp:67,tcp:179,tcp:2379,tcp:2380,tcp:5473,tcp:6443,tcp:6666,tcp:6667",
          "ParsedDefault": "[{ udp 53} { udp 67} { tcp 179} { tcp 2379} { tcp 2380} { tcp 5473} { tcp 6443} { tcp 6666} { tcp 6667}]",
          "ParsedType": "[]config.ProtoPort",
          "YAMLType": "array",
          "YAMLSchema": "List of protocol/port objects with optional CIDR match: `[{protocol: \"TCP|UDP\", port: \u003cport\u003e, net: \"\u003ccidr\u003e\"}, ...]`.",
          "Required": false,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "A list of PortProto struct objects including UDP/TCP/SCTP ports and CIDRs that Felix will allow outgoing traffic from host endpoints to irrespective of the security policy. This is useful to avoid accidentally cutting off a host with incorrect configuration. For backwards compatibility, if the protocol is not specified, it defaults to \"tcp\". If a CIDR is not specified, it will allow traffic from all addresses. To disable all outbound host ports, use the value \"[]\". The default value opens etcd's standard ports to ensure that Felix does not get cut off from etcd as well as allowing DHCP, DNS, BGP and the Kubernetes API.",
          "UserEditable": true,
          "GoType": "*[]v3.ProtoPort"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "FloatingIPs",
          "NameEnvVar": "FELIX_FloatingIPs",
          "NameYAML": "floatingIPs",
          "NameGoAPI": "FloatingIPs",
          "StringSchema": "One of: `\"Disabled\"`, `\"Enabled\"` (case insensitive)",
          "StringDefault": "Disabled",
          "ParsedDefault": "Disabled",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `\"Enabled\"`, `\"Disabled\"`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Configures whether or not Felix will program non-OpenStack floating IP addresses. (OpenStack-derived floating IPs are always programmed, regardless of this setting.)",
          "UserEditable": true,
          "GoType": "*v3.FloatingIPType"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "IPForwarding",
          "NameEnvVar": "FELIX_IPForwarding",
          "NameYAML": "ipForwarding",
          "NameGoAPI": "IPForwarding",
          "StringSchema": "One of: `\"Disabled\"`, `\"Enabled\"` (case insensitive)",
          "StringDefault": "Enabled",
          "ParsedDefault": "Enabled",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `\"Enabled\"`, `\"Disabled\"`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls whether Felix sets the host sysctls to enable IP forwarding. IP forwarding is required when using Calico for workload networking. This should be disabled only on hosts where Calico is used solely for host protection.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "InterfaceExclude",
          "NameEnvVar": "FELIX_InterfaceExclude",
          "NameYAML": "interfaceExclude",
          "NameGoAPI": "InterfaceExclude",
          "StringSchema": "Comma-delimited list of Linux interface names/regex patterns. Regex patterns must start/end with `/`.",
          "StringDefault": "kube-ipvs0",
          "ParsedDefault": "[^kube-ipvs0$]",
          "ParsedType": "[]*regexp.Regexp",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "A comma-separated list of interface names that should be excluded when Felix is resolving host endpoints. The default value ensures that Felix ignores Kubernetes' internal `kube-ipvs0` device. If you want to exclude multiple interface names using a single value, the list supports regular expressions. For regular expressions you must wrap the value with `/`. For example having values `/^kube/,veth1` will exclude all interfaces that begin with `kube` and also the interface `veth1`.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "InterfacePrefix",
          "NameEnvVar": "FELIX_InterfacePrefix",
          "NameYAML": "interfacePrefix",
          "NameGoAPI": "InterfacePrefix",
          "StringSchema": "String matching regex `^[a-zA-Z0-9_-]{1,15}(,[a-zA-Z0-9_-]{1,15})*$`",
          "StringDefault": "cali",
          "ParsedDefault": "cali",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": true,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "The interface name prefix that identifies workload endpoints and so distinguishes them from host endpoint interfaces. Note: in environments other than bare metal, the orchestrators configure this appropriately. For example our Kubernetes and Docker integrations set the 'cali' value, and our OpenStack integration sets the 'tap' value.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "InterfaceRefreshInterval",
          "NameEnvVar": "FELIX_InterfaceRefreshInterval",
          "NameYAML": "interfaceRefreshInterval",
          "NameGoAPI": "InterfaceRefreshInterval",
          "StringSchema": "Seconds (floating point)",
          "StringDefault": "90",
          "ParsedDefault": "1m30s",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `\"1m30s123ms\"` or `\"1h5m\"`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The period at which Felix rescans local interfaces to verify their state. The rescan can be disabled by setting the interval to 0.",
          "UserEditable": true,
          "GoType": "*v1.Duration"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "Ipv6Support",
          "NameEnvVar": "FELIX_Ipv6Support",
          "NameYAML": "ipv6Support",
          "NameGoAPI": "IPv6Support",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls whether Felix enables support for IPv6 (if supported by the in-use dataplane).",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "MTUIfacePattern",
          "NameEnvVar": "FELIX_MTUIfacePattern",
          "NameYAML": "mtuIfacePattern",
          "NameGoAPI": "MTUIfacePattern",
          "StringSchema": "Regular expression",
          "StringDefault": "^((en|wl|ww|sl|ib)[Pcopsvx].*|(eth|wlan|wwan).*)",
          "ParsedDefault": "^((en|wl|ww|sl|ib)[Pcopsvx].*|(eth|wlan|wwan).*)",
          "ParsedType": "*regexp.Regexp",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "A regular expression that controls which interfaces Felix should scan in order to calculate the host's MTU. This should not match workload interfaces (usually named cali...).",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "NATOutgoingAddress",
          "NameEnvVar": "FELIX_NATOutgoingAddress",
          "NameYAML": "natOutgoingAddress",
          "NameGoAPI": "NATOutgoingAddress",
          "StringSchema": "IPv4 address",
          "StringDefault": "",
          "ParsedDefault": "\u003cnil\u003e",
          "ParsedType": "net.IP",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Specifies an address to use when performing source NAT for traffic in a natOutgoing pool that is leaving the network. By default the address used is an address on the interface the traffic is leaving on (i.e. it uses the iptables MASQUERADE target).",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "NATPortRange",
          "NameEnvVar": "FELIX_NATPortRange",
          "NameYAML": "natPortRange",
          "NameGoAPI": "NATPortRange",
          "StringSchema": "Port range: either a single number in [0,65535] or a range of numbers `n:m`",
          "StringDefault": "",
          "ParsedDefault": "0",
          "ParsedType": "numorstring.Port",
          "YAMLType": "integer or string",
          "YAMLSchema": "Must match the regular expression `^.*`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Specifies the range of ports that is used for port mapping when doing outgoing NAT. When unset the default behavior of the network stack is used.",
          "UserEditable": true,
          "GoType": "*numorstring.Port"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "NFTablesMode",
          "NameEnvVar": "FELIX_NFTablesMode",
          "NameYAML": "nftablesMode",
          "NameGoAPI": "NFTablesMode",
          "StringSchema": "One of: `\"Disabled\"`, `\"Enabled\"` (case insensitive)",
          "StringDefault": "Disabled",
          "ParsedDefault": "Disabled",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `\"Disabled\"`, `\"Enabled\"`, `\"Auto\"`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Configures nftables support in Felix.",
          "UserEditable": true,
          "GoType": "*v3.NFTablesMode"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "NetlinkTimeoutSecs",
          "NameEnvVar": "FELIX_NetlinkTimeoutSecs",
          "NameYAML": "netlinkTimeout",
          "NameGoAPI": "NetlinkTimeout",
          "StringSchema": "Seconds (floating point)",
          "StringDefault": "10",
          "ParsedDefault": "10s",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `\"1m30s123ms\"` or `\"1h5m\"`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The timeout when talking to the kernel over the netlink protocol, used for programming routes, rules, and other kernel objects.",
          "UserEditable": true,
          "GoType": "*v1.Duration"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "PolicySyncPathPrefix",
          "NameEnvVar": "FELIX_PolicySyncPathPrefix",
          "NameYAML": "policySyncPathPrefix",
          "NameGoAPI": "PolicySyncPathPrefix",
          "StringSchema": "Path to file",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to by Felix to communicate policy changes to external services, like Application layer policy.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "RemoveExternalRoutes",
          "NameEnvVar": "FELIX_RemoveExternalRoutes",
          "NameYAML": "removeExternalRoutes",
          "NameGoAPI": "RemoveExternalRoutes",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls whether Felix will remove unexpected routes to workload interfaces. Felix will always clean up expected routes that use the configured DeviceRouteProtocol. To add your own routes, you must use a distinct protocol (in addition to setting this field to false).",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "RouteRefreshInterval",
          "NameEnvVar": "FELIX_RouteRefreshInterval",
          "NameYAML": "routeRefreshInterval",
          "NameGoAPI": "RouteRefreshInterval",
          "StringSchema": "Seconds (floating point)",
          "StringDefault": "90",
          "ParsedDefault": "1m30s",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `\"1m30s123ms\"` or `\"1h5m\"`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The period at which Felix re-checks the routes in the dataplane to ensure that no other process has accidentally broken Calico's rules. Set to 0 to disable route refresh.",
          "UserEditable": true,
          "GoType": "*v1.Duration"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "RouteSource",
          "NameEnvVar": "FELIX_RouteSource",
          "NameYAML": "routeSource",
          "NameGoAPI": "RouteSource",
          "StringSchema": "One of: `\"CalicoIPAM\"`, `\"WorkloadIPs\"` (case insensitive)",
          "StringDefault": "CalicoIPAM",
          "ParsedDefault": "CalicoIPAM",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Configures where Felix gets its routing information. - WorkloadIPs: use workload endpoints to construct routes. - CalicoIPAM: the default - use IPAM data to construct routes.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "RouteSyncDisabled",
          "NameEnvVar": "FELIX_RouteSyncDisabled",
          "NameYAML": "routeSyncDisabled",
          "NameGoAPI": "RouteSyncDisabled",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Will disable all operations performed on the route table. Set to true to run in network-policy mode only.",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "RouteTableRange",
          "NameEnvVar": "FELIX_RouteTableRange",
          "NameYAML": "routeTableRange",
          "NameGoAPI": "RouteTableRange",
          "StringSchema": "Range of route table indices `n-m`, where `n` and `m` are integers in [0,250].",
          "StringDefault": "",
          "ParsedDefault": "{0 0}",
          "ParsedType": "idalloc.IndexRange",
          "YAMLType": "object",
          "YAMLSchema": "Route table range: `{min:\u003cn\u003e, max\u003cm\u003e}`.",
          "Required": false,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "Deprecated in favor of RouteTableRanges. Calico programs additional Linux route tables for various purposes. RouteTableRange specifies the indices of the route tables that Calico should use.",
          "UserEditable": true,
          "GoType": "*v3.RouteTableRange"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "RouteTableRanges",
          "NameEnvVar": "FELIX_RouteTableRanges",
          "NameYAML": "routeTableRanges",
          "NameGoAPI": "RouteTableRanges",
          "StringSchema": "Comma or space-delimited list of route table ranges of the form `n-m` where `n` and `m` are integers in [0,4294967295]. The sum of the sizes of all ranges may not exceed 65535.",
          "StringDefault": "",
          "ParsedDefault": "[]",
          "ParsedType": "[]idalloc.IndexRange",
          "YAMLType": "array",
          "YAMLSchema": "List of route table ranges: `[{min:\u003cn\u003e, max\u003cm\u003e}, ...]`.",
          "Required": false,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "Calico programs additional Linux route tables for various purposes. RouteTableRanges specifies a set of table index ranges that Calico should use. Deprecates`RouteTableRange`, overrides `RouteTableRange`.",
          "UserEditable": true,
          "GoType": "*v3.RouteTableRanges"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "ServiceLoopPrevention",
          "NameEnvVar": "FELIX_ServiceLoopPrevention",
          "NameYAML": "serviceLoopPrevention",
          "NameGoAPI": "ServiceLoopPrevention",
          "StringSchema": "One of: `\"Disabled\"`, `\"Drop\"`, `\"Reject\"` (case insensitive)",
          "StringDefault": "Drop",
          "ParsedDefault": "Drop",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "When service IP advertisement is enabled, prevent routing loops to service IPs that are not in use, by dropping or rejecting packets that do not get DNAT'd by kube-proxy. Unless set to \"Disabled\", in which case such routing loops continue to be allowed.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "SidecarAccelerationEnabled",
          "NameEnvVar": "FELIX_SidecarAccelerationEnabled",
          "NameYAML": "sidecarAccelerationEnabled",
          "NameGoAPI": "SidecarAccelerationEnabled",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Enables experimental sidecar acceleration.",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "UseInternalDataplaneDriver",
          "NameEnvVar": "FELIX_UseInternalDataplaneDriver",
          "NameYAML": "useInternalDataplaneDriver",
          "NameGoAPI": "UseInternalDataplaneDriver",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "If true, Felix will use its internal dataplane programming logic. If false, it will launch an external dataplane driver and communicate with it over protobuf.",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "WorkloadSourceSpoofing",
          "NameEnvVar": "FELIX_WorkloadSourceSpoofing",
          "NameYAML": "workloadSourceSpoofing",
          "NameGoAPI": "WorkloadSourceSpoofing",
          "StringSchema": "One of: `\"Any\"`, `\"Disabled\"` (case insensitive)",
          "StringDefault": "Disabled",
          "ParsedDefault": "Disabled",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls whether pods can use the allowedSourcePrefixes annotation to send traffic with a source IP address that is not theirs. This is disabled by default. When set to \"Any\", pods can request any prefix.",
          "UserEditable": true,
          "GoType": "string"
        }
      ]
    },
    {
      "Name": "Dataplane: iptables",
      "Fields": [
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "IpsetsRefreshInterval",
          "NameEnvVar": "FELIX_IpsetsRefreshInterval",
          "NameYAML": "ipsetsRefreshInterval",
          "NameGoAPI": "IpsetsRefreshInterval",
          "StringSchema": "Seconds (floating point)",
          "StringDefault": "90",
          "ParsedDefault": "1m30s",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `\"1m30s123ms\"` or `\"1h5m\"`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the period at which Felix re-checks all IP sets to look for discrepancies. Set to 0 to disable the periodic refresh.",
          "UserEditable": true,
          "GoType": "*v1.Duration"
        },
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "IptablesBackend",
          "NameEnvVar": "FELIX_IptablesBackend",
          "NameYAML": "iptablesBackend",
          "NameGoAPI": "IptablesBackend",
          "StringSchema": "One of: `\"auto\"`, `\"legacy\"`, `\"nft\"` (case insensitive)",
          "StringDefault": "auto",
          "ParsedDefault": "auto",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "Must match the regular expression `^(?i)(Auto|Legacy|NFT)?$`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls which backend of iptables will be used. The default is `Auto`.\n\nWarning: changing this on a running system can leave \"orphaned\" rules in the \"other\" backend. These should be cleaned up to avoid confusing interactions.",
          "UserEditable": true,
          "GoType": "*v3.IptablesBackend"
        },
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "IptablesFilterAllowAction",
          "NameEnvVar": "FELIX_IptablesFilterAllowAction",
          "NameYAML": "iptablesFilterAllowAction",
          "NameGoAPI": "IptablesFilterAllowAction",
          "StringSchema": "One of: `\"ACCEPT\"`, `\"RETURN\"` (case insensitive)",
          "StringDefault": "ACCEPT",
          "ParsedDefault": "ACCEPT",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": true,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "Controls what happens to traffic that is accepted by a Felix policy chain in the iptables filter table (which is used for \"normal\" policy). The default will immediately `Accept` the traffic. Use `Return` to send the traffic back up to the system chains for further processing.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "IptablesFilterDenyAction",
          "NameEnvVar": "FELIX_IptablesFilterDenyAction",
          "NameYAML": "iptablesFilterDenyAction",
          "NameGoAPI": "IptablesFilterDenyAction",
          "StringSchema": "One of: `\"DROP\"`, `\"REJECT\"` (case insensitive)",
          "StringDefault": "DROP",
          "ParsedDefault": "DROP",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": true,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "Controls what happens to traffic that is denied by network policy. By default Calico blocks traffic with an iptables \"DROP\" action. If you want to use \"REJECT\" action instead you can configure it in here.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "IptablesLockFilePath",
          "NameEnvVar": "FELIX_IptablesLockFilePath",
          "NameYAML": "iptablesLockFilePath",
          "NameGoAPI": "IptablesLockFilePath",
          "StringSchema": "Path to file",
          "StringDefault": "/run/xtables.lock",
          "ParsedDefault": "/run/xtables.lock",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The location of the iptables lock file. You may need to change this if the lock file is not in its standard location (for example if you have mapped it into Felix's container at a different path).",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "IptablesLockProbeIntervalMillis",
          "NameEnvVar": "FELIX_IptablesLockProbeIntervalMillis",
          "NameYAML": "iptablesLockProbeInterval",
          "NameGoAPI": "IptablesLockProbeInterval",
          "StringSchema": "Milliseconds (floating point)",
          "StringDefault": "50",
          "ParsedDefault": "50ms",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `\"1m30s123ms\"` or `\"1h5m\"`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "When IptablesLockTimeout is enabled: the time that Felix will wait between attempts to acquire the iptables lock if it is not available. Lower values make Felix more responsive when the lock is contended, but use more CPU.",
          "UserEditable": true,
          "GoType": "*v1.Duration"
        },
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "IptablesLockTimeoutSecs",
          "NameEnvVar": "FELIX_IptablesLockTimeoutSecs",
          "NameYAML": "iptablesLockTimeout",
          "NameGoAPI": "IptablesLockTimeout",
          "StringSchema": "Seconds (floating point)",
          "StringDefault": "0",
          "ParsedDefault": "0s",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `\"1m30s123ms\"` or `\"1h5m\"`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The time that Felix itself will wait for the iptables lock (rather than delegating the lock handling to the `iptables` command).\n\nDeprecated: `iptables-restore` v1.8+ always takes the lock, so enabling this feature results in deadlock.",
          "UserEditable": true,
          "GoType": "*v1.Duration"
        },
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "IptablesMangleAllowAction",
          "NameEnvVar": "FELIX_IptablesMangleAllowAction",
          "NameYAML": "iptablesMangleAllowAction",
          "NameGoAPI": "IptablesMangleAllowAction",
          "StringSchema": "One of: `\"ACCEPT\"`, `\"RETURN\"` (case insensitive)",
          "StringDefault": "ACCEPT",
          "ParsedDefault": "ACCEPT",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": true,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "Controls what happens to traffic that is accepted by a Felix policy chain in the iptables mangle table (which is used for \"pre-DNAT\" policy). The default will immediately `Accept` the traffic. Use `Return` to send the traffic back up to the system chains for further processing.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "IptablesMarkMask",
          "NameEnvVar": "FELIX_IptablesMarkMask",
          "NameYAML": "iptablesMarkMask",
          "NameGoAPI": "IptablesMarkMask",
          "StringSchema": "32-bit bitmask (hex or deccimal allowed) with at least 2 bits set, example: `0xffff0000`",
          "StringDefault": "0xffff0000",
          "ParsedDefault": "4294901760",
          "ParsedType": "uint32",
          "YAMLType": "integer",
          "YAMLSchema": "Unsigned 32-bit integer.",
          "Required": true,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "The mask that Felix selects its IPTables Mark bits from. Should be a 32 bit hexadecimal number with at least 8 bits set, none of which clash with any other mark bits in use on the system.",
          "UserEditable": true,
          "GoType": "*uint32"
        },
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "IptablesNATOutgoingInterfaceFilter",
          "NameEnvVar": "FELIX_IptablesNATOutgoingInterfaceFilter",
          "NameYAML": "iptablesNATOutgoingInterfaceFilter",
          "NameGoAPI": "IptablesNATOutgoingInterfaceFilter",
          "StringSchema": "String matching regex `^[a-zA-Z0-9:._+-]{1,15}$`",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "This parameter can be used to limit the host interfaces on which Calico will apply SNAT to traffic leaving a Calico IPAM pool with \"NAT outgoing\" enabled. This can be useful if you have a main data interface, where traffic should be SNATted and a secondary device (such as the docker bridge) which is local to the host and doesn't require SNAT. This parameter uses the iptables interface matching syntax, which allows + as a wildcard. Most users will not need to set this. Example: if your data interfaces are eth0 and eth1 and you want to exclude the docker bridge, you could set this to eth+.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "IptablesPostWriteCheckIntervalSecs",
          "NameEnvVar": "FELIX_IptablesPostWriteCheckIntervalSecs",
          "NameYAML": "iptablesPostWriteCheckInterval",
          "NameGoAPI": "IptablesPostWriteCheckInterval",
          "StringSchema": "Seconds (floating point)",
          "StringDefault": "5",
          "ParsedDefault": "5s",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `\"1m30s123ms\"` or `\"1h5m\"`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The period after Felix has done a write to the dataplane that it schedules an extra read back in order to check the write was not clobbered by another process. This should only occur if another application on the system doesn't respect the iptables lock.",
          "UserEditable": true,
          "GoType": "*v1.Duration"
        },
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "IptablesRefreshInterval",
          "NameEnvVar": "FELIX_IptablesRefreshInterval",
          "NameYAML": "iptablesRefreshInterval",
          "NameGoAPI": "IptablesRefreshInterval",
          "StringSchema": "Seconds (floating point)",
          "StringDefault": "180",
          "ParsedDefault": "3m0s",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `\"1m30s123ms\"` or `\"1h5m\"`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The period at which Felix re-checks the IP sets in the dataplane to ensure that no other process has accidentally broken Calico's rules. Set to 0 to disable IP sets refresh. Note: the default for this value is lower than the other refresh intervals as a workaround for a Linux kernel bug that was fixed in kernel version 4.11. If you are using v4.11 or greater you may want to set this to, a higher value to reduce Felix CPU usage.",
          "UserEditable": true,
          "GoType": "*v1.Duration"
        },
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "KubeNodePortRanges",
          "NameEnvVar": "FELIX_KubeNodePortRanges",
          "NameYAML": "kubeNodePortRanges",
          "NameGoAPI": "KubeNodePortRanges",
          "StringSchema": "List of port ranges: comma-delimited list of either single numbers in range [0,65535] or a ranges of numbers `n:m`",
          "StringDefault": "30000:32767",
          "ParsedDefault": "[30000:32767]",
          "ParsedType": "[]numorstring.Port",
          "YAMLType": "array",
          "YAMLSchema": "List of ports: `[\u003cport\u003e, ...]` where `\u003cport\u003e` is a port number (integer) or range (string), for example `80`, `\"8080:8089\"`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Holds list of port ranges used for service node ports. Only used if felix detects kube-proxy running in ipvs mode. Felix uses these ranges to separate host and workload traffic. .",
          "UserEditable": true,
          "GoType": "*[]numorstring.Port"
        },
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "MaxIpsetSize",
          "NameEnvVar": "FELIX_MaxIpsetSize",
          "NameYAML": "maxIpsetSize",
          "NameGoAPI": "MaxIpsetSize",
          "StringSchema": "Integer",
          "StringDefault": "1048576",
          "ParsedDefault": "1048576",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The maximum number of IP addresses that can be stored in an IP set. Not applicable if using the nftables backend.",
          "UserEditable": true,
          "GoType": "*int"
        }
      ]
    },
    {
      "Name": "Dataplane: nftables",
      "Fields": [
        {
          "Group": "Dataplane: nftables",
          "GroupWithSortPrefix": "21 Dataplane: nftables",
          "NameConfigFile": "NftablesFilterAllowAction",
          "NameEnvVar": "FELIX_NftablesFilterAllowAction",
          "NameYAML": "nftablesFilterAllowAction",
          "NameGoAPI": "NftablesFilterAllowAction",
          "StringSchema": "One of: `\"ACCEPT\"`, `\"RETURN\"` (case insensitive)",
          "StringDefault": "ACCEPT",
          "ParsedDefault": "ACCEPT",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": true,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "Controls the nftables action that Felix uses to represent the \"allow\" policy verdict in the filter table. The default is to `ACCEPT` the traffic, which is a terminal action. Alternatively, `RETURN` can be used to return the traffic back to the top-level chain for further processing by your rules.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: nftables",
          "GroupWithSortPrefix": "21 Dataplane: nftables",
          "NameConfigFile": "NftablesFilterDenyAction",
          "NameEnvVar": "FELIX_NftablesFilterDenyAction",
          "NameYAML": "nftablesFilterDenyAction",
          "NameGoAPI": "NftablesFilterDenyAction",
          "StringSchema": "One of: `\"DROP\"`, `\"REJECT\"` (case insensitive)",
          "StringDefault": "DROP",
          "ParsedDefault": "DROP",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": true,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "Controls what happens to traffic that is denied by network policy. By default, Calico blocks traffic with a \"drop\" action. If you want to use a \"reject\" action instead you can configure it here.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: nftables",
          "GroupWithSortPrefix": "21 Dataplane: nftables",
          "NameConfigFile": "NftablesMangleAllowAction",
          "NameEnvVar": "FELIX_NftablesMangleAllowAction",
          "NameYAML": "nftablesMangleAllowAction",
          "NameGoAPI": "NftablesMangleAllowAction",
          "StringSchema": "One of: `\"ACCEPT\"`, `\"RETURN\"` (case insensitive)",
          "StringDefault": "ACCEPT",
          "ParsedDefault": "ACCEPT",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": true,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "Controls the nftables action that Felix uses to represent the \"allow\" policy verdict in the mangle table. The default is to `ACCEPT` the traffic, which is a terminal action. Alternatively, `RETURN` can be used to return the traffic back to the top-level chain for further processing by your rules.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: nftables",
          "GroupWithSortPrefix": "21 Dataplane: nftables",
          "NameConfigFile": "NftablesMarkMask",
          "NameEnvVar": "FELIX_NftablesMarkMask",
          "NameYAML": "nftablesMarkMask",
          "NameGoAPI": "NftablesMarkMask",
          "StringSchema": "32-bit bitmask (hex or deccimal allowed) with at least 2 bits set, example: `0xffff0000`",
          "StringDefault": "0xffff0000",
          "ParsedDefault": "4294901760",
          "ParsedType": "uint32",
          "YAMLType": "integer",
          "YAMLSchema": "Unsigned 32-bit integer.",
          "Required": true,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "The mask that Felix selects its nftables Mark bits from. Should be a 32 bit hexadecimal number with at least 8 bits set, none of which clash with any other mark bits in use on the system.",
          "UserEditable": true,
          "GoType": "*uint32"
        },
        {
          "Group": "Dataplane: nftables",
          "GroupWithSortPrefix": "21 Dataplane: nftables",
          "NameConfigFile": "NftablesRefreshInterval",
          "NameEnvVar": "FELIX_NftablesRefreshInterval",
          "NameYAML": "nftablesRefreshInterval",
          "NameGoAPI": "NftablesRefreshInterval",
          "StringSchema": "Seconds (floating point)",
          "StringDefault": "180",
          "ParsedDefault": "3m0s",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `\"1m30s123ms\"` or `\"1h5m\"`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the interval at which Felix periodically refreshes the nftables rules.",
          "UserEditable": true,
          "GoType": "*v1.Duration"
        }
      ]
    },
    {
      "Name": "Dataplane: eBPF",
      "Fields": [
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFCTLBLogFilter",
          "NameEnvVar": "FELIX_BPFCTLBLogFilter",
          "NameYAML": "bpfCTLBLogFilter",
          "NameGoAPI": "BPFCTLBLogFilter",
          "StringSchema": "One of: `\"all\"` (case insensitive)",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Specifies, what is logged by connect time load balancer when BPFLogLevel is debug. Currently has to be specified as 'all' when BPFLogFilters is set to see CTLB logs.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFConnectTimeLoadBalancing",
          "NameEnvVar": "FELIX_BPFConnectTimeLoadBalancing",
          "NameYAML": "bpfConnectTimeLoadBalancing",
          "NameGoAPI": "BPFConnectTimeLoadBalancing",
          "StringSchema": "One of: `\"Disabled\"`, `\"Enabled\"`, `\"TCP\"` (case insensitive)",
          "StringDefault": "TCP",
          "ParsedDefault": "TCP",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `\"TCP\"`, `\"Enabled\"`, `\"Disabled\"`.",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "When in BPF mode, controls whether Felix installs the connect-time load balancer. The connect-time load balancer is required for the host to be able to reach Kubernetes services and it improves the performance of pod-to-service connections.When set to TCP, connect time load balancing is available only for services with TCP ports.",
          "UserEditable": true,
          "GoType": "*v3.BPFConnectTimeLBType"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFConnectTimeLoadBalancingEnabled",
          "NameEnvVar": "FELIX_BPFConnectTimeLoadBalancingEnabled",
          "NameYAML": "bpfConnectTimeLoadBalancingEnabled",
          "NameGoAPI": "BPFConnectTimeLoadBalancingEnabled",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "",
          "ParsedDefault": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "When in BPF mode, controls whether Felix installs the connection-time load balancer. The connect-time load balancer is required for the host to be able to reach Kubernetes services and it improves the performance of pod-to-service connections. The only reason to disable it is for debugging purposes.\n\nDeprecated: Use BPFConnectTimeLoadBalancing.",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFDSROptoutCIDRs",
          "NameEnvVar": "FELIX_BPFDSROptoutCIDRs",
          "NameYAML": "bpfDSROptoutCIDRs",
          "NameGoAPI": "BPFDSROptoutCIDRs",
          "StringSchema": "Comma-delimited list of CIDRs",
          "StringDefault": "",
          "ParsedDefault": "[]",
          "ParsedType": "[]string",
          "YAMLType": "array",
          "YAMLSchema": "List of CIDRs: `[\"\u003ccidr\u003e\", ...]`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "A list of CIDRs which are excluded from DSR. That is, clients in those CIDRs will access service node ports as if BPFExternalServiceMode was set to Tunnel.",
          "UserEditable": true,
          "GoType": "*[]string"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFDataIfacePattern",
          "NameEnvVar": "FELIX_BPFDataIfacePattern",
          "NameYAML": "bpfDataIfacePattern",
          "NameGoAPI": "BPFDataIfacePattern",
          "StringSchema": "Regular expression",
          "StringDefault": "^((en|wl|ww|sl|ib)[Popsx].*|(eth|wlan|wwan|bond).*|tunl0$|vxlan.calico$|vxlan-v6.calico$|wireguard.cali$|wg-v6.cali$|egress.calico$)",
          "ParsedDefault": "^((en|wl|ww|sl|ib)[Popsx].*|(eth|wlan|wwan|bond).*|tunl0$|vxlan.calico$|vxlan-v6.calico$|wireguard.cali$|wg-v6.cali$|egress.calico$)",
          "ParsedType": "*regexp.Regexp",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "A regular expression that controls which interfaces Felix should attach BPF programs to in order to catch traffic to/from the network. This needs to match the interfaces that Calico workload traffic flows over as well as any interfaces that handle incoming traffic to nodeports and services from outside the cluster. It should not match the workload interfaces (usually named cali...).",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFDisableGROForIfaces",
          "NameEnvVar": "FELIX_BPFDisableGROForIfaces",
          "NameYAML": "bpfDisableGROForIfaces",
          "NameGoAPI": "BPFDisableGROForIfaces",
          "StringSchema": "Regular expression",
          "StringDefault": "",
          "ParsedDefault": "\u003cnil\u003e",
          "ParsedType": "*regexp.Regexp",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "A regular expression that controls which interfaces Felix should disable the Generic Receive Offload [GRO] option. It should not match the workload interfaces (usually named cali...).",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFDisableUnprivileged",
          "NameEnvVar": "FELIX_BPFDisableUnprivileged",
          "NameYAML": "bpfDisableUnprivileged",
          "NameGoAPI": "BPFDisableUnprivileged",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "If enabled, Felix sets the kernel.unprivileged_bpf_disabled sysctl to disable unprivileged use of BPF. This ensures that unprivileged users cannot access Calico's BPF maps and cannot insert their own BPF programs to interfere with Calico's.",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFEnabled",
          "NameEnvVar": "FELIX_BPFEnabled",
          "NameYAML": "bpfEnabled",
          "NameGoAPI": "BPFEnabled",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "If enabled Felix will use the BPF dataplane.",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFEnforceRPF",
          "NameEnvVar": "FELIX_BPFEnforceRPF",
          "NameYAML": "bpfEnforceRPF",
          "NameGoAPI": "BPFEnforceRPF",
          "StringSchema": "One of: `\"Disabled\"`, `\"Loose\"`, `\"Strict\"` (case insensitive)",
          "StringDefault": "Loose",
          "ParsedDefault": "Loose",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Enforce strict RPF on all host interfaces with BPF programs regardless of what is the per-interfaces or global setting. Possible values are Disabled, Strict or Loose.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFExcludeCIDRsFromNAT",
          "NameEnvVar": "FELIX_BPFExcludeCIDRsFromNAT",
          "NameYAML": "bpfExcludeCIDRsFromNAT",
          "NameGoAPI": "BPFExcludeCIDRsFromNAT",
          "StringSchema": "Comma-delimited list of CIDRs",
          "StringDefault": "",
          "ParsedDefault": "[]",
          "ParsedType": "[]string",
          "YAMLType": "array",
          "YAMLSchema": "List of CIDRs: `[\"\u003ccidr\u003e\", ...]`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "A list of CIDRs that are to be excluded from NAT resolution so that host can handle them. A typical usecase is node local DNS cache.",
          "UserEditable": true,
          "GoType": "*[]string"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFExtToServiceConnmark",
          "NameEnvVar": "FELIX_BPFExtToServiceConnmark",
          "NameYAML": "bpfExtToServiceConnmark",
          "NameGoAPI": "BPFExtToServiceConnmark",
          "StringSchema": "Integer",
          "StringDefault": "0",
          "ParsedDefault": "0",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "In BPF mode, controls a 32bit mark that is set on connections from an external client to a local service. This mark allows us to control how packets of that connection are routed within the host and how is routing interpreted by RPF check.",
          "UserEditable": true,
          "GoType": "*int"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFExternalServiceMode",
          "NameEnvVar": "FELIX_BPFExternalServiceMode",
          "NameYAML": "bpfExternalServiceMode",
          "NameGoAPI": "BPFExternalServiceMode",
          "StringSchema": "One of: `\"dsr\"`, `\"tunnel\"` (case insensitive)",
          "StringDefault": "tunnel",
          "ParsedDefault": "tunnel",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "In BPF mode, controls how connections from outside the cluster to services (node ports and cluster IPs) are forwarded to remote workloads. If set to \"Tunnel\" then both request and response traffic is tunneled to the remote node. If set to \"DSR\", the request traffic is tunneled but the response traffic is sent directly from the remote node. In \"DSR\" mode, the remote node appears to use the IP of the ingress node; this requires a permissive L2 network.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFForceTrackPacketsFromIfaces",
          "NameEnvVar": "FELIX_BPFForceTrackPacketsFromIfaces",
          "NameYAML": "bpfForceTrackPacketsFromIfaces",
          "NameGoAPI": "BPFForceTrackPacketsFromIfaces",
          "StringSchema": "Comma-delimited list of strings, each matching the regex `^[a-zA-Z0-9:._+-]{1,15}$`",
          "StringDefault": "docker+",
          "ParsedDefault": "[docker+]",
          "ParsedType": "[]string",
          "YAMLType": "array",
          "YAMLSchema": "List of interface names (may use `+` as a wildcard: `[\"\u003cname\u003e\", ...]`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "In BPF mode, forces traffic from these interfaces to skip Calico's iptables NOTRACK rule, allowing traffic from those interfaces to be tracked by Linux conntrack. Should only be used for interfaces that are not used for the Calico fabric. For example, a docker bridge device for non-Calico-networked containers.",
          "UserEditable": true,
          "GoType": "*[]string"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFHostConntrackBypass",
          "NameEnvVar": "FELIX_BPFHostConntrackBypass",
          "NameYAML": "bpfHostConntrackBypass",
          "NameGoAPI": "BPFHostConntrackBypass",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls whether to bypass Linux conntrack in BPF mode for workloads and services.",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFHostNetworkedNATWithoutCTLB",
          "NameEnvVar": "FELIX_BPFHostNetworkedNATWithoutCTLB",
          "NameYAML": "bpfHostNetworkedNATWithoutCTLB",
          "NameGoAPI": "BPFHostNetworkedNATWithoutCTLB",
          "StringSchema": "One of: `\"Disabled\"`, `\"Enabled\"` (case insensitive)",
          "StringDefault": "Enabled",
          "ParsedDefault": "Enabled",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `\"Enabled\"`, `\"Disabled\"`.",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "When in BPF mode, controls whether Felix does a NAT without CTLB. This along with BPFConnectTimeLoadBalancing determines the CTLB behavior.",
          "UserEditable": true,
          "GoType": "*v3.BPFHostNetworkedNATType"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFKubeProxyEndpointSlicesEnabled",
          "NameEnvVar": "FELIX_BPFKubeProxyEndpointSlicesEnabled",
          "NameYAML": "bpfKubeProxyEndpointSlicesEnabled",
          "NameGoAPI": "BPFKubeProxyEndpointSlicesEnabled",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Deprecated and has no effect. BPF kube-proxy always accepts endpoint slices. This option will be removed in the next release.",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFKubeProxyIptablesCleanupEnabled",
          "NameEnvVar": "FELIX_BPFKubeProxyIptablesCleanupEnabled",
          "NameYAML": "bpfKubeProxyIptablesCleanupEnabled",
          "NameGoAPI": "BPFKubeProxyIptablesCleanupEnabled",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "If enabled in BPF mode, Felix will proactively clean up the upstream Kubernetes kube-proxy's iptables chains. Should only be enabled if kube-proxy is not running.",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFKubeProxyMinSyncPeriod",
          "NameEnvVar": "FELIX_BPFKubeProxyMinSyncPeriod",
          "NameYAML": "bpfKubeProxyMinSyncPeriod",
          "NameGoAPI": "BPFKubeProxyMinSyncPeriod",
          "StringSchema": "Seconds (floating point)",
          "StringDefault": "1",
          "ParsedDefault": "1s",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `\"1m30s123ms\"` or `\"1h5m\"`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "In BPF mode, controls the minimum time between updates to the dataplane for Felix's embedded kube-proxy. Lower values give reduced set-up latency. Higher values reduce Felix CPU usage by batching up more work.",
          "UserEditable": true,
          "GoType": "*v1.Duration"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFL3IfacePattern",
          "NameEnvVar": "FELIX_BPFL3IfacePattern",
          "NameYAML": "bpfL3IfacePattern",
          "NameGoAPI": "BPFL3IfacePattern",
          "StringSchema": "Regular expression",
          "StringDefault": "",
          "ParsedDefault": "\u003cnil\u003e",
          "ParsedType": "*regexp.Regexp",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "A regular expression that allows to list tunnel devices like wireguard or vxlan (i.e., L3 devices) in addition to BPFDataIfacePattern. That is, tunnel interfaces not created by Calico, that Calico workload traffic flows over as well as any interfaces that handle incoming traffic to nodeports and services from outside the cluster.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFLogFilters",
          "NameEnvVar": "FELIX_BPFLogFilters",
          "NameYAML": "bpfLogFilters",
          "NameGoAPI": "BPFLogFilters",
          "StringSchema": "Comma-delimited list of key=value pairs",
          "StringDefault": "",
          "ParsedDefault": "map[]",
          "ParsedType": "map[string]string",
          "YAMLType": "object",
          "YAMLSchema": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "A map of key=values where the value is a pcap filter expression and the key is an interface name with 'all' denoting all interfaces, 'weps' all workload endpoints and 'heps' all host endpoints.\n\nWhen specified as an env var, it accepts a comma-separated list of key=values.",
          "UserEditable": true,
          "GoType": "*map[string]string"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFLogLevel",
          "NameEnvVar": "FELIX_BPFLogLevel",
          "NameYAML": "bpfLogLevel",
          "NameGoAPI": "BPFLogLevel",
          "StringSchema": "One of: `\"debug\"`, `\"info\"`, `\"off\"` (case insensitive)",
          "StringDefault": "off",
          "ParsedDefault": "off",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the log level of the BPF programs when in BPF dataplane mode. One of \"Off\", \"Info\", or \"Debug\". The logs are emitted to the BPF trace pipe, accessible with the command `tc exec bpf debug`. .",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFMapSizeConntrack",
          "NameEnvVar": "FELIX_BPFMapSizeConntrack",
          "NameYAML": "bpfMapSizeConntrack",
          "NameGoAPI": "BPFMapSizeConntrack",
          "StringSchema": "Integer",
          "StringDefault": "512000",
          "ParsedDefault": "512000",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the size for the conntrack map. This map must be large enough to hold an entry for each active connection. Warning: changing the size of the conntrack map can cause disruption.",
          "UserEditable": true,
          "GoType": "*int"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFMapSizeIPSets",
          "NameEnvVar": "FELIX_BPFMapSizeIPSets",
          "NameYAML": "bpfMapSizeIPSets",
          "NameGoAPI": "BPFMapSizeIPSets",
          "StringSchema": "Integer",
          "StringDefault": "1048576",
          "ParsedDefault": "1048576",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the size for ipsets map. The IP sets map must be large enough to hold an entry for each endpoint matched by every selector in the source/destination matches in network policy. Selectors such as \"all()\" can result in large numbers of entries (one entry per endpoint in that case).",
          "UserEditable": true,
          "GoType": "*int"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFMapSizeIfState",
          "NameEnvVar": "FELIX_BPFMapSizeIfState",
          "NameYAML": "bpfMapSizeIfState",
          "NameGoAPI": "BPFMapSizeIfState",
          "StringSchema": "Integer",
          "StringDefault": "1000",
          "ParsedDefault": "1000",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the size for ifstate map. The ifstate map must be large enough to hold an entry for each device (host + workloads) on a host.",
          "UserEditable": true,
          "GoType": "*int"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFMapSizeNATAffinity",
          "NameEnvVar": "FELIX_BPFMapSizeNATAffinity",
          "NameYAML": "bpfMapSizeNATAffinity",
          "NameGoAPI": "BPFMapSizeNATAffinity",
          "StringSchema": "Integer",
          "StringDefault": "65536",
          "ParsedDefault": "65536",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the size of the BPF map that stores the affinity of a connection (for services that enable that feature.",
          "UserEditable": true,
          "GoType": "*int"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFMapSizeNATBackend",
          "NameEnvVar": "FELIX_BPFMapSizeNATBackend",
          "NameYAML": "bpfMapSizeNATBackend",
          "NameGoAPI": "BPFMapSizeNATBackend",
          "StringSchema": "Integer",
          "StringDefault": "262144",
          "ParsedDefault": "262144",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the size for NAT back end map. This is the total number of endpoints. This is mostly more than the size of the number of services.",
          "UserEditable": true,
          "GoType": "*int"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFMapSizeNATFrontend",
          "NameEnvVar": "FELIX_BPFMapSizeNATFrontend",
          "NameYAML": "bpfMapSizeNATFrontend",
          "NameGoAPI": "BPFMapSizeNATFrontend",
          "StringSchema": "Integer",
          "StringDefault": "65536",
          "ParsedDefault": "65536",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the size for NAT front end map. FrontendMap should be large enough to hold an entry for each nodeport, external IP and each port in each service.",
          "UserEditable": true,
          "GoType": "*int"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFMapSizeRoute",
          "NameEnvVar": "FELIX_BPFMapSizeRoute",
          "NameYAML": "bpfMapSizeRoute",
          "NameGoAPI": "BPFMapSizeRoute",
          "StringSchema": "Integer",
          "StringDefault": "262144",
          "ParsedDefault": "262144",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the size for the routes map. The routes map should be large enough to hold one entry per workload and a handful of entries per host (enough to cover its own IPs and tunnel IPs).",
          "UserEditable": true,
          "GoType": "*int"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFPSNATPorts",
          "NameEnvVar": "FELIX_BPFPSNATPorts",
          "NameYAML": "bpfPSNATPorts",
          "NameGoAPI": "BPFPSNATPorts",
          "StringSchema": "Port range: either a single number in [0,65535] or a range of numbers `n:m`",
          "StringDefault": "20000:29999",
          "ParsedDefault": "20000:29999",
          "ParsedType": "numorstring.Port",
          "YAMLType": "integer or string",
          "YAMLSchema": "Must match the regular expression `^.*`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the range from which we randomly pick a port if there is a source port collision. This should be within the ephemeral range as defined by RFC 6056 (1024–65535) and preferably outside the ephemeral ranges used by common operating systems. Linux uses 32768–60999, while others mostly use the IANA defined range 49152–65535. It is not necessarily a problem if this range overlaps with the operating systems. Both ends of the range are inclusive.",
          "UserEditable": true,
          "GoType": "*numorstring.Port"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFPolicyDebugEnabled",
          "NameEnvVar": "FELIX_BPFPolicyDebugEnabled",
          "NameYAML": "bpfPolicyDebugEnabled",
          "NameGoAPI": "BPFPolicyDebugEnabled",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "When true, Felix records detailed information about the BPF policy programs, which can be examined with the calico-bpf command-line tool.",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFRedirectToPeer",
          "NameEnvVar": "FELIX_BPFRedirectToPeer",
          "NameYAML": "bpfRedirectToPeer",
          "NameGoAPI": "BPFRedirectToPeer",
          "StringSchema": "One of: `\"Disabled\"`, `\"Enabled\"`, `\"L2Only\"` (case insensitive)",
          "StringDefault": "L2Only",
          "ParsedDefault": "L2Only",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls which whether it is allowed to forward straight to the peer side of the workload devices. It is allowed for any host L2 devices by default (L2Only), but it breaks TCP dump on the host side of workload device as it bypasses it on ingress. Value of Enabled also allows redirection from L3 host devices like IPIP tunnel or Wireguard directly to the peer side of the workload's device. This makes redirection faster, however, it breaks tools like tcpdump on the peer side. Use Enabled with caution.",
          "UserEditable": true,
          "GoType": "string"
        }
      ]
    },
    {
      "Name": "Dataplane: Windows",
      "Fields": [
        {
          "Group": "Dataplane: Windows",
          "GroupWithSortPrefix": "23 Dataplane: Windows",
          "NameConfigFile": "WindowsManageFirewallRules",
          "NameEnvVar": "FELIX_WindowsManageFirewallRules",
          "NameYAML": "windowsManageFirewallRules",
          "NameGoAPI": "WindowsManageFirewallRules",
          "StringSchema": "One of: `\"Disabled\"`, `\"Enabled\"` (case insensitive)",
          "StringDefault": "Disabled",
          "ParsedDefault": "Disabled",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `\"Enabled\"`, `\"Disabled\"`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Configures whether or not Felix will program Windows Firewall rules (to allow inbound access to its own metrics ports).",
          "UserEditable": true,
          "GoType": "*v3.WindowsManageFirewallRulesMode"
        }
      ]
    },
    {
      "Name": "Dataplane: OpenStack support",
      "Fields": [
        {
          "Group": "Dataplane: OpenStack support",
          "GroupWithSortPrefix": "25 Dataplane: OpenStack support",
          "NameConfigFile": "EndpointReportingDelaySecs",
          "NameEnvVar": "FELIX_EndpointReportingDelaySecs",
          "NameYAML": "endpointReportingDelay",
          "NameGoAPI": "EndpointReportingDelay",
          "StringSchema": "Seconds (floating point)",
          "StringDefault": "1",
          "ParsedDefault": "1s",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `\"1m30s123ms\"` or `\"1h5m\"`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The delay before Felix reports endpoint status to the datastore. This is only used by the OpenStack integration.",
          "UserEditable": true,
          "GoType": "*v1.Duration"
        },
        {
          "Group": "Dataplane: OpenStack support",
          "GroupWithSortPrefix": "25 Dataplane: OpenStack support",
          "NameConfigFile": "EndpointReportingEnabled",
          "NameEnvVar": "FELIX_EndpointReportingEnabled",
          "NameYAML": "endpointReportingEnabled",
          "NameGoAPI": "EndpointReportingEnabled",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls whether Felix reports endpoint status to the datastore. This is only used by the OpenStack integration.",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Dataplane: OpenStack support",
          "GroupWithSortPrefix": "25 Dataplane: OpenStack support",
          "NameConfigFile": "MetadataAddr",
          "NameEnvVar": "FELIX_MetadataAddr",
          "NameYAML": "metadataAddr",
          "NameGoAPI": "MetadataAddr",
          "StringSchema": "String matching regex `^[a-zA-Z0-9_.-]+$`",
          "StringDefault": "127.0.0.1",
          "ParsedDefault": "127.0.0.1",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "The IP address or domain name of the server that can answer VM queries for cloud-init metadata. In OpenStack, this corresponds to the machine running nova-api (or in Ubuntu, nova-api-metadata). A value of none (case-insensitive) means that Felix should not set up any NAT rule for the metadata path.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: OpenStack support",
          "GroupWithSortPrefix": "25 Dataplane: OpenStack support",
          "NameConfigFile": "MetadataPort",
          "NameEnvVar": "FELIX_MetadataPort",
          "NameYAML": "metadataPort",
          "NameGoAPI": "MetadataPort",
          "StringSchema": "Integer: [0,65535]",
          "StringDefault": "8775",
          "ParsedDefault": "8775",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "Required": false,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "The port of the metadata server. This, combined with global.MetadataAddr (if not 'None'), is used to set up a NAT rule, from 169.254.169.254:80 to MetadataAddr:MetadataPort. In most cases this should not need to be changed .",
          "UserEditable": true,
          "GoType": "*int"
        },
        {
          "Group": "Dataplane: OpenStack support",
          "GroupWithSortPrefix": "25 Dataplane: OpenStack support",
          "NameConfigFile": "OpenstackRegion",
          "NameEnvVar": "FELIX_OpenstackRegion",
          "NameYAML": "openstackRegion",
          "NameGoAPI": "OpenstackRegion",
          "StringSchema": "OpenStack region name (must be a valid DNS label)",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "The name of the region that a particular Felix belongs to. In a multi-region Calico/OpenStack deployment, this must be configured somehow for each Felix (here in the datamodel, or in felix.cfg or the environment on each compute node), and must match the [calico] openstack_region value configured in neutron.conf on each node.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Dataplane: OpenStack support",
          "GroupWithSortPrefix": "25 Dataplane: OpenStack support",
          "NameConfigFile": "ReportingIntervalSecs",
          "NameEnvVar": "FELIX_ReportingIntervalSecs",
          "NameYAML": "reportingInterval",
          "NameGoAPI": "ReportingInterval",
          "StringSchema": "Seconds (floating point)",
          "StringDefault": "30",
          "ParsedDefault": "30s",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `\"1m30s123ms\"` or `\"1h5m\"`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The interval at which Felix reports its status into the datastore or 0 to disable. Must be non-zero in OpenStack deployments.",
          "UserEditable": true,
          "GoType": "*v1.Duration"
        },
        {
          "Group": "Dataplane: OpenStack support",
          "GroupWithSortPrefix": "25 Dataplane: OpenStack support",
          "NameConfigFile": "ReportingTTLSecs",
          "NameEnvVar": "FELIX_ReportingTTLSecs",
          "NameYAML": "reportingTTL",
          "NameGoAPI": "ReportingTTL",
          "StringSchema": "Seconds (floating point)",
          "StringDefault": "90",
          "ParsedDefault": "1m30s",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `\"1m30s123ms\"` or `\"1h5m\"`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The time-to-live setting for process-wide status reports.",
          "UserEditable": true,
          "GoType": "*v1.Duration"
        }
      ]
    },
    {
      "Name": "Dataplane: XDP acceleration for iptables dataplane",
      "Fields": [
        {
          "Group": "Dataplane: XDP acceleration for iptables dataplane",
          "GroupWithSortPrefix": "25 Dataplane: XDP acceleration for iptables dataplane",
          "NameConfigFile": "GenericXDPEnabled",
          "NameEnvVar": "FELIX_GenericXDPEnabled",
          "NameYAML": "genericXDPEnabled",
          "NameGoAPI": "GenericXDPEnabled",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Enables Generic XDP so network cards that don't support XDP offload or driver modes can use XDP. This is not recommended since it doesn't provide better performance than iptables.",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Dataplane: XDP acceleration for iptables dataplane",
          "GroupWithSortPrefix": "25 Dataplane: XDP acceleration for iptables dataplane",
          "NameConfigFile": "XDPEnabled",
          "NameEnvVar": "FELIX_XDPEnabled",
          "NameYAML": "xdpEnabled",
          "NameGoAPI": "XDPEnabled",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Enables XDP acceleration for suitable untracked incoming deny rules.",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Dataplane: XDP acceleration for iptables dataplane",
          "GroupWithSortPrefix": "25 Dataplane: XDP acceleration for iptables dataplane",
          "NameConfigFile": "XDPRefreshInterval",
          "NameEnvVar": "FELIX_XDPRefreshInterval",
          "NameYAML": "xdpRefreshInterval",
          "NameGoAPI": "XDPRefreshInterval",
          "StringSchema": "Seconds (floating point)",
          "StringDefault": "90",
          "ParsedDefault": "1m30s",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `\"1m30s123ms\"` or `\"1h5m\"`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The period at which Felix re-checks all XDP state to ensure that no other process has accidentally broken Calico's BPF maps or attached programs. Set to 0 to disable XDP refresh.",
          "UserEditable": true,
          "GoType": "*v1.Duration"
        }
      ]
    },
    {
      "Name": "Overlay: VXLAN overlay",
      "Fields": [
        {
          "Group": "Overlay: VXLAN overlay",
          "GroupWithSortPrefix": "31 Overlay: VXLAN overlay",
          "NameConfigFile": "VXLANEnabled",
          "NameEnvVar": "FELIX_VXLANEnabled",
          "NameYAML": "vxlanEnabled",
          "NameGoAPI": "VXLANEnabled",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "",
          "ParsedDefault": "\u003cnil\u003e",
          "ParsedType": "*bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Overrides whether Felix should create the VXLAN tunnel device for IPv4 VXLAN networking. Optional as Felix determines this based on the existing IP pools.",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Overlay: VXLAN overlay",
          "GroupWithSortPrefix": "31 Overlay: VXLAN overlay",
          "NameConfigFile": "VXLANMTU",
          "NameEnvVar": "FELIX_VXLANMTU",
          "NameYAML": "vxlanMTU",
          "NameGoAPI": "VXLANMTU",
          "StringSchema": "Integer",
          "StringDefault": "0",
          "ParsedDefault": "0",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The MTU to set on the IPv4 VXLAN tunnel device. Optional as Felix auto-detects the MTU based on the MTU of the host's interfaces.",
          "UserEditable": true,
          "GoType": "*int"
        },
        {
          "Group": "Overlay: VXLAN overlay",
          "GroupWithSortPrefix": "31 Overlay: VXLAN overlay",
          "NameConfigFile": "VXLANMTUV6",
          "NameEnvVar": "FELIX_VXLANMTUV6",
          "NameYAML": "vxlanMTUV6",
          "NameGoAPI": "VXLANMTUV6",
          "StringSchema": "Integer",
          "StringDefault": "0",
          "ParsedDefault": "0",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The MTU to set on the IPv6 VXLAN tunnel device. Optional as Felix auto-detects the MTU based on the MTU of the host's interfaces.",
          "UserEditable": true,
          "GoType": "*int"
        },
        {
          "Group": "Overlay: VXLAN overlay",
          "GroupWithSortPrefix": "31 Overlay: VXLAN overlay",
          "NameConfigFile": "VXLANPort",
          "NameEnvVar": "FELIX_VXLANPort",
          "NameYAML": "vxlanPort",
          "NameGoAPI": "VXLANPort",
          "StringSchema": "Integer",
          "StringDefault": "4789",
          "ParsedDefault": "4789",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The UDP port number to use for VXLAN traffic.",
          "UserEditable": true,
          "GoType": "*int"
        },
        {
          "Group": "Overlay: VXLAN overlay",
          "GroupWithSortPrefix": "31 Overlay: VXLAN overlay",
          "NameConfigFile": "VXLANVNI",
          "NameEnvVar": "FELIX_VXLANVNI",
          "NameYAML": "vxlanVNI",
          "NameGoAPI": "VXLANVNI",
          "StringSchema": "Integer",
          "StringDefault": "4096",
          "ParsedDefault": "4096",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The VXLAN VNI to use for VXLAN traffic. You may need to change this if the default value is in use on your system.",
          "UserEditable": true,
          "GoType": "*int"
        }
      ]
    },
    {
      "Name": "Overlay: IP-in-IP",
      "Fields": [
        {
          "Group": "Overlay: IP-in-IP",
          "GroupWithSortPrefix": "32 Overlay: IP-in-IP",
          "NameConfigFile": "IpInIpEnabled",
          "NameEnvVar": "FELIX_IpInIpEnabled",
          "NameYAML": "ipipEnabled",
          "NameGoAPI": "IPIPEnabled",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "",
          "ParsedDefault": "\u003cnil\u003e",
          "ParsedType": "*bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Overrides whether Felix should configure an IPIP interface on the host. Optional as Felix determines this based on the existing IP pools.",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Overlay: IP-in-IP",
          "GroupWithSortPrefix": "32 Overlay: IP-in-IP",
          "NameConfigFile": "IpInIpMtu",
          "NameEnvVar": "FELIX_IpInIpMtu",
          "NameYAML": "ipipMTU",
          "NameGoAPI": "IPIPMTU",
          "StringSchema": "Integer",
          "StringDefault": "0",
          "ParsedDefault": "0",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the MTU to set on the IPIP tunnel device. Optional as Felix auto-detects the MTU based on the MTU of the host's interfaces.",
          "UserEditable": true,
          "GoType": "*int"
        }
      ]
    },
    {
      "Name": "Overlay: Wireguard",
      "Fields": [
        {
          "Group": "Overlay: Wireguard",
          "GroupWithSortPrefix": "33 Overlay: Wireguard",
          "NameConfigFile": "WireguardEnabled",
          "NameEnvVar": "FELIX_WireguardEnabled",
          "NameYAML": "wireguardEnabled",
          "NameGoAPI": "WireguardEnabled",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls whether Wireguard is enabled for IPv4 (encapsulating IPv4 traffic over an IPv4 underlay network).",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Overlay: Wireguard",
          "GroupWithSortPrefix": "33 Overlay: Wireguard",
          "NameConfigFile": "WireguardEnabledV6",
          "NameEnvVar": "FELIX_WireguardEnabledV6",
          "NameYAML": "wireguardEnabledV6",
          "NameGoAPI": "WireguardEnabledV6",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls whether Wireguard is enabled for IPv6 (encapsulating IPv6 traffic over an IPv6 underlay network).",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Overlay: Wireguard",
          "GroupWithSortPrefix": "33 Overlay: Wireguard",
          "NameConfigFile": "WireguardHostEncryptionEnabled",
          "NameEnvVar": "FELIX_WireguardHostEncryptionEnabled",
          "NameYAML": "wireguardHostEncryptionEnabled",
          "NameGoAPI": "WireguardHostEncryptionEnabled",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls whether Wireguard host-to-host encryption is enabled.",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Overlay: Wireguard",
          "GroupWithSortPrefix": "33 Overlay: Wireguard",
          "NameConfigFile": "WireguardInterfaceName",
          "NameEnvVar": "FELIX_WireguardInterfaceName",
          "NameYAML": "wireguardInterfaceName",
          "NameGoAPI": "WireguardInterfaceName",
          "StringSchema": "String matching regex `^[a-zA-Z0-9:._+-]{1,15}$`",
          "StringDefault": "wireguard.cali",
          "ParsedDefault": "wireguard.cali",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Specifies the name to use for the IPv4 Wireguard interface.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Overlay: Wireguard",
          "GroupWithSortPrefix": "33 Overlay: Wireguard",
          "NameConfigFile": "WireguardInterfaceNameV6",
          "NameEnvVar": "FELIX_WireguardInterfaceNameV6",
          "NameYAML": "wireguardInterfaceNameV6",
          "NameGoAPI": "WireguardInterfaceNameV6",
          "StringSchema": "String matching regex `^[a-zA-Z0-9:._+-]{1,15}$`",
          "StringDefault": "wg-v6.cali",
          "ParsedDefault": "wg-v6.cali",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Specifies the name to use for the IPv6 Wireguard interface.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Overlay: Wireguard",
          "GroupWithSortPrefix": "33 Overlay: Wireguard",
          "NameConfigFile": "WireguardListeningPort",
          "NameEnvVar": "FELIX_WireguardListeningPort",
          "NameYAML": "wireguardListeningPort",
          "NameGoAPI": "WireguardListeningPort",
          "StringSchema": "Integer",
          "StringDefault": "51820",
          "ParsedDefault": "51820",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the listening port used by IPv4 Wireguard.",
          "UserEditable": true,
          "GoType": "*int"
        },
        {
          "Group": "Overlay: Wireguard",
          "GroupWithSortPrefix": "33 Overlay: Wireguard",
          "NameConfigFile": "WireguardListeningPortV6",
          "NameEnvVar": "FELIX_WireguardListeningPortV6",
          "NameYAML": "wireguardListeningPortV6",
          "NameGoAPI": "WireguardListeningPortV6",
          "StringSchema": "Integer",
          "StringDefault": "51821",
          "ParsedDefault": "51821",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the listening port used by IPv6 Wireguard.",
          "UserEditable": true,
          "GoType": "*int"
        },
        {
          "Group": "Overlay: Wireguard",
          "GroupWithSortPrefix": "33 Overlay: Wireguard",
          "NameConfigFile": "WireguardMTU",
          "NameEnvVar": "FELIX_WireguardMTU",
          "NameYAML": "wireguardMTU",
          "NameGoAPI": "WireguardMTU",
          "StringSchema": "Integer",
          "StringDefault": "0",
          "ParsedDefault": "0",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the MTU on the IPv4 Wireguard interface. See Configuring MTU.",
          "UserEditable": true,
          "GoType": "*int"
        },
        {
          "Group": "Overlay: Wireguard",
          "GroupWithSortPrefix": "33 Overlay: Wireguard",
          "NameConfigFile": "WireguardMTUV6",
          "NameEnvVar": "FELIX_WireguardMTUV6",
          "NameYAML": "wireguardMTUV6",
          "NameGoAPI": "WireguardMTUV6",
          "StringSchema": "Integer",
          "StringDefault": "0",
          "ParsedDefault": "0",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the MTU on the IPv6 Wireguard interface. See Configuring MTU.",
          "UserEditable": true,
          "GoType": "*int"
        },
        {
          "Group": "Overlay: Wireguard",
          "GroupWithSortPrefix": "33 Overlay: Wireguard",
          "NameConfigFile": "WireguardPersistentKeepAlive",
          "NameEnvVar": "FELIX_WireguardPersistentKeepAlive",
          "NameYAML": "wireguardKeepAlive",
          "NameGoAPI": "WireguardPersistentKeepAlive",
          "StringSchema": "Seconds (floating point)",
          "StringDefault": "0",
          "ParsedDefault": "0s",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `\"1m30s123ms\"` or `\"1h5m\"`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls Wireguard PersistentKeepalive option. Set 0 to disable.",
          "UserEditable": true,
          "GoType": "*v1.Duration"
        },
        {
          "Group": "Overlay: Wireguard",
          "GroupWithSortPrefix": "33 Overlay: Wireguard",
          "NameConfigFile": "WireguardRoutingRulePriority",
          "NameEnvVar": "FELIX_WireguardRoutingRulePriority",
          "NameYAML": "wireguardRoutingRulePriority",
          "NameGoAPI": "WireguardRoutingRulePriority",
          "StringSchema": "Integer",
          "StringDefault": "99",
          "ParsedDefault": "99",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the priority value to use for the Wireguard routing rule.",
          "UserEditable": true,
          "GoType": "*int"
        }
      ]
    },
    {
      "Name": "AWS integration",
      "Fields": [
        {
          "Group": "AWS integration",
          "GroupWithSortPrefix": "60 AWS integration",
          "NameConfigFile": "AWSSrcDstCheck",
          "NameEnvVar": "FELIX_AWSSrcDstCheck",
          "NameYAML": "awsSrcDstCheck",
          "NameGoAPI": "AWSSrcDstCheck",
          "StringSchema": "One of: `\"Disable\"`, `\"DoNothing\"`, `\"Enable\"` (case insensitive)",
          "StringDefault": "DoNothing",
          "ParsedDefault": "DoNothing",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `\"DoNothing\"`, `\"Enable\"`, `\"Disable\"`.",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls whether Felix will try to change the \"source/dest check\" setting on the EC2 instance on which it is running. A value of \"Disable\" will try to disable the source/dest check. Disabling the check allows for sending workload traffic without encapsulation within the same AWS subnet.",
          "UserEditable": true,
          "GoType": "*v3.AWSSrcDstCheckOption"
        }
      ]
    },
    {
      "Name": "Debug/test-only (generally unsupported)",
      "Fields": [
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugBPFCgroupV2",
          "NameEnvVar": "FELIX_DebugBPFCgroupV2",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "String",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "Controls the cgroup v2 path that we apply the connect-time load balancer to. Most distros\nare configured for cgroup v1, which prevents all but the root cgroup v2 from working so this is only useful\nfor development right now.",
          "UserEditable": true,
          "GoType": ""
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugBPFMapRepinEnabled",
          "NameEnvVar": "FELIX_DebugBPFMapRepinEnabled",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedType": "bool",
          "YAMLType": "",
          "YAMLSchema": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "Can be used to prevent Felix from repinning its BPF maps at startup. This is useful for\ntesting with multiple Felix instances running on one host.",
          "UserEditable": true,
          "GoType": ""
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugCPUProfilePath",
          "NameEnvVar": "FELIX_DebugCPUProfilePath",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Path to file",
          "StringDefault": "/tmp/felix-cpu-\u003ctimestamp\u003e.pprof",
          "ParsedDefault": "/tmp/felix-cpu-\u003ctimestamp\u003e.pprof",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Unsupported diagnostic setting, used when testing Felix.  Not exposed in `FelixConfiguration`.",
          "UserEditable": true,
          "GoType": ""
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugDisableLogDropping",
          "NameEnvVar": "FELIX_DebugDisableLogDropping",
          "NameYAML": "debugDisableLogDropping",
          "NameGoAPI": "DebugDisableLogDropping",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Disables the dropping of log messages when the log buffer is full. This can significantly impact performance if log write-out is a bottleneck.",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugHost",
          "NameEnvVar": "FELIX_DebugHost",
          "NameYAML": "debugHost",
          "NameGoAPI": "DebugHost",
          "StringSchema": "String matching regex `^[a-zA-Z0-9:._+-]{1,64}$`",
          "StringDefault": "localhost",
          "ParsedDefault": "localhost",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The host IP or hostname to bind the debug port to. Only used if DebugPort is set.",
          "UserEditable": true,
          "GoType": "*string"
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugMemoryProfilePath",
          "NameEnvVar": "FELIX_DebugMemoryProfilePath",
          "NameYAML": "debugMemoryProfilePath",
          "NameGoAPI": "DebugMemoryProfilePath",
          "StringSchema": "Path to file",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The path to write the memory profile to when triggered by signal.",
          "UserEditable": true,
          "GoType": "string"
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugPanicAfter",
          "NameEnvVar": "FELIX_DebugPanicAfter",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Seconds (floating point)",
          "StringDefault": "0",
          "ParsedDefault": "0s",
          "ParsedType": "time.Duration",
          "YAMLType": "",
          "YAMLSchema": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Unsupported diagnostic setting, used when testing Felix.  Not exposed in `FelixConfiguration`.",
          "UserEditable": true,
          "GoType": ""
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugPort",
          "NameEnvVar": "FELIX_DebugPort",
          "NameYAML": "debugPort",
          "NameGoAPI": "DebugPort",
          "StringSchema": "Integer: [0,65535]",
          "StringDefault": "",
          "ParsedDefault": "0",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "If set, enables Felix's debug HTTP port, which allows memory and CPU profiles to be retrieved. The debug port is not secure, it should not be exposed to the internet.",
          "UserEditable": true,
          "GoType": "*int"
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugSimulateCalcGraphHangAfter",
          "NameEnvVar": "FELIX_DebugSimulateCalcGraphHangAfter",
          "NameYAML": "debugSimulateCalcGraphHangAfter",
          "NameGoAPI": "DebugSimulateCalcGraphHangAfter",
          "StringSchema": "Seconds (floating point)",
          "StringDefault": "0",
          "ParsedDefault": "0s",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `\"1m30s123ms\"` or `\"1h5m\"`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to simulate a hang in the calculation graph after the specified duration. This is useful in tests of the watchdog system only!",
          "UserEditable": true,
          "GoType": "*v1.Duration"
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugSimulateDataRace",
          "NameEnvVar": "FELIX_DebugSimulateDataRace",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedType": "bool",
          "YAMLType": "",
          "YAMLSchema": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Unsupported diagnostic setting, used when testing Felix.  Not exposed in `FelixConfiguration`.",
          "UserEditable": true,
          "GoType": ""
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugSimulateDataplaneApplyDelay",
          "NameEnvVar": "FELIX_DebugSimulateDataplaneApplyDelay",
          "NameYAML": "debugSimulateDataplaneApplyDelay",
          "NameGoAPI": "DebugSimulateDataplaneApplyDelay",
          "StringSchema": "Seconds (floating point)",
          "StringDefault": "0",
          "ParsedDefault": "0s",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `\"1m30s123ms\"` or `\"1h5m\"`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Adds an artificial delay to every dataplane operation. This is useful for simulating a heavily loaded system for test purposes only.",
          "UserEditable": true,
          "GoType": "*v1.Duration"
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugSimulateDataplaneHangAfter",
          "NameEnvVar": "FELIX_DebugSimulateDataplaneHangAfter",
          "NameYAML": "debugSimulateDataplaneHangAfter",
          "NameGoAPI": "DebugSimulateDataplaneHangAfter",
          "StringSchema": "Seconds (floating point)",
          "StringDefault": "0",
          "ParsedDefault": "0s",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `\"1m30s123ms\"` or `\"1h5m\"`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to simulate a hang in the dataplane after the specified duration. This is useful in tests of the watchdog system only!",
          "UserEditable": true,
          "GoType": "*v1.Duration"
        }
      ]
    },
    {
      "Name": "Usage reporting",
      "Fields": [
        {
          "Group": "Usage reporting",
          "GroupWithSortPrefix": "99 Usage reporting",
          "NameConfigFile": "UsageReportingEnabled",
          "NameEnvVar": "FELIX_UsageReportingEnabled",
          "NameYAML": "usageReportingEnabled",
          "NameGoAPI": "UsageReportingEnabled",
          "StringSchema": "Boolean: `\"true\"`, `\"1\"`, `\"yes\"`, `\"y\"`, `\"t\"` accepted as True; `\"false\"`, `\"0\"`, `\"no\"`, `\"n\"`, `\"f\"` accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Reports anonymous Calico version number and cluster size to projectcalico.org. Logs warnings returned by the usage server. For example, if a significant security vulnerability has been discovered in the version of Calico being used.",
          "UserEditable": true,
          "GoType": "*bool"
        },
        {
          "Group": "Usage reporting",
          "GroupWithSortPrefix": "99 Usage reporting",
          "NameConfigFile": "UsageReportingInitialDelaySecs",
          "NameEnvVar": "FELIX_UsageReportingInitialDelaySecs",
          "NameYAML": "usageReportingInitialDelay",
          "NameGoAPI": "UsageReportingInitialDelay",
          "StringSchema": "Seconds (floating point)",
          "StringDefault": "300",
          "ParsedDefault": "5m0s",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `\"1m30s123ms\"` or `\"1h5m\"`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the minimum delay before Felix makes a report.",
          "UserEditable": true,
          "GoType": "*v1.Duration"
        },
        {
          "Group": "Usage reporting",
          "GroupWithSortPrefix": "99 Usage reporting",
          "NameConfigFile": "UsageReportingIntervalSecs",
          "NameEnvVar": "FELIX_UsageReportingIntervalSecs",
          "NameYAML": "usageReportingInterval",
          "NameGoAPI": "UsageReportingInterval",
          "StringSchema": "Seconds (floating point)",
          "StringDefault": "86400",
          "ParsedDefault": "24h0m0s",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `\"1m30s123ms\"` or `\"1h5m\"`.",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the interval at which Felix makes reports.",
          "UserEditable": true,
          "GoType": "*v1.Duration"
        }
      ]
    }
  ]
}
