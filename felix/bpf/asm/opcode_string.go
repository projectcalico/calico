// Code generated by "stringer -type=OpCode,Reg"; DO NOT EDIT.

package asm

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[StoreReg8-115]
	_ = x[StoreReg16-107]
	_ = x[StoreReg32-99]
	_ = x[StoreReg64-123]
	_ = x[StoreImm8-18]
	_ = x[StoreImm16-10]
	_ = x[StoreImm32-2]
	_ = x[StoreImm64-26]
	_ = x[LoadReg8-113]
	_ = x[LoadReg16-105]
	_ = x[LoadReg32-97]
	_ = x[LoadReg64-121]
	_ = x[LoadImm32-0]
	_ = x[LoadImm64-24]
	_ = x[LoadImm64Pt2-0]
	_ = x[JumpEq64-29]
	_ = x[JumpGT64-45]
	_ = x[JumpGE64-61]
	_ = x[JumpSet64-77]
	_ = x[JumpNE64-93]
	_ = x[JumpSGT64-109]
	_ = x[JumpSGE64-125]
	_ = x[JumpLT64-173]
	_ = x[JumpLE64-189]
	_ = x[JumpSLT64-205]
	_ = x[JumpSLE64-221]
	_ = x[JumpEqImm64-21]
	_ = x[JumpGTImm64-37]
	_ = x[JumpGEImm64-53]
	_ = x[JumpSetImm64-69]
	_ = x[JumpNEImm64-85]
	_ = x[JumpSGTImm64-101]
	_ = x[JumpSGEImm64-117]
	_ = x[JumpLTImm64-165]
	_ = x[JumpLEImm64-181]
	_ = x[JumpSLTImm64-197]
	_ = x[JumpSLEImm64-213]
	_ = x[JumpA-5]
	_ = x[Call-133]
	_ = x[Exit-149]
	_ = x[JumpEq32-30]
	_ = x[JumpGT32-46]
	_ = x[JumpGE32-62]
	_ = x[JumpSet32-78]
	_ = x[JumpNE32-94]
	_ = x[JumpSGT32-110]
	_ = x[JumpSGE32-126]
	_ = x[JumpLT32-174]
	_ = x[JumpLE32-190]
	_ = x[JumpSLT32-206]
	_ = x[JumpSLE32-222]
	_ = x[JumpEqImm32-22]
	_ = x[JumpGTImm32-38]
	_ = x[JumpGEImm32-54]
	_ = x[JumpSetImm32-70]
	_ = x[JumpNEImm32-86]
	_ = x[JumpSGTImm32-102]
	_ = x[JumpSGEImm32-118]
	_ = x[JumpLTImm32-166]
	_ = x[JumpLEImm32-182]
	_ = x[JumpSLTImm32-198]
	_ = x[JumpSLEImm32-214]
	_ = x[Add64-15]
	_ = x[Sub64-31]
	_ = x[Mul64-47]
	_ = x[Div64-63]
	_ = x[Or64-79]
	_ = x[And64-95]
	_ = x[ShiftL64-111]
	_ = x[ShiftR64-127]
	_ = x[Negate64-143]
	_ = x[Mod64-159]
	_ = x[XOR64-175]
	_ = x[Mov64-191]
	_ = x[AShiftR64-207]
	_ = x[Endian64-223]
	_ = x[Add32-12]
	_ = x[Sub32-28]
	_ = x[Mul32-44]
	_ = x[Div32-60]
	_ = x[Or32-76]
	_ = x[And32-92]
	_ = x[ShiftL32-108]
	_ = x[ShiftR32-124]
	_ = x[Negate32-140]
	_ = x[Mod32-156]
	_ = x[XOR32-172]
	_ = x[Mov32-188]
	_ = x[AShiftR32-204]
	_ = x[Endian32-220]
	_ = x[AddImm64-7]
	_ = x[SubImm64-23]
	_ = x[MulImm64-39]
	_ = x[DivImm64-55]
	_ = x[OrImm64-71]
	_ = x[AndImm64-87]
	_ = x[ShiftLImm64-103]
	_ = x[ShiftRImm64-119]
	_ = x[ModImm64-151]
	_ = x[XORImm64-167]
	_ = x[MovImm64-183]
	_ = x[AShiftRImm64-199]
	_ = x[EndianImm64-215]
	_ = x[AddImm32-4]
	_ = x[SubImm32-20]
	_ = x[MulImm32-36]
	_ = x[DivImm32-52]
	_ = x[OrImm32-68]
	_ = x[AndImm32-84]
	_ = x[ShiftLImm32-100]
	_ = x[ShiftRImm32-116]
	_ = x[ModImm32-148]
	_ = x[XORImm32-164]
	_ = x[MovImm32-180]
	_ = x[AShiftRImm32-196]
	_ = x[EndianImm32-212]
}

const _OpCode_name = "LoadImm32StoreImm32AddImm32JumpAAddImm64StoreImm16Add32Add64StoreImm8SubImm32JumpEqImm64JumpEqImm32SubImm64LoadImm64StoreImm64Sub32JumpEq64JumpEq32Sub64MulImm32JumpGTImm64JumpGTImm32MulImm64Mul32JumpGT64JumpGT32Mul64DivImm32JumpGEImm64JumpGEImm32DivImm64Div32JumpGE64JumpGE32Div64OrImm32JumpSetImm64JumpSetImm32OrImm64Or32JumpSet64JumpSet32Or64AndImm32JumpNEImm64JumpNEImm32AndImm64And32JumpNE64JumpNE32And64LoadReg32StoreReg32ShiftLImm32JumpSGTImm64JumpSGTImm32ShiftLImm64LoadReg16StoreReg16ShiftL32JumpSGT64JumpSGT32ShiftL64LoadReg8StoreReg8ShiftRImm32JumpSGEImm64JumpSGEImm32ShiftRImm64LoadReg64StoreReg64ShiftR32JumpSGE64JumpSGE32ShiftR64CallNegate32Negate64ModImm32ExitModImm64Mod32Mod64XORImm32JumpLTImm64JumpLTImm32XORImm64XOR32JumpLT64JumpLT32XOR64MovImm32JumpLEImm64JumpLEImm32MovImm64Mov32JumpLE64JumpLE32Mov64AShiftRImm32JumpSLTImm64JumpSLTImm32AShiftRImm64AShiftR32JumpSLT64JumpSLT32AShiftR64EndianImm32JumpSLEImm64JumpSLEImm32EndianImm64Endian32JumpSLE64JumpSLE32Endian64"

var _OpCode_map = map[OpCode]string{
	0:   _OpCode_name[0:9],
	2:   _OpCode_name[9:19],
	4:   _OpCode_name[19:27],
	5:   _OpCode_name[27:32],
	7:   _OpCode_name[32:40],
	10:  _OpCode_name[40:50],
	12:  _OpCode_name[50:55],
	15:  _OpCode_name[55:60],
	18:  _OpCode_name[60:69],
	20:  _OpCode_name[69:77],
	21:  _OpCode_name[77:88],
	22:  _OpCode_name[88:99],
	23:  _OpCode_name[99:107],
	24:  _OpCode_name[107:116],
	26:  _OpCode_name[116:126],
	28:  _OpCode_name[126:131],
	29:  _OpCode_name[131:139],
	30:  _OpCode_name[139:147],
	31:  _OpCode_name[147:152],
	36:  _OpCode_name[152:160],
	37:  _OpCode_name[160:171],
	38:  _OpCode_name[171:182],
	39:  _OpCode_name[182:190],
	44:  _OpCode_name[190:195],
	45:  _OpCode_name[195:203],
	46:  _OpCode_name[203:211],
	47:  _OpCode_name[211:216],
	52:  _OpCode_name[216:224],
	53:  _OpCode_name[224:235],
	54:  _OpCode_name[235:246],
	55:  _OpCode_name[246:254],
	60:  _OpCode_name[254:259],
	61:  _OpCode_name[259:267],
	62:  _OpCode_name[267:275],
	63:  _OpCode_name[275:280],
	68:  _OpCode_name[280:287],
	69:  _OpCode_name[287:299],
	70:  _OpCode_name[299:311],
	71:  _OpCode_name[311:318],
	76:  _OpCode_name[318:322],
	77:  _OpCode_name[322:331],
	78:  _OpCode_name[331:340],
	79:  _OpCode_name[340:344],
	84:  _OpCode_name[344:352],
	85:  _OpCode_name[352:363],
	86:  _OpCode_name[363:374],
	87:  _OpCode_name[374:382],
	92:  _OpCode_name[382:387],
	93:  _OpCode_name[387:395],
	94:  _OpCode_name[395:403],
	95:  _OpCode_name[403:408],
	97:  _OpCode_name[408:417],
	99:  _OpCode_name[417:427],
	100: _OpCode_name[427:438],
	101: _OpCode_name[438:450],
	102: _OpCode_name[450:462],
	103: _OpCode_name[462:473],
	105: _OpCode_name[473:482],
	107: _OpCode_name[482:492],
	108: _OpCode_name[492:500],
	109: _OpCode_name[500:509],
	110: _OpCode_name[509:518],
	111: _OpCode_name[518:526],
	113: _OpCode_name[526:534],
	115: _OpCode_name[534:543],
	116: _OpCode_name[543:554],
	117: _OpCode_name[554:566],
	118: _OpCode_name[566:578],
	119: _OpCode_name[578:589],
	121: _OpCode_name[589:598],
	123: _OpCode_name[598:608],
	124: _OpCode_name[608:616],
	125: _OpCode_name[616:625],
	126: _OpCode_name[625:634],
	127: _OpCode_name[634:642],
	133: _OpCode_name[642:646],
	140: _OpCode_name[646:654],
	143: _OpCode_name[654:662],
	148: _OpCode_name[662:670],
	149: _OpCode_name[670:674],
	151: _OpCode_name[674:682],
	156: _OpCode_name[682:687],
	159: _OpCode_name[687:692],
	164: _OpCode_name[692:700],
	165: _OpCode_name[700:711],
	166: _OpCode_name[711:722],
	167: _OpCode_name[722:730],
	172: _OpCode_name[730:735],
	173: _OpCode_name[735:743],
	174: _OpCode_name[743:751],
	175: _OpCode_name[751:756],
	180: _OpCode_name[756:764],
	181: _OpCode_name[764:775],
	182: _OpCode_name[775:786],
	183: _OpCode_name[786:794],
	188: _OpCode_name[794:799],
	189: _OpCode_name[799:807],
	190: _OpCode_name[807:815],
	191: _OpCode_name[815:820],
	196: _OpCode_name[820:832],
	197: _OpCode_name[832:844],
	198: _OpCode_name[844:856],
	199: _OpCode_name[856:868],
	204: _OpCode_name[868:877],
	205: _OpCode_name[877:886],
	206: _OpCode_name[886:895],
	207: _OpCode_name[895:904],
	212: _OpCode_name[904:915],
	213: _OpCode_name[915:927],
	214: _OpCode_name[927:939],
	215: _OpCode_name[939:950],
	220: _OpCode_name[950:958],
	221: _OpCode_name[958:967],
	222: _OpCode_name[967:976],
	223: _OpCode_name[976:984],
}

func (i OpCode) String() string {
	if str, ok := _OpCode_map[i]; ok {
		return str
	}
	return "OpCode(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[R0-0]
	_ = x[R1-1]
	_ = x[R2-2]
	_ = x[R3-3]
	_ = x[R4-4]
	_ = x[R5-5]
	_ = x[R6-6]
	_ = x[R7-7]
	_ = x[R8-8]
	_ = x[R9-9]
	_ = x[R10-10]
}

const _Reg_name = "R0R1R2R3R4R5R6R7R8R9R10"

var _Reg_index = [...]uint8{0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 23}

func (i Reg) String() string {
	if i < 0 || i >= Reg(len(_Reg_index)-1) {
		return "Reg(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Reg_name[_Reg_index[i]:_Reg_index[i+1]]
}
