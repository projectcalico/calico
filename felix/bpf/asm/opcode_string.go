// Code generated by "stringer -type=OpCode,Reg"; DO NOT EDIT.

package asm

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[StoreReg8-115]
	_ = x[StoreReg16-107]
	_ = x[StoreReg32-99]
	_ = x[StoreReg64-123]
	_ = x[StoreImm8-18]
	_ = x[StoreImm16-10]
	_ = x[StoreImm32-2]
	_ = x[StoreImm64-26]
	_ = x[LoadReg8-113]
	_ = x[LoadReg16-105]
	_ = x[LoadReg32-97]
	_ = x[LoadReg64-121]
	_ = x[LoadImm64-24]
	_ = x[LoadImm64Pt2-0]
	_ = x[JumpEq64-29]
	_ = x[JumpGT64-45]
	_ = x[JumpGE64-61]
	_ = x[JumpSet64-77]
	_ = x[JumpNE64-93]
	_ = x[JumpSGT64-109]
	_ = x[JumpSGE64-125]
	_ = x[JumpLT64-173]
	_ = x[JumpLE64-189]
	_ = x[JumpSLT64-205]
	_ = x[JumpSLE64-221]
	_ = x[JumpEqImm64-21]
	_ = x[JumpGTImm64-37]
	_ = x[JumpGEImm64-53]
	_ = x[JumpSetImm64-69]
	_ = x[JumpNEImm64-85]
	_ = x[JumpSGTImm64-101]
	_ = x[JumpSGEImm64-117]
	_ = x[JumpLTImm64-165]
	_ = x[JumpLEImm64-181]
	_ = x[JumpSLTImm64-197]
	_ = x[JumpSLEImm64-213]
	_ = x[JumpA-5]
	_ = x[Call-133]
	_ = x[Exit-149]
	_ = x[JumpEq32-30]
	_ = x[JumpGT32-46]
	_ = x[JumpGE32-62]
	_ = x[JumpSet32-78]
	_ = x[JumpNE32-94]
	_ = x[JumpSGT32-110]
	_ = x[JumpSGE32-126]
	_ = x[JumpLT32-174]
	_ = x[JumpLE32-190]
	_ = x[JumpSLT32-206]
	_ = x[JumpSLE32-222]
	_ = x[JumpEqImm32-22]
	_ = x[JumpGTImm32-38]
	_ = x[JumpGEImm32-54]
	_ = x[JumpSetImm32-70]
	_ = x[JumpNEImm32-86]
	_ = x[JumpSGTImm32-102]
	_ = x[JumpSGEImm32-118]
	_ = x[JumpLTImm32-166]
	_ = x[JumpLEImm32-182]
	_ = x[JumpSLTImm32-198]
	_ = x[JumpSLEImm32-214]
	_ = x[Add64-15]
	_ = x[Sub64-31]
	_ = x[Mul64-47]
	_ = x[Div64-63]
	_ = x[Or64-79]
	_ = x[And64-95]
	_ = x[ShiftL64-111]
	_ = x[ShiftR64-127]
	_ = x[Negate64-143]
	_ = x[Mod64-159]
	_ = x[XOR64-175]
	_ = x[Mov64-191]
	_ = x[AShiftR64-207]
	_ = x[Endian64-223]
	_ = x[Add32-12]
	_ = x[Sub32-28]
	_ = x[Mul32-44]
	_ = x[Div32-60]
	_ = x[Or32-76]
	_ = x[And32-92]
	_ = x[ShiftL32-108]
	_ = x[ShiftR32-124]
	_ = x[Negate32-140]
	_ = x[Mod32-156]
	_ = x[XOR32-172]
	_ = x[Mov32-188]
	_ = x[AShiftR32-204]
	_ = x[Endian32-220]
	_ = x[AddImm64-7]
	_ = x[SubImm64-23]
	_ = x[MulImm64-39]
	_ = x[DivImm64-55]
	_ = x[OrImm64-71]
	_ = x[AndImm64-87]
	_ = x[ShiftLImm64-103]
	_ = x[ShiftRImm64-119]
	_ = x[ModImm64-151]
	_ = x[XORImm64-167]
	_ = x[MovImm64-183]
	_ = x[AShiftRImm64-199]
	_ = x[EndianImm64-215]
	_ = x[AddImm32-4]
	_ = x[SubImm32-20]
	_ = x[MulImm32-36]
	_ = x[DivImm32-52]
	_ = x[OrImm32-68]
	_ = x[AndImm32-84]
	_ = x[ShiftLImm32-100]
	_ = x[ShiftRImm32-116]
	_ = x[ModImm32-148]
	_ = x[XORImm32-164]
	_ = x[MovImm32-180]
	_ = x[AShiftRImm32-196]
	_ = x[EndianImm32-212]
}

const _OpCode_name = "LoadImm64Pt2StoreImm32AddImm32JumpAAddImm64StoreImm16Add32Add64StoreImm8SubImm32JumpEqImm64JumpEqImm32SubImm64LoadImm64StoreImm64Sub32JumpEq64JumpEq32Sub64MulImm32JumpGTImm64JumpGTImm32MulImm64Mul32JumpGT64JumpGT32Mul64DivImm32JumpGEImm64JumpGEImm32DivImm64Div32JumpGE64JumpGE32Div64OrImm32JumpSetImm64JumpSetImm32OrImm64Or32JumpSet64JumpSet32Or64AndImm32JumpNEImm64JumpNEImm32AndImm64And32JumpNE64JumpNE32And64LoadReg32StoreReg32ShiftLImm32JumpSGTImm64JumpSGTImm32ShiftLImm64LoadReg16StoreReg16ShiftL32JumpSGT64JumpSGT32ShiftL64LoadReg8StoreReg8ShiftRImm32JumpSGEImm64JumpSGEImm32ShiftRImm64LoadReg64StoreReg64ShiftR32JumpSGE64JumpSGE32ShiftR64CallNegate32Negate64ModImm32ExitModImm64Mod32Mod64XORImm32JumpLTImm64JumpLTImm32XORImm64XOR32JumpLT64JumpLT32XOR64MovImm32JumpLEImm64JumpLEImm32MovImm64Mov32JumpLE64JumpLE32Mov64AShiftRImm32JumpSLTImm64JumpSLTImm32AShiftRImm64AShiftR32JumpSLT64JumpSLT32AShiftR64EndianImm32JumpSLEImm64JumpSLEImm32EndianImm64Endian32JumpSLE64JumpSLE32Endian64"

var _OpCode_map = map[OpCode]string{
	0:   _OpCode_name[0:12],
	2:   _OpCode_name[12:22],
	4:   _OpCode_name[22:30],
	5:   _OpCode_name[30:35],
	7:   _OpCode_name[35:43],
	10:  _OpCode_name[43:53],
	12:  _OpCode_name[53:58],
	15:  _OpCode_name[58:63],
	18:  _OpCode_name[63:72],
	20:  _OpCode_name[72:80],
	21:  _OpCode_name[80:91],
	22:  _OpCode_name[91:102],
	23:  _OpCode_name[102:110],
	24:  _OpCode_name[110:119],
	26:  _OpCode_name[119:129],
	28:  _OpCode_name[129:134],
	29:  _OpCode_name[134:142],
	30:  _OpCode_name[142:150],
	31:  _OpCode_name[150:155],
	36:  _OpCode_name[155:163],
	37:  _OpCode_name[163:174],
	38:  _OpCode_name[174:185],
	39:  _OpCode_name[185:193],
	44:  _OpCode_name[193:198],
	45:  _OpCode_name[198:206],
	46:  _OpCode_name[206:214],
	47:  _OpCode_name[214:219],
	52:  _OpCode_name[219:227],
	53:  _OpCode_name[227:238],
	54:  _OpCode_name[238:249],
	55:  _OpCode_name[249:257],
	60:  _OpCode_name[257:262],
	61:  _OpCode_name[262:270],
	62:  _OpCode_name[270:278],
	63:  _OpCode_name[278:283],
	68:  _OpCode_name[283:290],
	69:  _OpCode_name[290:302],
	70:  _OpCode_name[302:314],
	71:  _OpCode_name[314:321],
	76:  _OpCode_name[321:325],
	77:  _OpCode_name[325:334],
	78:  _OpCode_name[334:343],
	79:  _OpCode_name[343:347],
	84:  _OpCode_name[347:355],
	85:  _OpCode_name[355:366],
	86:  _OpCode_name[366:377],
	87:  _OpCode_name[377:385],
	92:  _OpCode_name[385:390],
	93:  _OpCode_name[390:398],
	94:  _OpCode_name[398:406],
	95:  _OpCode_name[406:411],
	97:  _OpCode_name[411:420],
	99:  _OpCode_name[420:430],
	100: _OpCode_name[430:441],
	101: _OpCode_name[441:453],
	102: _OpCode_name[453:465],
	103: _OpCode_name[465:476],
	105: _OpCode_name[476:485],
	107: _OpCode_name[485:495],
	108: _OpCode_name[495:503],
	109: _OpCode_name[503:512],
	110: _OpCode_name[512:521],
	111: _OpCode_name[521:529],
	113: _OpCode_name[529:537],
	115: _OpCode_name[537:546],
	116: _OpCode_name[546:557],
	117: _OpCode_name[557:569],
	118: _OpCode_name[569:581],
	119: _OpCode_name[581:592],
	121: _OpCode_name[592:601],
	123: _OpCode_name[601:611],
	124: _OpCode_name[611:619],
	125: _OpCode_name[619:628],
	126: _OpCode_name[628:637],
	127: _OpCode_name[637:645],
	133: _OpCode_name[645:649],
	140: _OpCode_name[649:657],
	143: _OpCode_name[657:665],
	148: _OpCode_name[665:673],
	149: _OpCode_name[673:677],
	151: _OpCode_name[677:685],
	156: _OpCode_name[685:690],
	159: _OpCode_name[690:695],
	164: _OpCode_name[695:703],
	165: _OpCode_name[703:714],
	166: _OpCode_name[714:725],
	167: _OpCode_name[725:733],
	172: _OpCode_name[733:738],
	173: _OpCode_name[738:746],
	174: _OpCode_name[746:754],
	175: _OpCode_name[754:759],
	180: _OpCode_name[759:767],
	181: _OpCode_name[767:778],
	182: _OpCode_name[778:789],
	183: _OpCode_name[789:797],
	188: _OpCode_name[797:802],
	189: _OpCode_name[802:810],
	190: _OpCode_name[810:818],
	191: _OpCode_name[818:823],
	196: _OpCode_name[823:835],
	197: _OpCode_name[835:847],
	198: _OpCode_name[847:859],
	199: _OpCode_name[859:871],
	204: _OpCode_name[871:880],
	205: _OpCode_name[880:889],
	206: _OpCode_name[889:898],
	207: _OpCode_name[898:907],
	212: _OpCode_name[907:918],
	213: _OpCode_name[918:930],
	214: _OpCode_name[930:942],
	215: _OpCode_name[942:953],
	220: _OpCode_name[953:961],
	221: _OpCode_name[961:970],
	222: _OpCode_name[970:979],
	223: _OpCode_name[979:987],
}

func (i OpCode) String() string {
	if str, ok := _OpCode_map[i]; ok {
		return str
	}
	return "OpCode(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[R0-0]
	_ = x[R1-1]
	_ = x[R2-2]
	_ = x[R3-3]
	_ = x[R4-4]
	_ = x[R5-5]
	_ = x[R6-6]
	_ = x[R7-7]
	_ = x[R8-8]
	_ = x[R9-9]
	_ = x[R10-10]
}

const _Reg_name = "R0R1R2R3R4R5R6R7R8R9R10"

var _Reg_index = [...]uint8{0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 23}

func (i Reg) String() string {
	if i < 0 || i >= Reg(len(_Reg_index)-1) {
		return "Reg(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Reg_name[_Reg_index[i]:_Reg_index[i+1]]
}
