{{- $config := getBGPConfig . -}}

function apply_communities ()
{
{{- range $config.Communities}}
      if ( net ~ {{.CIDR}} ) then {
    {{- range .AddStatements}}
          {{.}}
    {{- end}}
      }
{{- end}}
}

# Generated by confd
include "bird_aggr.cfg";
include "bird_ipam.cfg";

router id {{$config.RouterID}};

{{- if or $config.ListenAddress $config.ListenPort}}
# BGP listen configuration
listen bgp{{if $config.ListenAddress}} address {{$config.ListenAddress}}{{end}}{{if $config.ListenPort}} port {{$config.ListenPort}}{{end}};
{{- end}}

{{- define "LOGGING"}}
{{- if .DebugMode}}
  debug {{.DebugMode}};
{{- end}}
{{- end}}

# Configure synchronization between routing tables and kernel.
protocol kernel {
  learn;             # Learn all alien routes from the kernel
  persist;           # Don't remove routes on bird shutdown
  scan time 2;       # Scan kernel routing table every 2 seconds
  import all;
  export filter calico_kernel_programming; # Default is export none
  graceful restart;  # Turn on graceful restart to reduce potential flaps in
                     # routes when reloading BIRD configuration.  With a full
                     # automatic mesh, there is no way to prevent BGP from
                     # flapping since multiple nodes update their BGP
                     # configuration at the same time, GR is not guaranteed to
                     # work correctly in this scenario.
  merge paths on;    # Allow export multipath routes (ECMP)
}

# Watch interface up/down events.
protocol device {
{{- template "LOGGING" $config}}
  scan time 2;    # Scan interfaces every 2 seconds
}

protocol direct {
{{- template "LOGGING" $config}}
  interface {{$config.DirectInterfaces}}; # Exclude cali* and kube-ipvs* but
                                          # include everything else.  In
                                          # IPVS-mode, kube-proxy creates a
                                          # kube-ipvs0 interface. We exclude
                                          # kube-ipvs0 because this interface
                                          # gets an address for every in use
                                          # cluster IP. We use static routes
                                          # for when we legitimately want to
                                          # export cluster IPs.
}

{{if eq "" $config.NodeIP}}# IPv4 disabled on this node.
{{else}}
# Template for all BGP clients
template bgp bgp_template {
{{- template "LOGGING" $config}}
  description "Connection to BGP peer";
  local as {{$config.AsNumber}};
  gateway recursive; # This should be the default, but just in case.
  add paths on;
  graceful restart;  # See comment in kernel section about graceful restart.
  connect delay time 2;
  connect retry time 5;
  error wait time 5,30;
}

# -------------- BGP Filters ------------------
{{- range $line := bgpFilterBIRDFuncs (gets "/resources/v3/projectcalico.org/bgpfilters/*") 4 }}
{{ $line }}
{{- end }}

{{- if $config.Peers}}
# BGP Protocol Configurations
{{- range $config.Peers}}
{{- if .Comment}}
# {{.Comment}}
{{- end}}
protocol bgp {{.Name}} from bgp_template {
{{- if eq .TTLSecurity "off"}}
  ttl security off;
  multihop;
{{- else if .TTLSecurity}}
  ttl security {{.TTLSecurity}};
{{- end}}
{{- if .LocalAsNumber}}
  local as {{.LocalAsNumber}};
{{- end}}
  neighbor {{.IP}}{{if .Port}} port {{.Port}}{{end}} as {{.AsNumber}};
{{- if .SourceAddr}}
  source address {{.SourceAddr}};  # The local address we use for the TCP connection
{{- end}}
{{- if .ImportFilter}}
  import filter {
    {{.ImportFilter}}
  };
{{- else}}
  import all;        # Import all routes, since we don't know what the upstream
                     # topology is and therefore have to trust the ToR/RR.
{{- end}}
{{- if .ExportFilter}}
  export filter {
    {{.ExportFilter}}
  };  # Only want to export routes for workloads.
{{- else}}
  export all;
{{- end}}
{{- if .Passive}}
  passive on;{{if eq .Type "mesh"}} # Mesh is unidirectional, peer will connect to us.{{end}}
{{- end}}
{{- if .GracefulRestart}}
  graceful restart time {{.GracefulRestart}};
{{- end}}
{{- if .KeepaliveTime}}
  keepalive time {{.KeepaliveTime}};
{{- end}}
{{- if and .RouteReflector .RRClusterID}}
  rr client;
  rr cluster id {{.RRClusterID}};
{{- end}}
{{- if .Password}}
  password "{{.Password}}";
{{- end}}
{{- if .NextHopKeep}}
  next hop keep;
{{- end}}
{{- if .NextHopSelf}}
  next hop self;
{{- end}}
{{- if .NumAllowLocalAs}}
  allow local as {{.NumAllowLocalAs}};
{{- end}}
}

{{- end}}
{{- else}}
# No BGP peers configured for this node
{{- end}}

{{end}}{{/* End of IPv4 enable check */}}
