function apply_communities ()
{
}

# Generated by confd
include "bird6_aggr.cfg";
include "bird6_ipam.cfg";

router id 10.192.0.2;  # Use IPv4 address since router id is 4 octets, even in MP-BGP

# Configure synchronization between routing tables and kernel.
protocol kernel {
  learn;             # Learn all alien routes from the kernel
  persist;           # Don't remove routes on bird shutdown
  scan time 2;       # Scan kernel routing table every 2 seconds
  import all;
  export filter calico_kernel_programming; # Default is export none
  graceful restart;  # Turn on graceful restart to reduce potential flaps in
                     # routes when reloading BIRD configuration.  With a full
                     # automatic mesh, there is no way to prevent BGP from
                     # flapping since multiple nodes update their BGP
                     # configuration at the same time, GR is not guaranteed to
                     # work correctly in this scenario.
  merge paths on;    # Allow export multipath routes (ECMP)
}

# Watch interface up/down events.
protocol device {
  debug { states };
  scan time 2;    # Scan interfaces every 2 seconds
}

protocol direct {
  debug { states };
  interface -"iface-1", -"iface-2", -"cali*", -"kube-ipvs*", "*";
}


# Template for all BGP clients
template bgp bgp_template {
  debug { states };
  description "Connection to BGP peer";
  local as 64512;
  gateway recursive; # This should be the default, but just in case.
  add paths on;
  graceful restart;  # See comment in kernel section about graceful restart.
  connect delay time 2;
  connect retry time 5;
  error wait time 5,30;
}

# -------------- BGP Filters ------------------
# No v6 BGPFilters configured

# ------------- Node-to-node mesh -------------





# For peer /bgp/v1/host/kube-master/ip_addr_v6
# Skipping ourselves (2001::103)



# For peer /bgp/v1/host/kube-node-1/ip_addr_v6
protocol bgp Mesh_2001__102 from bgp_template {
  neighbor 2001::102 as 64512;
  source address 2001::103;  # The local address we use for the TCP connection
  import all;        # Import all routes, since we don't know what the upstream
                       # topology is and therefore have to trust the ToR/RR.
  export filter {
    calico_export_to_bgp_peers();
    reject;
  };  # Only want to export routes for workloads.
}



# For peer /bgp/v1/host/kube-node-2/ip_addr_v6
protocol bgp Mesh_2001__104 from bgp_template {
  neighbor 2001::104 as 64512;
  source address 2001::103;  # The local address we use for the TCP connection
  import all;        # Import all routes, since we don't know what the upstream
                       # topology is and therefore have to trust the ToR/RR.
  export filter {
    calico_export_to_bgp_peers();
    reject;
  };  # Only want to export routes for workloads.
  passive on; # Mesh is unidirectional, peer will connect to us.
}



# ------------- Global peers -------------
# No global peers configured.


# ------------- Node-specific peers -------------

# No node-specific peers configured.

