function apply_communities ()
{
}

# Generated by confd
include "bird_aggr.cfg";
include "bird_ipam.cfg";

router id 10.192.0.2;

# Configure synchronization between routing tables and kernel.
protocol kernel {
  learn;             # Learn all alien routes from the kernel
  persist;           # Don't remove routes on bird shutdown
  scan time 2;       # Scan kernel routing table every 2 seconds
  import all;
  export filter calico_kernel_programming; # Default is export none
  graceful restart;  # Turn on graceful restart to reduce potential flaps in
                     # routes when reloading BIRD configuration.  With a full
                     # automatic mesh, there is no way to prevent BGP from
                     # flapping since multiple nodes update their BGP
                     # configuration at the same time, GR is not guaranteed to
                     # work correctly in this scenario.
  merge paths on;    # Allow export multipath routes (ECMP)
}

# Watch interface up/down events.
protocol device {
  debug { states };
  scan time 2;    # Scan interfaces every 2 seconds
}

protocol direct {
  debug { states };
  interface -"cali*", -"kube-ipvs*", "*"; # Exclude cali* and kube-ipvs* but
                                          # include everything else.  In
                                          # IPVS-mode, kube-proxy creates a
                                          # kube-ipvs0 interface. We exclude
                                          # kube-ipvs0 because this interface
                                          # gets an address for every in use
                                          # cluster IP. We use static routes
                                          # for when we legitimately want to
                                          # export cluster IPs.
}


# Template for all BGP clients
template bgp bgp_template {
  debug { states };
  description "Connection to BGP peer";
  local as 64512;
  gateway recursive; # This should be the default, but just in case.
  add paths on;
  graceful restart;  # See comment in kernel section about graceful restart.
  connect delay time 2;
  connect retry time 5;
  error wait time 5,30;
}

# -------------- BGP Filters ------------------
# v4 BGPFilter 45characters.exactly.so.should.not.truncate-1
function 'bgp_45characters.exactly.so.should.not.truncate-1_importFilterV4'() {
  if ( net ~ 44.0.0.0/16 ) then { accept; }
  if ( net ~ 44.1.0.0/16 ) then { reject; }
}
function 'bgp_45characters.exactly.so.should.not.truncate-1_exportFilterV4'() {
  if ( net ~ 77.0.0.0/16 ) then { accept; }
  if ( net ~ 77.1.0.0/16 ) then { reject; }
}
# v4 BGPFilter 46characters.exactly.so.should.truncate-123456
function 'bgp_46characters.exactly.so.shou_9615CBDC00BAC628_importFilterV4'() {
  if ( net ~ 44.2.0.0/16 ) then { accept; }
  if ( net ~ 44.3.0.0/16 ) then { reject; }
}
function 'bgp_46characters.exactly.so.shou_9615CBDC00BAC628_exportFilterV4'() {
  if ( net ~ 77.2.0.0/16 ) then { accept; }
  if ( net ~ 77.3.0.0/16 ) then { reject; }
}
# v4 BGPFilter greater-than-64-characters.so.this.should.definitely.truncate-1234567890
function 'bgp_greater-than-64-characters.s_4C5DB3273E544641_importFilterV4'() {
  if ( net ~ 44.4.0.0/16 ) then { accept; }
  if ( net ~ 44.5.0.0/16 ) then { reject; }
}
function 'bgp_greater-than-64-characters.s_4C5DB3273E544641_exportFilterV4'() {
  if ( net ~ 77.4.0.0/16 ) then { accept; }
  if ( net ~ 77.5.0.0/16 ) then { reject; }
}

# ------------- Node-to-node mesh -------------

# Node-to-node mesh disabled



# ------------- Global peers -------------



# For peer /bgp/v1/global/peer_v4/10.192.0.2
# Skipping ourselves (10.192.0.2)


# For peer /bgp/v1/global/peer_v4/10.192.0.3
protocol bgp Global_10_192_0_3 from bgp_template {
  ttl security off;
  multihop;
  neighbor 10.192.0.3 as 64512;
  source address 10.192.0.2;  # The local address we use for the TCP connection
  import filter {
    'bgp_45characters.exactly.so.should.not.truncate-1_importFilterV4'();
    'bgp_46characters.exactly.so.shou_9615CBDC00BAC628_importFilterV4'();
    'bgp_greater-than-64-characters.s_4C5DB3273E544641_importFilterV4'();
    accept; # Prior to introduction of BGP Filters we used "import all" so use default accept behaviour on import
  };
  export filter {
    'bgp_45characters.exactly.so.should.not.truncate-1_exportFilterV4'();
    'bgp_46characters.exactly.so.shou_9615CBDC00BAC628_exportFilterV4'();
    'bgp_greater-than-64-characters.s_4C5DB3273E544641_exportFilterV4'();
    calico_export_to_bgp_peers();
    reject; # Prior to introduction of BGP Filters anything not explicitly exported through calico_export_to_bgp_peers()
            # was rejected so use default reject behaviour on export
  };  # Only want to export routes for workloads.
}


# For peer /bgp/v1/global/peer_v4/10.192.0.4
protocol bgp Global_10_192_0_4 from bgp_template {
  ttl security off;
  multihop;
  neighbor 10.192.0.4 as 64512;
  source address 10.192.0.2;  # The local address we use for the TCP connection
  import filter {
    'bgp_45characters.exactly.so.should.not.truncate-1_importFilterV4'();
    'bgp_46characters.exactly.so.shou_9615CBDC00BAC628_importFilterV4'();
    'bgp_greater-than-64-characters.s_4C5DB3273E544641_importFilterV4'();
    accept; # Prior to introduction of BGP Filters we used "import all" so use default accept behaviour on import
  };
  export filter {
    'bgp_45characters.exactly.so.should.not.truncate-1_exportFilterV4'();
    'bgp_46characters.exactly.so.shou_9615CBDC00BAC628_exportFilterV4'();
    'bgp_greater-than-64-characters.s_4C5DB3273E544641_exportFilterV4'();
    calico_export_to_bgp_peers();
    reject; # Prior to introduction of BGP Filters anything not explicitly exported through calico_export_to_bgp_peers()
            # was rejected so use default reject behaviour on export
  };  # Only want to export routes for workloads.
}




# ------------- Node-specific peers -------------

# No node-specific peers configured.

