// +build !ignore_autogenerated

// Copyright (c) 2021 Tigera, Inc. All rights reserved.

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package numorstring

import (
	"github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/projectcalico/api/pkg/lib/numorstring.Port":          schema_api_pkg_lib_numorstring_Port(ref),
		"github.com/projectcalico/api/pkg/lib/numorstring.Protocol":      schema_api_pkg_lib_numorstring_Protocol(ref),
		"github.com/projectcalico/api/pkg/lib/numorstring.Uint8OrString": schema_api_pkg_lib_numorstring_Uint8OrString(ref),
	}
}

func schema_api_pkg_lib_numorstring_Port(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Port represents either a range of numeric ports or a named port.\n\n    - For a named port, set the PortName, leaving MinPort and MaxPort as 0.\n    - For a port range, set MinPort and MaxPort to the (inclusive) port numbers.  Set\n      PortName to \"\".\n    - For a single port, set MinPort = MaxPort and PortName = \"\".",
				Type:        Port{}.OpenAPISchemaType(),
				Format:      Port{}.OpenAPISchemaFormat(),
			},
		},
	}
}

func schema_api_pkg_lib_numorstring_Protocol(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type:   Protocol{}.OpenAPISchemaType(),
				Format: Protocol{}.OpenAPISchemaFormat(),
			},
		},
	}
}

func schema_api_pkg_lib_numorstring_Uint8OrString(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "UInt8OrString is a type that can hold an uint8 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.",
				Type:        Uint8OrString{}.OpenAPISchemaType(),
				Format:      Uint8OrString{}.OpenAPISchemaFormat(),
			},
		},
	}
}
