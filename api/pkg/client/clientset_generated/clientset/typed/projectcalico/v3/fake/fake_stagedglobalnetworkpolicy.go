// Copyright (c) 2025 Tigera, Inc. All rights reserved.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v3 "github.com/projectcalico/api/pkg/apis/projectcalico/v3"
	projectcalicov3 "github.com/projectcalico/api/pkg/client/clientset_generated/clientset/typed/projectcalico/v3"
	gentype "k8s.io/client-go/gentype"
)

// fakeStagedGlobalNetworkPolicies implements StagedGlobalNetworkPolicyInterface
type fakeStagedGlobalNetworkPolicies struct {
	*gentype.FakeClientWithList[*v3.StagedGlobalNetworkPolicy, *v3.StagedGlobalNetworkPolicyList]
	Fake *FakeProjectcalicoV3
}

func newFakeStagedGlobalNetworkPolicies(fake *FakeProjectcalicoV3) projectcalicov3.StagedGlobalNetworkPolicyInterface {
	return &fakeStagedGlobalNetworkPolicies{
		gentype.NewFakeClientWithList[*v3.StagedGlobalNetworkPolicy, *v3.StagedGlobalNetworkPolicyList](
			fake.Fake,
			"",
			v3.SchemeGroupVersion.WithResource("stagedglobalnetworkpolicies"),
			v3.SchemeGroupVersion.WithKind("StagedGlobalNetworkPolicy"),
			func() *v3.StagedGlobalNetworkPolicy { return &v3.StagedGlobalNetworkPolicy{} },
			func() *v3.StagedGlobalNetworkPolicyList { return &v3.StagedGlobalNetworkPolicyList{} },
			func(dst, src *v3.StagedGlobalNetworkPolicyList) { dst.ListMeta = src.ListMeta },
			func(list *v3.StagedGlobalNetworkPolicyList) []*v3.StagedGlobalNetworkPolicy {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v3.StagedGlobalNetworkPolicyList, items []*v3.StagedGlobalNetworkPolicy) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
