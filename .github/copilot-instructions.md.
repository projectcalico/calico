# GitHub Copilot Instructions

Please follow all of the below guidelines when performing a code review for this GitHub repository. 

## ðŸ§  Context

- **Project Type**: Open-source project for container networking for Kubernetes (CNI plugin and network policy engine)
- **Language**: Go (primary language), Python (secondary language, mainly for a subset of the tests in this repository)
- **Framework / Libraries**: net/http, k8s.io 

- **Domain specifics**: Networking related to iptables, nftables, eBPF, CNI, VXLAN, BGP
- **Multi-platform support**: This codebase Linux/Windows dataplane differences
- **Kubernetes integration**: CRDs, controllers, operators
- **Performance criticality**: This is dataplane code where performance matters
- **Security Focused**: Network policy enforcement, CNI security

## ðŸ”§ General Guidelines

- Follow idiomatic Go conventions (<https://go.dev/doc/effective_go>).
- Use named functions over long anonymous ones.
- Organize logic into small, composable functions.
- Prefer interfaces for dependencies to enable mocking and testing.
- Use `gofmt` or `goimports` to enforce formatting.
- Avoid unnecessary abstraction; keep things simple and readable.

## ðŸ”’ Security Guidelines
- Validate all network configurations and CIDRs
- Use principle of least privilege
- Secure defaults for network policies
- Careful handling of privileged operations

## ðŸ§¶ Patterns

### âœ… Patterns to Follow

- Use **Clean Architecture** and **Repository Pattern**.
- Implement input validation using Go structs and validation tags (e.g., [go-playground/validator](https://github.com/go-playground/validator)).
- Use dependency injection via constructors (avoid global state).
- Keep `main.go` minimalâ€”delegate to `internal`.

### ðŸš« Patterns to Avoid

- Donâ€™t use global state unless absolutely required.
- Donâ€™t hardcode configâ€”use environment variables or config files.
- Donâ€™t panic or exit in library code; return errors instead.
- Donâ€™t expose secretsâ€”use `.env` or secret managers.

## ðŸ§ª Testing Guidelines

- Unit tests for business logic
- FV tests for end-to-end scenarios
- Mock network interfaces appropriately
- Test both Linux and Windows dataplanes
- Performance regression tests for dataplane

## âš¡ Performance Guidelines
- Minimize allocations in hot paths
- Use object pooling for frequent operations
- Profile dataplane code regularly
- Consider eBPF optimizations where applicable
