// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.5.0
// source: cnibackend.proto

package proto

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddRequest struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	InterfaceName            string                 `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	Netns                    string                 `protobuf:"bytes,2,opt,name=netns,proto3" json:"netns,omitempty"`
	DesiredHostInterfaceName string                 `protobuf:"bytes,3,opt,name=desired_host_interface_name,json=desiredHostInterfaceName,proto3" json:"desired_host_interface_name,omitempty"`
	Settings                 *ContainerSettings     `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
	ContainerIps             []*IPConfig            `protobuf:"bytes,5,rep,name=container_ips,json=containerIps,proto3" json:"container_ips,omitempty"`
	ContainerRoutes          []string               `protobuf:"bytes,6,rep,name=container_routes,json=containerRoutes,proto3" json:"container_routes,omitempty"`
	Workload                 *WorkloadIDs           `protobuf:"bytes,7,opt,name=workload,proto3" json:"workload,omitempty"`
	DataplaneOptions         map[string]string      `protobuf:"bytes,8,rep,name=dataplane_options,json=dataplaneOptions,proto3" json:"dataplane_options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *AddRequest) Reset() {
	*x = AddRequest{}
	mi := &file_cnibackend_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRequest) ProtoMessage() {}

func (x *AddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cnibackend_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRequest.ProtoReflect.Descriptor instead.
func (*AddRequest) Descriptor() ([]byte, []int) {
	return file_cnibackend_proto_rawDescGZIP(), []int{0}
}

func (x *AddRequest) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *AddRequest) GetNetns() string {
	if x != nil {
		return x.Netns
	}
	return ""
}

func (x *AddRequest) GetDesiredHostInterfaceName() string {
	if x != nil {
		return x.DesiredHostInterfaceName
	}
	return ""
}

func (x *AddRequest) GetSettings() *ContainerSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *AddRequest) GetContainerIps() []*IPConfig {
	if x != nil {
		return x.ContainerIps
	}
	return nil
}

func (x *AddRequest) GetContainerRoutes() []string {
	if x != nil {
		return x.ContainerRoutes
	}
	return nil
}

func (x *AddRequest) GetWorkload() *WorkloadIDs {
	if x != nil {
		return x.Workload
	}
	return nil
}

func (x *AddRequest) GetDataplaneOptions() map[string]string {
	if x != nil {
		return x.DataplaneOptions
	}
	return nil
}

type ContainerSettings struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	AllowIpForwarding bool                   `protobuf:"varint,1,opt,name=allow_ip_forwarding,json=allowIpForwarding,proto3" json:"allow_ip_forwarding,omitempty"`
	Mtu               int32                  `protobuf:"varint,2,opt,name=mtu,proto3" json:"mtu,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ContainerSettings) Reset() {
	*x = ContainerSettings{}
	mi := &file_cnibackend_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerSettings) ProtoMessage() {}

func (x *ContainerSettings) ProtoReflect() protoreflect.Message {
	mi := &file_cnibackend_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerSettings.ProtoReflect.Descriptor instead.
func (*ContainerSettings) Descriptor() ([]byte, []int) {
	return file_cnibackend_proto_rawDescGZIP(), []int{1}
}

func (x *ContainerSettings) GetAllowIpForwarding() bool {
	if x != nil {
		return x.AllowIpForwarding
	}
	return false
}

func (x *ContainerSettings) GetMtu() int32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

type IPConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Gateway       string                 `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IPConfig) Reset() {
	*x = IPConfig{}
	mi := &file_cnibackend_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPConfig) ProtoMessage() {}

func (x *IPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cnibackend_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPConfig.ProtoReflect.Descriptor instead.
func (*IPConfig) Descriptor() ([]byte, []int) {
	return file_cnibackend_proto_rawDescGZIP(), []int{2}
}

func (x *IPConfig) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *IPConfig) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

type WorkloadIDs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Labels        map[string]string      `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Annotations   map[string]string      `protobuf:"bytes,4,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Endpoint      string                 `protobuf:"bytes,5,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Node          string                 `protobuf:"bytes,6,opt,name=node,proto3" json:"node,omitempty"`
	Orchestrator  string                 `protobuf:"bytes,7,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	Pod           string                 `protobuf:"bytes,8,opt,name=pod,proto3" json:"pod,omitempty"`
	Ports         []*Port                `protobuf:"bytes,9,rep,name=ports,proto3" json:"ports,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkloadIDs) Reset() {
	*x = WorkloadIDs{}
	mi := &file_cnibackend_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadIDs) ProtoMessage() {}

func (x *WorkloadIDs) ProtoReflect() protoreflect.Message {
	mi := &file_cnibackend_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadIDs.ProtoReflect.Descriptor instead.
func (*WorkloadIDs) Descriptor() ([]byte, []int) {
	return file_cnibackend_proto_rawDescGZIP(), []int{3}
}

func (x *WorkloadIDs) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkloadIDs) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *WorkloadIDs) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *WorkloadIDs) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *WorkloadIDs) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *WorkloadIDs) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *WorkloadIDs) GetOrchestrator() string {
	if x != nil {
		return x.Orchestrator
	}
	return ""
}

func (x *WorkloadIDs) GetPod() string {
	if x != nil {
		return x.Pod
	}
	return ""
}

func (x *WorkloadIDs) GetPorts() []*Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

type Port struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Protocol      string                 `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Port          uint32                 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	HostPort      uint32                 `protobuf:"varint,4,opt,name=host_port,json=hostPort,proto3" json:"host_port,omitempty"`
	HostIp        string                 `protobuf:"bytes,5,opt,name=host_ip,json=hostIp,proto3" json:"host_ip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Port) Reset() {
	*x = Port{}
	mi := &file_cnibackend_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_cnibackend_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_cnibackend_proto_rawDescGZIP(), []int{4}
}

func (x *Port) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Port) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Port) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Port) GetHostPort() uint32 {
	if x != nil {
		return x.HostPort
	}
	return 0
}

func (x *Port) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

type AddReply struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Successful        bool                   `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
	ErrorMessage      string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	HostInterfaceName string                 `protobuf:"bytes,3,opt,name=host_interface_name,json=hostInterfaceName,proto3" json:"host_interface_name,omitempty"`
	ContainerMac      string                 `protobuf:"bytes,4,opt,name=container_mac,json=containerMac,proto3" json:"container_mac,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AddReply) Reset() {
	*x = AddReply{}
	mi := &file_cnibackend_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReply) ProtoMessage() {}

func (x *AddReply) ProtoReflect() protoreflect.Message {
	mi := &file_cnibackend_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReply.ProtoReflect.Descriptor instead.
func (*AddReply) Descriptor() ([]byte, []int) {
	return file_cnibackend_proto_rawDescGZIP(), []int{5}
}

func (x *AddReply) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

func (x *AddReply) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *AddReply) GetHostInterfaceName() string {
	if x != nil {
		return x.HostInterfaceName
	}
	return ""
}

func (x *AddReply) GetContainerMac() string {
	if x != nil {
		return x.ContainerMac
	}
	return ""
}

type DelRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	InterfaceName    string                 `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	Netns            string                 `protobuf:"bytes,2,opt,name=netns,proto3" json:"netns,omitempty"`
	DataplaneOptions map[string]string      `protobuf:"bytes,3,rep,name=dataplane_options,json=dataplaneOptions,proto3" json:"dataplane_options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DelRequest) Reset() {
	*x = DelRequest{}
	mi := &file_cnibackend_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelRequest) ProtoMessage() {}

func (x *DelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cnibackend_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelRequest.ProtoReflect.Descriptor instead.
func (*DelRequest) Descriptor() ([]byte, []int) {
	return file_cnibackend_proto_rawDescGZIP(), []int{6}
}

func (x *DelRequest) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *DelRequest) GetNetns() string {
	if x != nil {
		return x.Netns
	}
	return ""
}

func (x *DelRequest) GetDataplaneOptions() map[string]string {
	if x != nil {
		return x.DataplaneOptions
	}
	return nil
}

type DelReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Successful    bool                   `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelReply) Reset() {
	*x = DelReply{}
	mi := &file_cnibackend_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelReply) ProtoMessage() {}

func (x *DelReply) ProtoReflect() protoreflect.Message {
	mi := &file_cnibackend_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelReply.ProtoReflect.Descriptor instead.
func (*DelReply) Descriptor() ([]byte, []int) {
	return file_cnibackend_proto_rawDescGZIP(), []int{7}
}

func (x *DelReply) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

func (x *DelReply) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_cnibackend_proto protoreflect.FileDescriptor

const file_cnibackend_proto_rawDesc = "" +
	"\n" +
	"\x10cnibackend.proto\x12\x03cni\"\xe2\x03\n" +
	"\n" +
	"AddRequest\x12%\n" +
	"\x0einterface_name\x18\x01 \x01(\tR\rinterfaceName\x12\x14\n" +
	"\x05netns\x18\x02 \x01(\tR\x05netns\x12=\n" +
	"\x1bdesired_host_interface_name\x18\x03 \x01(\tR\x18desiredHostInterfaceName\x122\n" +
	"\bsettings\x18\x04 \x01(\v2\x16.cni.ContainerSettingsR\bsettings\x122\n" +
	"\rcontainer_ips\x18\x05 \x03(\v2\r.cni.IPConfigR\fcontainerIps\x12)\n" +
	"\x10container_routes\x18\x06 \x03(\tR\x0fcontainerRoutes\x12,\n" +
	"\bworkload\x18\a \x01(\v2\x10.cni.WorkloadIDsR\bworkload\x12R\n" +
	"\x11dataplane_options\x18\b \x03(\v2%.cni.AddRequest.DataplaneOptionsEntryR\x10dataplaneOptions\x1aC\n" +
	"\x15DataplaneOptionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"U\n" +
	"\x11ContainerSettings\x12.\n" +
	"\x13allow_ip_forwarding\x18\x01 \x01(\bR\x11allowIpForwarding\x12\x10\n" +
	"\x03mtu\x18\x02 \x01(\x05R\x03mtu\">\n" +
	"\bIPConfig\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x18\n" +
	"\agateway\x18\x02 \x01(\tR\agateway\"\xbc\x03\n" +
	"\vWorkloadIDs\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x124\n" +
	"\x06labels\x18\x03 \x03(\v2\x1c.cni.WorkloadIDs.LabelsEntryR\x06labels\x12C\n" +
	"\vannotations\x18\x04 \x03(\v2!.cni.WorkloadIDs.AnnotationsEntryR\vannotations\x12\x1a\n" +
	"\bendpoint\x18\x05 \x01(\tR\bendpoint\x12\x12\n" +
	"\x04node\x18\x06 \x01(\tR\x04node\x12\"\n" +
	"\forchestrator\x18\a \x01(\tR\forchestrator\x12\x10\n" +
	"\x03pod\x18\b \x01(\tR\x03pod\x12\x1f\n" +
	"\x05ports\x18\t \x03(\v2\t.cni.PortR\x05ports\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a>\n" +
	"\x10AnnotationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x80\x01\n" +
	"\x04Port\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1a\n" +
	"\bprotocol\x18\x02 \x01(\tR\bprotocol\x12\x12\n" +
	"\x04port\x18\x03 \x01(\rR\x04port\x12\x1b\n" +
	"\thost_port\x18\x04 \x01(\rR\bhostPort\x12\x17\n" +
	"\ahost_ip\x18\x05 \x01(\tR\x06hostIp\"\xa4\x01\n" +
	"\bAddReply\x12\x1e\n" +
	"\n" +
	"successful\x18\x01 \x01(\bR\n" +
	"successful\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\x12.\n" +
	"\x13host_interface_name\x18\x03 \x01(\tR\x11hostInterfaceName\x12#\n" +
	"\rcontainer_mac\x18\x04 \x01(\tR\fcontainerMac\"\xe2\x01\n" +
	"\n" +
	"DelRequest\x12%\n" +
	"\x0einterface_name\x18\x01 \x01(\tR\rinterfaceName\x12\x14\n" +
	"\x05netns\x18\x02 \x01(\tR\x05netns\x12R\n" +
	"\x11dataplane_options\x18\x03 \x03(\v2%.cni.DelRequest.DataplaneOptionsEntryR\x10dataplaneOptions\x1aC\n" +
	"\x15DataplaneOptionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"O\n" +
	"\bDelReply\x12\x1e\n" +
	"\n" +
	"successful\x18\x01 \x01(\bR\n" +
	"successful\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage2`\n" +
	"\fCniDataplane\x12'\n" +
	"\x03Add\x12\x0f.cni.AddRequest\x1a\r.cni.AddReply\"\x00\x12'\n" +
	"\x03Del\x12\x0f.cni.DelRequest\x1a\r.cni.DelReply\"\x00B\tZ\a./protob\x06proto3"

var (
	file_cnibackend_proto_rawDescOnce sync.Once
	file_cnibackend_proto_rawDescData []byte
)

func file_cnibackend_proto_rawDescGZIP() []byte {
	file_cnibackend_proto_rawDescOnce.Do(func() {
		file_cnibackend_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cnibackend_proto_rawDesc), len(file_cnibackend_proto_rawDesc)))
	})
	return file_cnibackend_proto_rawDescData
}

var file_cnibackend_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_cnibackend_proto_goTypes = []any{
	(*AddRequest)(nil),        // 0: cni.AddRequest
	(*ContainerSettings)(nil), // 1: cni.ContainerSettings
	(*IPConfig)(nil),          // 2: cni.IPConfig
	(*WorkloadIDs)(nil),       // 3: cni.WorkloadIDs
	(*Port)(nil),              // 4: cni.Port
	(*AddReply)(nil),          // 5: cni.AddReply
	(*DelRequest)(nil),        // 6: cni.DelRequest
	(*DelReply)(nil),          // 7: cni.DelReply
	nil,                       // 8: cni.AddRequest.DataplaneOptionsEntry
	nil,                       // 9: cni.WorkloadIDs.LabelsEntry
	nil,                       // 10: cni.WorkloadIDs.AnnotationsEntry
	nil,                       // 11: cni.DelRequest.DataplaneOptionsEntry
}
var file_cnibackend_proto_depIdxs = []int32{
	1,  // 0: cni.AddRequest.settings:type_name -> cni.ContainerSettings
	2,  // 1: cni.AddRequest.container_ips:type_name -> cni.IPConfig
	3,  // 2: cni.AddRequest.workload:type_name -> cni.WorkloadIDs
	8,  // 3: cni.AddRequest.dataplane_options:type_name -> cni.AddRequest.DataplaneOptionsEntry
	9,  // 4: cni.WorkloadIDs.labels:type_name -> cni.WorkloadIDs.LabelsEntry
	10, // 5: cni.WorkloadIDs.annotations:type_name -> cni.WorkloadIDs.AnnotationsEntry
	4,  // 6: cni.WorkloadIDs.ports:type_name -> cni.Port
	11, // 7: cni.DelRequest.dataplane_options:type_name -> cni.DelRequest.DataplaneOptionsEntry
	0,  // 8: cni.CniDataplane.Add:input_type -> cni.AddRequest
	6,  // 9: cni.CniDataplane.Del:input_type -> cni.DelRequest
	5,  // 10: cni.CniDataplane.Add:output_type -> cni.AddReply
	7,  // 11: cni.CniDataplane.Del:output_type -> cni.DelReply
	10, // [10:12] is the sub-list for method output_type
	8,  // [8:10] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_cnibackend_proto_init() }
func file_cnibackend_proto_init() {
	if File_cnibackend_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cnibackend_proto_rawDesc), len(file_cnibackend_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cnibackend_proto_goTypes,
		DependencyIndexes: file_cnibackend_proto_depIdxs,
		MessageInfos:      file_cnibackend_proto_msgTypes,
	}.Build()
	File_cnibackend_proto = out.File
	file_cnibackend_proto_goTypes = nil
	file_cnibackend_proto_depIdxs = nil
}
