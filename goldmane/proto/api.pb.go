// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v3.5.0
// source: api.proto

package proto

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FilterType specifies which fields on the underlying Flow data to collect.
type FilterType int32

const (
	FilterType_FilterTypeDestName        FilterType = 0
	FilterType_FilterTypeSourceName      FilterType = 1
	FilterType_FilterTypeDestNamespace   FilterType = 2
	FilterType_FilterTypeSourceNamespace FilterType = 3
	FilterType_FilterTypePolicyTier      FilterType = 4
)

// Enum value maps for FilterType.
var (
	FilterType_name = map[int32]string{
		0: "FilterTypeDestName",
		1: "FilterTypeSourceName",
		2: "FilterTypeDestNamespace",
		3: "FilterTypeSourceNamespace",
		4: "FilterTypePolicyTier",
	}
	FilterType_value = map[string]int32{
		"FilterTypeDestName":        0,
		"FilterTypeSourceName":      1,
		"FilterTypeDestNamespace":   2,
		"FilterTypeSourceNamespace": 3,
		"FilterTypePolicyTier":      4,
	}
)

func (x FilterType) Enum() *FilterType {
	p := new(FilterType)
	*p = x
	return p
}

func (x FilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[0].Descriptor()
}

func (FilterType) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[0]
}

func (x FilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterType.Descriptor instead.
func (FilterType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

type Action int32

const (
	Action_ActionUnspecified Action = 0
	Action_Allow             Action = 1
	Action_Deny              Action = 2
	Action_Pass              Action = 3
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0: "ActionUnspecified",
		1: "Allow",
		2: "Deny",
		3: "Pass",
	}
	Action_value = map[string]int32{
		"ActionUnspecified": 0,
		"Allow":             1,
		"Deny":              2,
		"Pass":              3,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[1].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[1]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

type MatchType int32

const (
	// Match the value exactly.
	MatchType_Exact MatchType = 0
	// Use fuzzy matching on the value.
	MatchType_Fuzzy MatchType = 1
)

// Enum value maps for MatchType.
var (
	MatchType_name = map[int32]string{
		0: "Exact",
		1: "Fuzzy",
	}
	MatchType_value = map[string]int32{
		"Exact": 0,
		"Fuzzy": 1,
	}
)

func (x MatchType) Enum() *MatchType {
	p := new(MatchType)
	*p = x
	return p
}

func (x MatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[2].Descriptor()
}

func (MatchType) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[2]
}

func (x MatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchType.Descriptor instead.
func (MatchType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2}
}

type PolicyKind int32

const (
	// Unspecified
	PolicyKind_KindUnspecified PolicyKind = 0
	// Calico policy types.
	PolicyKind_CalicoNetworkPolicy           PolicyKind = 1
	PolicyKind_GlobalNetworkPolicy           PolicyKind = 2
	PolicyKind_StagedNetworkPolicy           PolicyKind = 3
	PolicyKind_StagedGlobalNetworkPolicy     PolicyKind = 4
	PolicyKind_StagedKubernetesNetworkPolicy PolicyKind = 5
	// Native Kubernetes types.
	PolicyKind_NetworkPolicy              PolicyKind = 6
	PolicyKind_AdminNetworkPolicy         PolicyKind = 7
	PolicyKind_BaselineAdminNetworkPolicy PolicyKind = 8
	// Calico Profiles.
	PolicyKind_Profile   PolicyKind = 9
	PolicyKind_EndOfTier PolicyKind = 10
)

// Enum value maps for PolicyKind.
var (
	PolicyKind_name = map[int32]string{
		0:  "KindUnspecified",
		1:  "CalicoNetworkPolicy",
		2:  "GlobalNetworkPolicy",
		3:  "StagedNetworkPolicy",
		4:  "StagedGlobalNetworkPolicy",
		5:  "StagedKubernetesNetworkPolicy",
		6:  "NetworkPolicy",
		7:  "AdminNetworkPolicy",
		8:  "BaselineAdminNetworkPolicy",
		9:  "Profile",
		10: "EndOfTier",
	}
	PolicyKind_value = map[string]int32{
		"KindUnspecified":               0,
		"CalicoNetworkPolicy":           1,
		"GlobalNetworkPolicy":           2,
		"StagedNetworkPolicy":           3,
		"StagedGlobalNetworkPolicy":     4,
		"StagedKubernetesNetworkPolicy": 5,
		"NetworkPolicy":                 6,
		"AdminNetworkPolicy":            7,
		"BaselineAdminNetworkPolicy":    8,
		"Profile":                       9,
		"EndOfTier":                     10,
	}
)

func (x PolicyKind) Enum() *PolicyKind {
	p := new(PolicyKind)
	*p = x
	return p
}

func (x PolicyKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyKind) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[3].Descriptor()
}

func (PolicyKind) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[3]
}

func (x PolicyKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyKind.Descriptor instead.
func (PolicyKind) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3}
}

type SortBy int32

const (
	SortBy_Time            SortBy = 0
	SortBy_DestName        SortBy = 1
	SortBy_DestNamespace   SortBy = 2
	SortBy_DestType        SortBy = 3
	SortBy_SourceName      SortBy = 4
	SortBy_SourceNamespace SortBy = 5
	SortBy_SourceType      SortBy = 6
)

// Enum value maps for SortBy.
var (
	SortBy_name = map[int32]string{
		0: "Time",
		1: "DestName",
		2: "DestNamespace",
		3: "DestType",
		4: "SourceName",
		5: "SourceNamespace",
		6: "SourceType",
	}
	SortBy_value = map[string]int32{
		"Time":            0,
		"DestName":        1,
		"DestNamespace":   2,
		"DestType":        3,
		"SourceName":      4,
		"SourceNamespace": 5,
		"SourceType":      6,
	}
)

func (x SortBy) Enum() *SortBy {
	p := new(SortBy)
	*p = x
	return p
}

func (x SortBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortBy) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[4].Descriptor()
}

func (SortBy) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[4]
}

func (x SortBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortBy.Descriptor instead.
func (SortBy) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{4}
}

type EndpointType int32

const (
	// For queries, unspecified means "do not filter on this field".
	EndpointType_EndpointTypeUnspecified EndpointType = 0
	// WorkloadEndpoint represents an application endpoint with its own network identity. For example,
	// a Kubernetes Pod.
	EndpointType_WorkloadEndpoint EndpointType = 1
	// HostEndpoint represents a host machine.
	EndpointType_HostEndpoint EndpointType = 2
	// NetworkSet represents an address from within a configured projectcalico.org/v3 NetworkSet or
	// GlobalNetworkSet.
	EndpointType_NetworkSet EndpointType = 3
	// Network represents an endpoint on a public or private network not known by Calico. For example,
	// traffic from the public internet or private LAN not covered by a NetworkSet.
	EndpointType_Network EndpointType = 4
)

// Enum value maps for EndpointType.
var (
	EndpointType_name = map[int32]string{
		0: "EndpointTypeUnspecified",
		1: "WorkloadEndpoint",
		2: "HostEndpoint",
		3: "NetworkSet",
		4: "Network",
	}
	EndpointType_value = map[string]int32{
		"EndpointTypeUnspecified": 0,
		"WorkloadEndpoint":        1,
		"HostEndpoint":            2,
		"NetworkSet":              3,
		"Network":                 4,
	}
)

func (x EndpointType) Enum() *EndpointType {
	p := new(EndpointType)
	*p = x
	return p
}

func (x EndpointType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EndpointType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[5].Descriptor()
}

func (EndpointType) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[5]
}

func (x EndpointType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EndpointType.Descriptor instead.
func (EndpointType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5}
}

type Reporter int32

const (
	// For queries, unspecified means "do not filter on this field".
	Reporter_ReporterUnspecified Reporter = 0
	Reporter_Src                 Reporter = 1
	Reporter_Dst                 Reporter = 2
)

// Enum value maps for Reporter.
var (
	Reporter_name = map[int32]string{
		0: "ReporterUnspecified",
		1: "Src",
		2: "Dst",
	}
	Reporter_value = map[string]int32{
		"ReporterUnspecified": 0,
		"Src":                 1,
		"Dst":                 2,
	}
)

func (x Reporter) Enum() *Reporter {
	p := new(Reporter)
	*p = x
	return p
}

func (x Reporter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Reporter) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[6].Descriptor()
}

func (Reporter) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[6]
}

func (x Reporter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Reporter.Descriptor instead.
func (Reporter) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6}
}

// StatisticType represents the types of data available over the Statistics API endpoint.
type StatisticType int32

const (
	StatisticType_PacketCount         StatisticType = 0
	StatisticType_ByteCount           StatisticType = 1
	StatisticType_LiveConnectionCount StatisticType = 2
)

// Enum value maps for StatisticType.
var (
	StatisticType_name = map[int32]string{
		0: "PacketCount",
		1: "ByteCount",
		2: "LiveConnectionCount",
	}
	StatisticType_value = map[string]int32{
		"PacketCount":         0,
		"ByteCount":           1,
		"LiveConnectionCount": 2,
	}
)

func (x StatisticType) Enum() *StatisticType {
	p := new(StatisticType)
	*p = x
	return p
}

func (x StatisticType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatisticType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[7].Descriptor()
}

func (StatisticType) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[7]
}

func (x StatisticType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatisticType.Descriptor instead.
func (StatisticType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7}
}

type StatisticsGroupBy int32

const (
	// Policy configures statistics groupings on a per-policy basis.
	StatisticsGroupBy_Policy StatisticsGroupBy = 0
	// PolicyRule configures statistics groupings on a per-policy-rule basis.
	StatisticsGroupBy_PolicyRule StatisticsGroupBy = 1
)

// Enum value maps for StatisticsGroupBy.
var (
	StatisticsGroupBy_name = map[int32]string{
		0: "Policy",
		1: "PolicyRule",
	}
	StatisticsGroupBy_value = map[string]int32{
		"Policy":     0,
		"PolicyRule": 1,
	}
)

func (x StatisticsGroupBy) Enum() *StatisticsGroupBy {
	p := new(StatisticsGroupBy)
	*p = x
	return p
}

func (x StatisticsGroupBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatisticsGroupBy) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[8].Descriptor()
}

func (StatisticsGroupBy) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[8]
}

func (x StatisticsGroupBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatisticsGroupBy.Descriptor instead.
func (StatisticsGroupBy) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{8}
}

type RuleDirection int32

const (
	RuleDirection_Any     RuleDirection = 0
	RuleDirection_Ingress RuleDirection = 1
	RuleDirection_Egress  RuleDirection = 2
)

// Enum value maps for RuleDirection.
var (
	RuleDirection_name = map[int32]string{
		0: "Any",
		1: "Ingress",
		2: "Egress",
	}
	RuleDirection_value = map[string]int32{
		"Any":     0,
		"Ingress": 1,
		"Egress":  2,
	}
)

func (x RuleDirection) Enum() *RuleDirection {
	p := new(RuleDirection)
	*p = x
	return p
}

func (x RuleDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuleDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[9].Descriptor()
}

func (RuleDirection) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[9]
}

func (x RuleDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuleDirection.Descriptor instead.
func (RuleDirection) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{9}
}

// FlowListRequest defines a message to request a particular selection of aggregated Flow objects.
type FlowListRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// StartTimeGt specifies the beginning of a time window with which to filter Flows. Flows
	// will be returned only if their start time is greater than or equal to the given value.
	//
	// - A value of zero indicates the oldest start time available by the server.
	// - A value greater than zero indicates an absolute time in seconds since the Unix epoch.
	// - A value less than zero indicates a relative number of seconds from "now", as determined by the server.
	StartTimeGte int64 `protobuf:"varint,1,opt,name=start_time_gte,json=startTimeGte,proto3" json:"start_time_gte,omitempty"`
	// StartTimeLt specifies the end of a time window with which to filter flows. Flows will
	// be returned only if their start time occurs before the requested time.
	//
	// - A value of zero means "now", as determined by the server at the time of request.
	// - A value greater than zero indicates an absolute time in seconds since the Unix epoch.
	// - A value less than zero indicates a relative number of seconds from "now", as determined by the server.
	StartTimeLt int64 `protobuf:"varint,2,opt,name=start_time_lt,json=startTimeLt,proto3" json:"start_time_lt,omitempty"`
	// PageNumber specifies the page number to return. It requires that PageSize is also specified in order
	// to determine page boundaries. Note that pages may change over time as new flow data is collected or expired.
	// Querying the same page at different points in time may return different results.
	PageNumber int64 `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	// PageSize configures the maximum number of results to return as part of this query.
	PageSize int64 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// SortBy configures how to sort the results of this query. By default flows are sorted by start time.
	// The returned list is sorted by each sort option, in order, using the next sort option in the list as a tie-breaker.
	// Note: At the moment, only a single sort option is supported.
	SortBy []*SortOption `protobuf:"bytes,5,rep,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	// Filter allows specification of one or more criteria on which to filter the returned Flows.
	Filter *Filter `protobuf:"bytes,6,opt,name=filter,proto3" json:"filter,omitempty"`
	// AggregationInterval is the width of the time window in seconds across which to aggregate when generating
	// Flows to return. This must be a multiple of 15.
	AggregationInterval int64 `protobuf:"varint,7,opt,name=aggregation_interval,json=aggregationInterval,proto3" json:"aggregation_interval,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *FlowListRequest) Reset() {
	*x = FlowListRequest{}
	mi := &file_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowListRequest) ProtoMessage() {}

func (x *FlowListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowListRequest.ProtoReflect.Descriptor instead.
func (*FlowListRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

func (x *FlowListRequest) GetStartTimeGte() int64 {
	if x != nil {
		return x.StartTimeGte
	}
	return 0
}

func (x *FlowListRequest) GetStartTimeLt() int64 {
	if x != nil {
		return x.StartTimeLt
	}
	return 0
}

func (x *FlowListRequest) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *FlowListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FlowListRequest) GetSortBy() []*SortOption {
	if x != nil {
		return x.SortBy
	}
	return nil
}

func (x *FlowListRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *FlowListRequest) GetAggregationInterval() int64 {
	if x != nil {
		return x.AggregationInterval
	}
	return 0
}

// FlowStreamRequest defines a message to request a stream of aggregated Flows.
type FlowStreamRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// StartTimeGt specifies the beginning of a time window from which to stream Flows. Flows
	// will be streamed only if their start time is greater than or equal to the given value.
	//
	// - A value of zero means "now", as determined by the server at the time of request.
	// - A value greater than zero indicates an absolute time in seconds since the Unix epoch.
	// - A value less than zero indicates a relative number of seconds from "now", as determined by the server.
	StartTimeGte int64 `protobuf:"varint,1,opt,name=start_time_gte,json=startTimeGte,proto3" json:"start_time_gte,omitempty"`
	// Filter allows specification of one or more criteria on which to filter the returned Flows.
	Filter *Filter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// AggregationInterval defines both the frequency of streamed updates for each Flow, and the amount of time that FlowResult covers.
	// It must always be 15s.
	//
	// Every AggregationInterval the server must send a FlowResult containing the aggregated data for that Flow from a
	// time interval of width AggregationInterval.
	//
	// For a Flow that has continuous traffic, the server should send updates covering the range
	// [now-2*AggregationInterval, now-AggregationInterval] so that the data is reasonably likely to be complete.
	AggregationInterval int64 `protobuf:"varint,3,opt,name=aggregation_interval,json=aggregationInterval,proto3" json:"aggregation_interval,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *FlowStreamRequest) Reset() {
	*x = FlowStreamRequest{}
	mi := &file_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowStreamRequest) ProtoMessage() {}

func (x *FlowStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowStreamRequest.ProtoReflect.Descriptor instead.
func (*FlowStreamRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

func (x *FlowStreamRequest) GetStartTimeGte() int64 {
	if x != nil {
		return x.StartTimeGte
	}
	return 0
}

func (x *FlowStreamRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *FlowStreamRequest) GetAggregationInterval() int64 {
	if x != nil {
		return x.AggregationInterval
	}
	return 0
}

type FilterHintsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type is type of Filter to query.
	Type FilterType `protobuf:"varint,1,opt,name=type,proto3,enum=goldmane.FilterType" json:"type,omitempty"`
	// Filter is a set of filter criteria used to narrow down returned results.
	Filter *Filter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// StartTimeGt specifies the beginning of a time window with which to filter (inclusive).
	//
	// - A value of zero indicates the oldest start time available by the server.
	// - A value greater than zero indicates an absolute time in seconds since the Unix epoch.
	// - A value less than zero indicates a relative number of seconds from "now", as determined by the server.
	StartTimeGte int64 `protobuf:"varint,3,opt,name=start_time_gte,json=startTimeGte,proto3" json:"start_time_gte,omitempty"`
	// StartTimeLt specifies the end of a time window with which to filter.
	//
	// - A value of zero means "now", as determined by the server at the time of request.
	// - A value greater than zero indicates an absolute time in seconds since the Unix epoch.
	// - A value less than zero indicates a relative number of seconds from "now", as determined by the server.
	StartTimeLt   int64 `protobuf:"varint,4,opt,name=start_time_lt,json=startTimeLt,proto3" json:"start_time_lt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterHintsRequest) Reset() {
	*x = FilterHintsRequest{}
	mi := &file_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterHintsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterHintsRequest) ProtoMessage() {}

func (x *FilterHintsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterHintsRequest.ProtoReflect.Descriptor instead.
func (*FilterHintsRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2}
}

func (x *FilterHintsRequest) GetType() FilterType {
	if x != nil {
		return x.Type
	}
	return FilterType_FilterTypeDestName
}

func (x *FilterHintsRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *FilterHintsRequest) GetStartTimeGte() int64 {
	if x != nil {
		return x.StartTimeGte
	}
	return 0
}

func (x *FilterHintsRequest) GetStartTimeLt() int64 {
	if x != nil {
		return x.StartTimeLt
	}
	return 0
}

type FilterHint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterHint) Reset() {
	*x = FilterHint{}
	mi := &file_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterHint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterHint) ProtoMessage() {}

func (x *FilterHint) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterHint.ProtoReflect.Descriptor instead.
func (*FilterHint) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3}
}

func (x *FilterHint) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// FlowResult wraps a Flow object with additional metadata.
type FlowResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID is an opaque integer value ID that can be used to identify a Flow, and is 1:1 with the FlowKey.
	// Note that this ID is not valid across server restarts. Its primary use-case is for correlating FlowResult
	// updates from a Stream request.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The Flow object itself.
	Flow          *Flow `protobuf:"bytes,2,opt,name=flow,proto3" json:"flow,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowResult) Reset() {
	*x = FlowResult{}
	mi := &file_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowResult) ProtoMessage() {}

func (x *FlowResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowResult.ProtoReflect.Descriptor instead.
func (*FlowResult) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{4}
}

func (x *FlowResult) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FlowResult) GetFlow() *Flow {
	if x != nil {
		return x.Flow
	}
	return nil
}

// Filter defines criteria for selecting a set of Flows based on their parameters.
type Filter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// SourceNames allows filtering on the source name field. Combined using logical OR.
	SourceNames []*StringMatch `protobuf:"bytes,1,rep,name=source_names,json=sourceNames,proto3" json:"source_names,omitempty"`
	// SourceNamespaces filters on the source namespace field. Combined using logical OR.
	SourceNamespaces []*StringMatch `protobuf:"bytes,2,rep,name=source_namespaces,json=sourceNamespaces,proto3" json:"source_namespaces,omitempty"`
	// DestNames filters on the destination name field. Combined using logical OR.
	DestNames []*StringMatch `protobuf:"bytes,3,rep,name=dest_names,json=destNames,proto3" json:"dest_names,omitempty"`
	// DestNamespaces filters on the destination namespace field. Combined using logical OR.
	DestNamespaces []*StringMatch `protobuf:"bytes,4,rep,name=dest_namespaces,json=destNamespaces,proto3" json:"dest_namespaces,omitempty"`
	// Protocols filters on the protocol field. Combined using logical OR.
	Protocols []*StringMatch `protobuf:"bytes,5,rep,name=protocols,proto3" json:"protocols,omitempty"`
	// DestPorts filters on the port field. Combined using logical OR.
	DestPorts []*PortMatch `protobuf:"bytes,6,rep,name=dest_ports,json=destPorts,proto3" json:"dest_ports,omitempty"`
	// Actions filters on the action field. Combined using logical OR.
	Actions []Action `protobuf:"varint,7,rep,packed,name=actions,proto3,enum=goldmane.Action" json:"actions,omitempty"`
	// Policies matches on policy fields. Combined using logical OR.
	Policies      []*PolicyMatch `protobuf:"bytes,8,rep,name=policies,proto3" json:"policies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Filter) Reset() {
	*x = Filter{}
	mi := &file_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5}
}

func (x *Filter) GetSourceNames() []*StringMatch {
	if x != nil {
		return x.SourceNames
	}
	return nil
}

func (x *Filter) GetSourceNamespaces() []*StringMatch {
	if x != nil {
		return x.SourceNamespaces
	}
	return nil
}

func (x *Filter) GetDestNames() []*StringMatch {
	if x != nil {
		return x.DestNames
	}
	return nil
}

func (x *Filter) GetDestNamespaces() []*StringMatch {
	if x != nil {
		return x.DestNamespaces
	}
	return nil
}

func (x *Filter) GetProtocols() []*StringMatch {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *Filter) GetDestPorts() []*PortMatch {
	if x != nil {
		return x.DestPorts
	}
	return nil
}

func (x *Filter) GetActions() []Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Filter) GetPolicies() []*PolicyMatch {
	if x != nil {
		return x.Policies
	}
	return nil
}

type StringMatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Type          MatchType              `protobuf:"varint,2,opt,name=type,proto3,enum=goldmane.MatchType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringMatch) Reset() {
	*x = StringMatch{}
	mi := &file_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringMatch) ProtoMessage() {}

func (x *StringMatch) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringMatch.ProtoReflect.Descriptor instead.
func (*StringMatch) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6}
}

func (x *StringMatch) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *StringMatch) GetType() MatchType {
	if x != nil {
		return x.Type
	}
	return MatchType_Exact
}

type PortMatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Port          int64                  `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PortMatch) Reset() {
	*x = PortMatch{}
	mi := &file_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortMatch) ProtoMessage() {}

func (x *PortMatch) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortMatch.ProtoReflect.Descriptor instead.
func (*PortMatch) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7}
}

func (x *PortMatch) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

type SortOption struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// SortBy declares the field by which to sort.
	SortBy        SortBy `protobuf:"varint,1,opt,name=sort_by,json=sortBy,proto3,enum=goldmane.SortBy" json:"sort_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SortOption) Reset() {
	*x = SortOption{}
	mi := &file_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SortOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortOption) ProtoMessage() {}

func (x *SortOption) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortOption.ProtoReflect.Descriptor instead.
func (*SortOption) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{8}
}

func (x *SortOption) GetSortBy() SortBy {
	if x != nil {
		return x.SortBy
	}
	return SortBy_Time
}

// PolicyMatch defines criteria for matching one or more policy rules within a Flow's
// policy trace.
type PolicyMatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Kind          PolicyKind             `protobuf:"varint,1,opt,name=kind,proto3,enum=goldmane.PolicyKind" json:"kind,omitempty"`
	Tier          string                 `protobuf:"bytes,2,opt,name=tier,proto3" json:"tier,omitempty"`
	Namespace     string                 `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Action        Action                 `protobuf:"varint,5,opt,name=action,proto3,enum=goldmane.Action" json:"action,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolicyMatch) Reset() {
	*x = PolicyMatch{}
	mi := &file_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMatch) ProtoMessage() {}

func (x *PolicyMatch) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMatch.ProtoReflect.Descriptor instead.
func (*PolicyMatch) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{9}
}

func (x *PolicyMatch) GetKind() PolicyKind {
	if x != nil {
		return x.Kind
	}
	return PolicyKind_KindUnspecified
}

func (x *PolicyMatch) GetTier() string {
	if x != nil {
		return x.Tier
	}
	return ""
}

func (x *PolicyMatch) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PolicyMatch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PolicyMatch) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_ActionUnspecified
}

// FlowReceipt is a response from the server to a client after publishing a Flow.
type FlowReceipt struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowReceipt) Reset() {
	*x = FlowReceipt{}
	mi := &file_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowReceipt) ProtoMessage() {}

func (x *FlowReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowReceipt.ProtoReflect.Descriptor instead.
func (*FlowReceipt) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10}
}

// FlowUpdate wraps a Flow with additional metadata.
type FlowUpdate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Flow contains the actual flow being sent.
	Flow          *Flow `protobuf:"bytes,1,opt,name=flow,proto3" json:"flow,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowUpdate) Reset() {
	*x = FlowUpdate{}
	mi := &file_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowUpdate) ProtoMessage() {}

func (x *FlowUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowUpdate.ProtoReflect.Descriptor instead.
func (*FlowUpdate) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{11}
}

func (x *FlowUpdate) GetFlow() *Flow {
	if x != nil {
		return x.Flow
	}
	return nil
}

// FlowKey includes the identifying fields for a Flow.
// - Source: Name, namespace, type, and labels.
// - Destination: Name, namespace, type, labels and port
// - Action taken on the connection.
// - Reporter (i.e., measured at source or destination).
// - Protocol of the connection (TCP, UDP, etc.).
type FlowKey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// SourceName is the name of the source for this Flow. It represents one or more
	// source pods that share a GenerateName.
	SourceName string `protobuf:"bytes,1,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`
	// SourceNamespace is the namespace of the source pods for this flow.
	SourceNamespace string `protobuf:"bytes,2,opt,name=source_namespace,json=sourceNamespace,proto3" json:"source_namespace,omitempty"`
	// SourceType is the type of the source, used to contextualize the source
	// name and namespace fields.
	SourceType EndpointType `protobuf:"varint,3,opt,name=source_type,json=sourceType,proto3,enum=goldmane.EndpointType" json:"source_type,omitempty"`
	// DestName is the name of the destination for this Flow. It represents one or more
	// destination pods that share a GenerateName.
	DestName string `protobuf:"bytes,4,opt,name=dest_name,json=destName,proto3" json:"dest_name,omitempty"`
	// DestNamespace is the namespace of the destination pods for this flow.
	DestNamespace string `protobuf:"bytes,5,opt,name=dest_namespace,json=destNamespace,proto3" json:"dest_namespace,omitempty"`
	// DestType is the type of the destination, used to contextualize the dest
	// name and namespace fields.
	DestType EndpointType `protobuf:"varint,6,opt,name=dest_type,json=destType,proto3,enum=goldmane.EndpointType" json:"dest_type,omitempty"`
	// DestPort is the destination port on the specified protocol accessed by this flow.
	DestPort int64 `protobuf:"varint,7,opt,name=dest_port,json=destPort,proto3" json:"dest_port,omitempty"`
	// DestServiceName is the name of the destination service, if any.
	DestServiceName string `protobuf:"bytes,8,opt,name=dest_service_name,json=destServiceName,proto3" json:"dest_service_name,omitempty"`
	// DestServiceNamespace is the namespace of the destination service, if any.
	DestServiceNamespace string `protobuf:"bytes,9,opt,name=dest_service_namespace,json=destServiceNamespace,proto3" json:"dest_service_namespace,omitempty"`
	// DestServicePortName is the name of the port on the destination service, if any.
	DestServicePortName string `protobuf:"bytes,10,opt,name=dest_service_port_name,json=destServicePortName,proto3" json:"dest_service_port_name,omitempty"`
	// DestServicePort is the port number on the destination service.
	DestServicePort int64 `protobuf:"varint,11,opt,name=dest_service_port,json=destServicePort,proto3" json:"dest_service_port,omitempty"`
	// Proto is the L4 protocol for this flow. For example, TCP, UDP, SCTP, ICMP.
	Proto string `protobuf:"bytes,12,opt,name=proto,proto3" json:"proto,omitempty"`
	// Reporter is either "src" or "dst", depending on whether this flow was generated
	// at the initiating or terminating end of the connection attempt.
	Reporter Reporter `protobuf:"varint,13,opt,name=reporter,proto3,enum=goldmane.Reporter" json:"reporter,omitempty"`
	// Action is the ultimate action taken on the flow.
	Action Action `protobuf:"varint,14,opt,name=action,proto3,enum=goldmane.Action" json:"action,omitempty"`
	// Policies includes an entry for each policy rule that took an action on the connections
	// aggregated into this flow.
	Policies      *PolicyTrace `protobuf:"bytes,15,opt,name=policies,proto3" json:"policies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowKey) Reset() {
	*x = FlowKey{}
	mi := &file_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowKey) ProtoMessage() {}

func (x *FlowKey) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowKey.ProtoReflect.Descriptor instead.
func (*FlowKey) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12}
}

func (x *FlowKey) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *FlowKey) GetSourceNamespace() string {
	if x != nil {
		return x.SourceNamespace
	}
	return ""
}

func (x *FlowKey) GetSourceType() EndpointType {
	if x != nil {
		return x.SourceType
	}
	return EndpointType_EndpointTypeUnspecified
}

func (x *FlowKey) GetDestName() string {
	if x != nil {
		return x.DestName
	}
	return ""
}

func (x *FlowKey) GetDestNamespace() string {
	if x != nil {
		return x.DestNamespace
	}
	return ""
}

func (x *FlowKey) GetDestType() EndpointType {
	if x != nil {
		return x.DestType
	}
	return EndpointType_EndpointTypeUnspecified
}

func (x *FlowKey) GetDestPort() int64 {
	if x != nil {
		return x.DestPort
	}
	return 0
}

func (x *FlowKey) GetDestServiceName() string {
	if x != nil {
		return x.DestServiceName
	}
	return ""
}

func (x *FlowKey) GetDestServiceNamespace() string {
	if x != nil {
		return x.DestServiceNamespace
	}
	return ""
}

func (x *FlowKey) GetDestServicePortName() string {
	if x != nil {
		return x.DestServicePortName
	}
	return ""
}

func (x *FlowKey) GetDestServicePort() int64 {
	if x != nil {
		return x.DestServicePort
	}
	return 0
}

func (x *FlowKey) GetProto() string {
	if x != nil {
		return x.Proto
	}
	return ""
}

func (x *FlowKey) GetReporter() Reporter {
	if x != nil {
		return x.Reporter
	}
	return Reporter_ReporterUnspecified
}

func (x *FlowKey) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_ActionUnspecified
}

func (x *FlowKey) GetPolicies() *PolicyTrace {
	if x != nil {
		return x.Policies
	}
	return nil
}

// Flow is a message representing statistics gathered about connections that share common fields,
// aggregated across either time, nodes, or both.
type Flow struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Key includes the identifying fields for this flow.
	Key *FlowKey `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	// StartTime is the start time for this flow. It is represented as the number of
	// seconds since the UNIX epoch.
	StartTime int64 `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// EndTime is the end time for this flow. It is always at least one aggregation
	// interval after the start time.
	EndTime int64 `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// SourceLabels contains the intersection of labels that appear on all source
	// pods that contributed to this flow.
	SourceLabels []string `protobuf:"bytes,4,rep,name=source_labels,json=sourceLabels,proto3" json:"source_labels,omitempty"`
	// SourceLabels contains the intersection of labels that appear on all destination
	// pods that contributed to this flow.
	DestLabels []string `protobuf:"bytes,5,rep,name=dest_labels,json=destLabels,proto3" json:"dest_labels,omitempty"`
	// Statistics.
	PacketsIn  int64 `protobuf:"varint,6,opt,name=packets_in,json=packetsIn,proto3" json:"packets_in,omitempty"`
	PacketsOut int64 `protobuf:"varint,7,opt,name=packets_out,json=packetsOut,proto3" json:"packets_out,omitempty"`
	BytesIn    int64 `protobuf:"varint,8,opt,name=bytes_in,json=bytesIn,proto3" json:"bytes_in,omitempty"`
	BytesOut   int64 `protobuf:"varint,9,opt,name=bytes_out,json=bytesOut,proto3" json:"bytes_out,omitempty"`
	// NumConnectionsStarted tracks the total number of new connections recorded for this Flow. It counts each
	// connection attempt that matches the FlowKey that was made between this Flow's StartTime and EndTime.
	NumConnectionsStarted int64 `protobuf:"varint,10,opt,name=num_connections_started,json=numConnectionsStarted,proto3" json:"num_connections_started,omitempty"`
	// NumConnectionsCompleted tracks the total number of completed TCP connections recorded for this Flow. It counts each
	// connection that matches the FlowKey that was completed between this Flow's StartTime and EndTime.
	NumConnectionsCompleted int64 `protobuf:"varint,11,opt,name=num_connections_completed,json=numConnectionsCompleted,proto3" json:"num_connections_completed,omitempty"`
	// NumConnectionsLive tracks the total number of still active connections recorded for this Flow. It counts each
	// connection that matches the FlowKey that was active at this Flow's EndTime.
	NumConnectionsLive int64 `protobuf:"varint,12,opt,name=num_connections_live,json=numConnectionsLive,proto3" json:"num_connections_live,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Flow) Reset() {
	*x = Flow{}
	mi := &file_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flow) ProtoMessage() {}

func (x *Flow) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flow.ProtoReflect.Descriptor instead.
func (*Flow) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{13}
}

func (x *Flow) GetKey() *FlowKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Flow) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Flow) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Flow) GetSourceLabels() []string {
	if x != nil {
		return x.SourceLabels
	}
	return nil
}

func (x *Flow) GetDestLabels() []string {
	if x != nil {
		return x.DestLabels
	}
	return nil
}

func (x *Flow) GetPacketsIn() int64 {
	if x != nil {
		return x.PacketsIn
	}
	return 0
}

func (x *Flow) GetPacketsOut() int64 {
	if x != nil {
		return x.PacketsOut
	}
	return 0
}

func (x *Flow) GetBytesIn() int64 {
	if x != nil {
		return x.BytesIn
	}
	return 0
}

func (x *Flow) GetBytesOut() int64 {
	if x != nil {
		return x.BytesOut
	}
	return 0
}

func (x *Flow) GetNumConnectionsStarted() int64 {
	if x != nil {
		return x.NumConnectionsStarted
	}
	return 0
}

func (x *Flow) GetNumConnectionsCompleted() int64 {
	if x != nil {
		return x.NumConnectionsCompleted
	}
	return 0
}

func (x *Flow) GetNumConnectionsLive() int64 {
	if x != nil {
		return x.NumConnectionsLive
	}
	return 0
}

type PolicyTrace struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// EnforcedPolicies shows the active dataplane policy rules traversed by this Flow.
	EnforcedPolicies []*PolicyHit `protobuf:"bytes,1,rep,name=enforced_policies,json=enforcedPolicies,proto3" json:"enforced_policies,omitempty"`
	// PendingPolicies shows the expected policy rules traversed by this Flow when including
	// staged policies.
	PendingPolicies []*PolicyHit `protobuf:"bytes,2,rep,name=pending_policies,json=pendingPolicies,proto3" json:"pending_policies,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PolicyTrace) Reset() {
	*x = PolicyTrace{}
	mi := &file_api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyTrace) ProtoMessage() {}

func (x *PolicyTrace) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyTrace.ProtoReflect.Descriptor instead.
func (*PolicyTrace) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{14}
}

func (x *PolicyTrace) GetEnforcedPolicies() []*PolicyHit {
	if x != nil {
		return x.EnforcedPolicies
	}
	return nil
}

func (x *PolicyTrace) GetPendingPolicies() []*PolicyHit {
	if x != nil {
		return x.PendingPolicies
	}
	return nil
}

// PolicyHit represents a policy rule that was traversed by this flow. It can be either an enforced policy hit
// from the dataplane, or a staged policy hit that is not yet active.
type PolicyHit struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Kind corresponds to the resource Kind for the policy.
	Kind PolicyKind `protobuf:"varint,1,opt,name=kind,proto3,enum=goldmane.PolicyKind" json:"kind,omitempty"`
	// Namespace is the Kubernetes namespace of the Policy, if namespaced. It is empty for global /
	// cluster-scoped policy kinds.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name is the Name of the policy object.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Tier is the Tier of the policy object.
	Tier string `protobuf:"bytes,4,opt,name=tier,proto3" json:"tier,omitempty"`
	// Action is the action taken by this policy rule.
	Action Action `protobuf:"varint,5,opt,name=action,proto3,enum=goldmane.Action" json:"action,omitempty"`
	// PolicyIndex is the order of the Policy among all policies traversed.
	PolicyIndex int64 `protobuf:"varint,6,opt,name=policy_index,json=policyIndex,proto3" json:"policy_index,omitempty"`
	// RuleIndex is the order of the Rule within the Policy rules.
	RuleIndex int64 `protobuf:"varint,7,opt,name=rule_index,json=ruleIndex,proto3" json:"rule_index,omitempty"`
	// Trigger indicates the first policy that selected this Flow and thus triggered the tier's
	// end-of-tier action. This is only valid for kind=EndOfTier, and is nil otherwise.
	Trigger       *PolicyHit `protobuf:"bytes,8,opt,name=trigger,proto3" json:"trigger,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolicyHit) Reset() {
	*x = PolicyHit{}
	mi := &file_api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyHit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyHit) ProtoMessage() {}

func (x *PolicyHit) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyHit.ProtoReflect.Descriptor instead.
func (*PolicyHit) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{15}
}

func (x *PolicyHit) GetKind() PolicyKind {
	if x != nil {
		return x.Kind
	}
	return PolicyKind_KindUnspecified
}

func (x *PolicyHit) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PolicyHit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PolicyHit) GetTier() string {
	if x != nil {
		return x.Tier
	}
	return ""
}

func (x *PolicyHit) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_ActionUnspecified
}

func (x *PolicyHit) GetPolicyIndex() int64 {
	if x != nil {
		return x.PolicyIndex
	}
	return 0
}

func (x *PolicyHit) GetRuleIndex() int64 {
	if x != nil {
		return x.RuleIndex
	}
	return 0
}

func (x *PolicyHit) GetTrigger() *PolicyHit {
	if x != nil {
		return x.Trigger
	}
	return nil
}

type StatisticsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The start time from which to collect statistics (inclusive).
	//
	// - A value of zero indicates the oldest start time available by the server.
	// - A value greater than zero indicates an absolute time in seconds since the Unix epoch.
	// - A value less than zero indicates a relative number of seconds from "now", as determined by the server.
	StartTimeGte int64 `protobuf:"varint,1,opt,name=start_time_gte,json=startTimeGte,proto3" json:"start_time_gte,omitempty"`
	// The end time indicates the end of the windows from which to collect statistics.
	//
	// - A value of zero means "now", as determined by the server at the time of request.
	// - A value greater than zero indicates an absolute time in seconds since the Unix epoch.
	// - A value less than zero indicates a relative number of seconds from "now", as determined by the server.
	StartTimeLt int64 `protobuf:"varint,2,opt,name=start_time_lt,json=startTimeLt,proto3" json:"start_time_lt,omitempty"`
	// Type is the type of statistic to return. e.g., packets, bytes, etc.
	Type StatisticType `protobuf:"varint,3,opt,name=type,proto3,enum=goldmane.StatisticType" json:"type,omitempty"`
	// Configure statistics aggregation.
	// - Policy: each StatisticsResult will contain statistics for a particular policy.
	// - PolicyRule: each StatisticsResult will contain statistics for a particular policy rule.
	// - Any: return both per-Policy and per-PolicyRule results.
	GroupBy StatisticsGroupBy `protobuf:"varint,4,opt,name=group_by,json=groupBy,proto3,enum=goldmane.StatisticsGroupBy" json:"group_by,omitempty"`
	// Optionally configure fields to filter results. If provided, any policies not matching the PolicyMatch
	// will be omitted from the results.
	PolicyMatch *PolicyMatch `protobuf:"bytes,5,opt,name=policy_match,json=policyMatch,proto3" json:"policy_match,omitempty"`
	// TimeSeries configures whether or not to return time-series data in the response. If true,
	// the response will include multiple datapoints over the given time window. If false, data
	// across the time window will be aggregated into a single data point.
	TimeSeries    bool `protobuf:"varint,6,opt,name=time_series,json=timeSeries,proto3" json:"time_series,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatisticsRequest) Reset() {
	*x = StatisticsRequest{}
	mi := &file_api_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsRequest) ProtoMessage() {}

func (x *StatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsRequest.ProtoReflect.Descriptor instead.
func (*StatisticsRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{16}
}

func (x *StatisticsRequest) GetStartTimeGte() int64 {
	if x != nil {
		return x.StartTimeGte
	}
	return 0
}

func (x *StatisticsRequest) GetStartTimeLt() int64 {
	if x != nil {
		return x.StartTimeLt
	}
	return 0
}

func (x *StatisticsRequest) GetType() StatisticType {
	if x != nil {
		return x.Type
	}
	return StatisticType_PacketCount
}

func (x *StatisticsRequest) GetGroupBy() StatisticsGroupBy {
	if x != nil {
		return x.GroupBy
	}
	return StatisticsGroupBy_Policy
}

func (x *StatisticsRequest) GetPolicyMatch() *PolicyMatch {
	if x != nil {
		return x.PolicyMatch
	}
	return nil
}

func (x *StatisticsRequest) GetTimeSeries() bool {
	if x != nil {
		return x.TimeSeries
	}
	return false
}

type StatisticsResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Policy identifies the policy / rule for which this data applies. Its meaning is contextualized
	// by the GroupBy field.
	//
	//   - StatisticsGroupBy_Policy: this field represents the specific Policy, and statistics are aggregated across all
	//     rules within that policy. Rule identifiers (Action, RuleID) will be omitted.
	//
	//   - StatisticsGroupBy_PolicyRule: this field identifies a specific rule within a Policy, and statistics are scoped to
	//     that particular rule.
	Policy *PolicyHit `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	// For statistics results targeting a specific policy rule, the direction
	// contextualizes the rule ID as either an ingress or egress rule.
	//
	// For statistics results grouped by policy, both ingress and egress statistics will be included.
	Direction RuleDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=goldmane.RuleDirection" json:"direction,omitempty"`
	// GroupBy indicates whether the statistics in this result are aggregated for a policy, or for
	// a specific rule within that policy.
	GroupBy StatisticsGroupBy `protobuf:"varint,3,opt,name=group_by,json=groupBy,proto3,enum=goldmane.StatisticsGroupBy" json:"group_by,omitempty"`
	// Type indicates the type of data carried in this result. e.g., PacketCount vs ByteCount.
	Type StatisticType `protobuf:"varint,4,opt,name=type,proto3,enum=goldmane.StatisticType" json:"type,omitempty"`
	// AllowedIn contains the count of the requested statistic that was allowed for ingress flows.
	// The semantic meaning (e.g., packets vs bytes) is indicated by the Type field.
	AllowedIn  []int64 `protobuf:"varint,5,rep,packed,name=allowed_in,json=allowedIn,proto3" json:"allowed_in,omitempty"`
	AllowedOut []int64 `protobuf:"varint,6,rep,packed,name=allowed_out,json=allowedOut,proto3" json:"allowed_out,omitempty"`
	DeniedIn   []int64 `protobuf:"varint,7,rep,packed,name=denied_in,json=deniedIn,proto3" json:"denied_in,omitempty"`
	DeniedOut  []int64 `protobuf:"varint,8,rep,packed,name=denied_out,json=deniedOut,proto3" json:"denied_out,omitempty"`
	PassedIn   []int64 `protobuf:"varint,9,rep,packed,name=passed_in,json=passedIn,proto3" json:"passed_in,omitempty"`
	PassedOut  []int64 `protobuf:"varint,10,rep,packed,name=passed_out,json=passedOut,proto3" json:"passed_out,omitempty"`
	// X is the x axis of the data for time-series data. i.e., the timestamp. For non-timeseries data,
	// this will be nil.
	X             []int64 `protobuf:"varint,11,rep,packed,name=x,proto3" json:"x,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatisticsResult) Reset() {
	*x = StatisticsResult{}
	mi := &file_api_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatisticsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsResult) ProtoMessage() {}

func (x *StatisticsResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsResult.ProtoReflect.Descriptor instead.
func (*StatisticsResult) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{17}
}

func (x *StatisticsResult) GetPolicy() *PolicyHit {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *StatisticsResult) GetDirection() RuleDirection {
	if x != nil {
		return x.Direction
	}
	return RuleDirection_Any
}

func (x *StatisticsResult) GetGroupBy() StatisticsGroupBy {
	if x != nil {
		return x.GroupBy
	}
	return StatisticsGroupBy_Policy
}

func (x *StatisticsResult) GetType() StatisticType {
	if x != nil {
		return x.Type
	}
	return StatisticType_PacketCount
}

func (x *StatisticsResult) GetAllowedIn() []int64 {
	if x != nil {
		return x.AllowedIn
	}
	return nil
}

func (x *StatisticsResult) GetAllowedOut() []int64 {
	if x != nil {
		return x.AllowedOut
	}
	return nil
}

func (x *StatisticsResult) GetDeniedIn() []int64 {
	if x != nil {
		return x.DeniedIn
	}
	return nil
}

func (x *StatisticsResult) GetDeniedOut() []int64 {
	if x != nil {
		return x.DeniedOut
	}
	return nil
}

func (x *StatisticsResult) GetPassedIn() []int64 {
	if x != nil {
		return x.PassedIn
	}
	return nil
}

func (x *StatisticsResult) GetPassedOut() []int64 {
	if x != nil {
		return x.PassedOut
	}
	return nil
}

func (x *StatisticsResult) GetX() []int64 {
	if x != nil {
		return x.X
	}
	return nil
}

var File_api_proto protoreflect.FileDescriptor

var file_api_proto_rawDesc = string([]byte{
	0x0a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x67, 0x6f, 0x6c,
	0x64, 0x6d, 0x61, 0x6e, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x0f, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x67, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x74, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x4c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x2d, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x53, 0x6f,
	0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79,
	0x12, 0x28, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x96, 0x01,
	0x0a, 0x11, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x67, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x6c, 0x64,
	0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xb2, 0x01, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61,
	0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x67, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x47, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x74, 0x22, 0x22, 0x0a, 0x0a, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x40, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a,
	0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x6f,
	0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x66, 0x6c, 0x6f,
	0x77, 0x22, 0xc4, 0x03, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0c,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x64, 0x65,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x09, 0x64, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x3e, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6c, 0x64,
	0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x33, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x6c, 0x64,
	0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x09,
	0x64, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x6c,
	0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61,
	0x6e, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x08,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67, 0x6f,
	0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x1f, 0x0a, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x37, 0x0a, 0x0a, 0x53, 0x6f, 0x72, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e,
	0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79,
	0x22, 0xa7, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x28, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0d, 0x0a, 0x0b, 0x46, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x22, 0x30, 0x0a, 0x0a, 0x46, 0x6c, 0x6f,
	0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x8a, 0x05, 0x0a, 0x07,
	0x46, 0x6c, 0x6f, 0x77, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d,
	0x61, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x33, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x64, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x73,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2e, 0x0a, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f,
	0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61,
	0x6e, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x08,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0xc9, 0x03, 0x0a, 0x04, 0x46, 0x6c, 0x6f,
	0x77, 0x12, 0x23, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x74,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x5f, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x49, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x5f, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x79, 0x74, 0x65, 0x73, 0x49,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x36,
	0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x6e, 0x75, 0x6d, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x4c, 0x69, 0x76, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x11, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x48, 0x69, 0x74, 0x52, 0x10, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x10, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x48, 0x69, 0x74, 0x52, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x96, 0x02, 0x0a, 0x09, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x48, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x69, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x2d, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x48, 0x69, 0x74, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22,
	0x9d, 0x02, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x67, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x74, 0x12,
	0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6c,
	0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22,
	0xa1, 0x03, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x69, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x35, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e,
	0x52, 0x75, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6c,
	0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79,
	0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x08, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65,
	0x6e, 0x69, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09,
	0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x73,
	0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64,
	0x5f, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x01, 0x78, 0x2a, 0x94, 0x01, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x44, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x44, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x10,
	0x02, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x10, 0x03,
	0x12, 0x18, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x54, 0x69, 0x65, 0x72, 0x10, 0x04, 0x2a, 0x3e, 0x0a, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x65, 0x6e, 0x79, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x50, 0x61, 0x73, 0x73, 0x10, 0x03, 0x2a, 0x21, 0x0a, 0x09, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x78, 0x61, 0x63, 0x74,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x10, 0x01, 0x2a, 0x95, 0x02,
	0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x13, 0x0a, 0x0f,
	0x4b, 0x69, 0x6e, 0x64, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x61, 0x6c, 0x69, 0x63, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x67, 0x65, 0x64, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x64, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x10, 0x05, 0x12, 0x11,
	0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x10,
	0x06, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x61, 0x73,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x54,
	0x69, 0x65, 0x72, 0x10, 0x0a, 0x2a, 0x76, 0x0a, 0x06, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x10, 0x05, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x06, 0x2a, 0x70, 0x0a,
	0x0c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x17, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x48, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74,
	0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x10, 0x04, 0x2a,
	0x35, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x13, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x72, 0x63, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x44, 0x73, 0x74, 0x10, 0x02, 0x2a, 0x48, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x79, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x02,
	0x2a, 0x2f, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x10,
	0x01, 0x2a, 0x31, 0x0a, 0x0d, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6e, 0x79, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x10, 0x02, 0x32, 0xc6, 0x01, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x39,
	0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e,
	0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x3d, 0x0a, 0x06, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x43, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61,
	0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x69, 0x6e, 0x74, 0x30, 0x01, 0x32, 0x4b, 0x0a,
	0x0d, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3a,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x14, 0x2e, 0x67, 0x6f, 0x6c, 0x64,
	0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a,
	0x15, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x28, 0x01, 0x30, 0x01, 0x32, 0x4f, 0x0a, 0x0a, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x41, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x67, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x42, 0x09, 0x5a, 0x07, 0x2e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_api_proto_rawDescOnce sync.Once
	file_api_proto_rawDescData []byte
)

func file_api_proto_rawDescGZIP() []byte {
	file_api_proto_rawDescOnce.Do(func() {
		file_api_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_proto_rawDesc), len(file_api_proto_rawDesc)))
	})
	return file_api_proto_rawDescData
}

var file_api_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_api_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_api_proto_goTypes = []any{
	(FilterType)(0),            // 0: goldmane.FilterType
	(Action)(0),                // 1: goldmane.Action
	(MatchType)(0),             // 2: goldmane.MatchType
	(PolicyKind)(0),            // 3: goldmane.PolicyKind
	(SortBy)(0),                // 4: goldmane.SortBy
	(EndpointType)(0),          // 5: goldmane.EndpointType
	(Reporter)(0),              // 6: goldmane.Reporter
	(StatisticType)(0),         // 7: goldmane.StatisticType
	(StatisticsGroupBy)(0),     // 8: goldmane.StatisticsGroupBy
	(RuleDirection)(0),         // 9: goldmane.RuleDirection
	(*FlowListRequest)(nil),    // 10: goldmane.FlowListRequest
	(*FlowStreamRequest)(nil),  // 11: goldmane.FlowStreamRequest
	(*FilterHintsRequest)(nil), // 12: goldmane.FilterHintsRequest
	(*FilterHint)(nil),         // 13: goldmane.FilterHint
	(*FlowResult)(nil),         // 14: goldmane.FlowResult
	(*Filter)(nil),             // 15: goldmane.Filter
	(*StringMatch)(nil),        // 16: goldmane.StringMatch
	(*PortMatch)(nil),          // 17: goldmane.PortMatch
	(*SortOption)(nil),         // 18: goldmane.SortOption
	(*PolicyMatch)(nil),        // 19: goldmane.PolicyMatch
	(*FlowReceipt)(nil),        // 20: goldmane.FlowReceipt
	(*FlowUpdate)(nil),         // 21: goldmane.FlowUpdate
	(*FlowKey)(nil),            // 22: goldmane.FlowKey
	(*Flow)(nil),               // 23: goldmane.Flow
	(*PolicyTrace)(nil),        // 24: goldmane.PolicyTrace
	(*PolicyHit)(nil),          // 25: goldmane.PolicyHit
	(*StatisticsRequest)(nil),  // 26: goldmane.StatisticsRequest
	(*StatisticsResult)(nil),   // 27: goldmane.StatisticsResult
}
var file_api_proto_depIdxs = []int32{
	18, // 0: goldmane.FlowListRequest.sort_by:type_name -> goldmane.SortOption
	15, // 1: goldmane.FlowListRequest.filter:type_name -> goldmane.Filter
	15, // 2: goldmane.FlowStreamRequest.filter:type_name -> goldmane.Filter
	0,  // 3: goldmane.FilterHintsRequest.type:type_name -> goldmane.FilterType
	15, // 4: goldmane.FilterHintsRequest.filter:type_name -> goldmane.Filter
	23, // 5: goldmane.FlowResult.flow:type_name -> goldmane.Flow
	16, // 6: goldmane.Filter.source_names:type_name -> goldmane.StringMatch
	16, // 7: goldmane.Filter.source_namespaces:type_name -> goldmane.StringMatch
	16, // 8: goldmane.Filter.dest_names:type_name -> goldmane.StringMatch
	16, // 9: goldmane.Filter.dest_namespaces:type_name -> goldmane.StringMatch
	16, // 10: goldmane.Filter.protocols:type_name -> goldmane.StringMatch
	17, // 11: goldmane.Filter.dest_ports:type_name -> goldmane.PortMatch
	1,  // 12: goldmane.Filter.actions:type_name -> goldmane.Action
	19, // 13: goldmane.Filter.policies:type_name -> goldmane.PolicyMatch
	2,  // 14: goldmane.StringMatch.type:type_name -> goldmane.MatchType
	4,  // 15: goldmane.SortOption.sort_by:type_name -> goldmane.SortBy
	3,  // 16: goldmane.PolicyMatch.kind:type_name -> goldmane.PolicyKind
	1,  // 17: goldmane.PolicyMatch.action:type_name -> goldmane.Action
	23, // 18: goldmane.FlowUpdate.flow:type_name -> goldmane.Flow
	5,  // 19: goldmane.FlowKey.source_type:type_name -> goldmane.EndpointType
	5,  // 20: goldmane.FlowKey.dest_type:type_name -> goldmane.EndpointType
	6,  // 21: goldmane.FlowKey.reporter:type_name -> goldmane.Reporter
	1,  // 22: goldmane.FlowKey.action:type_name -> goldmane.Action
	24, // 23: goldmane.FlowKey.policies:type_name -> goldmane.PolicyTrace
	22, // 24: goldmane.Flow.Key:type_name -> goldmane.FlowKey
	25, // 25: goldmane.PolicyTrace.enforced_policies:type_name -> goldmane.PolicyHit
	25, // 26: goldmane.PolicyTrace.pending_policies:type_name -> goldmane.PolicyHit
	3,  // 27: goldmane.PolicyHit.kind:type_name -> goldmane.PolicyKind
	1,  // 28: goldmane.PolicyHit.action:type_name -> goldmane.Action
	25, // 29: goldmane.PolicyHit.trigger:type_name -> goldmane.PolicyHit
	7,  // 30: goldmane.StatisticsRequest.type:type_name -> goldmane.StatisticType
	8,  // 31: goldmane.StatisticsRequest.group_by:type_name -> goldmane.StatisticsGroupBy
	19, // 32: goldmane.StatisticsRequest.policy_match:type_name -> goldmane.PolicyMatch
	25, // 33: goldmane.StatisticsResult.policy:type_name -> goldmane.PolicyHit
	9,  // 34: goldmane.StatisticsResult.direction:type_name -> goldmane.RuleDirection
	8,  // 35: goldmane.StatisticsResult.group_by:type_name -> goldmane.StatisticsGroupBy
	7,  // 36: goldmane.StatisticsResult.type:type_name -> goldmane.StatisticType
	10, // 37: goldmane.Flows.List:input_type -> goldmane.FlowListRequest
	11, // 38: goldmane.Flows.Stream:input_type -> goldmane.FlowStreamRequest
	12, // 39: goldmane.Flows.FilterHints:input_type -> goldmane.FilterHintsRequest
	21, // 40: goldmane.FlowCollector.Connect:input_type -> goldmane.FlowUpdate
	26, // 41: goldmane.Statistics.List:input_type -> goldmane.StatisticsRequest
	14, // 42: goldmane.Flows.List:output_type -> goldmane.FlowResult
	14, // 43: goldmane.Flows.Stream:output_type -> goldmane.FlowResult
	13, // 44: goldmane.Flows.FilterHints:output_type -> goldmane.FilterHint
	20, // 45: goldmane.FlowCollector.Connect:output_type -> goldmane.FlowReceipt
	27, // 46: goldmane.Statistics.List:output_type -> goldmane.StatisticsResult
	42, // [42:47] is the sub-list for method output_type
	37, // [37:42] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_api_proto_init() }
func file_api_proto_init() {
	if File_api_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_proto_rawDesc), len(file_api_proto_rawDesc)),
			NumEnums:      10,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_api_proto_goTypes,
		DependencyIndexes: file_api_proto_depIdxs,
		EnumInfos:         file_api_proto_enumTypes,
		MessageInfos:      file_api_proto_msgTypes,
	}.Build()
	File_api_proto = out.File
	file_api_proto_goTypes = nil
	file_api_proto_depIdxs = nil
}
