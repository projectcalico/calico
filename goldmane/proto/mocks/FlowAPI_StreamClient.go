// Copyright (c) 2025 Tigera, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	metadata "google.golang.org/grpc/metadata"

	proto "github.com/projectcalico/calico/goldmane/proto"
)

// FlowAPI_StreamClient is an autogenerated mock type for the FlowAPI_StreamClient type
type FlowAPI_StreamClient[Res any] struct {
	mock.Mock
}

type FlowAPI_StreamClient_Expecter[Res any] struct {
	mock *mock.Mock
}

func (_m *FlowAPI_StreamClient[Res]) EXPECT() *FlowAPI_StreamClient_Expecter[Res] {
	return &FlowAPI_StreamClient_Expecter[Res]{mock: &_m.Mock}
}

// CloseSend provides a mock function with no fields
func (_m *FlowAPI_StreamClient[Res]) CloseSend() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseSend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FlowAPI_StreamClient_CloseSend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseSend'
type FlowAPI_StreamClient_CloseSend_Call[Res any] struct {
	*mock.Call
}

// CloseSend is a helper method to define mock.On call
func (_e *FlowAPI_StreamClient_Expecter[Res]) CloseSend() *FlowAPI_StreamClient_CloseSend_Call[Res] {
	return &FlowAPI_StreamClient_CloseSend_Call[Res]{Call: _e.mock.On("CloseSend")}
}

func (_c *FlowAPI_StreamClient_CloseSend_Call[Res]) Run(run func()) *FlowAPI_StreamClient_CloseSend_Call[Res] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FlowAPI_StreamClient_CloseSend_Call[Res]) Return(_a0 error) *FlowAPI_StreamClient_CloseSend_Call[Res] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlowAPI_StreamClient_CloseSend_Call[Res]) RunAndReturn(run func() error) *FlowAPI_StreamClient_CloseSend_Call[Res] {
	_c.Call.Return(run)
	return _c
}

// Context provides a mock function with no fields
func (_m *FlowAPI_StreamClient[Res]) Context() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// FlowAPI_StreamClient_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type FlowAPI_StreamClient_Context_Call[Res any] struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *FlowAPI_StreamClient_Expecter[Res]) Context() *FlowAPI_StreamClient_Context_Call[Res] {
	return &FlowAPI_StreamClient_Context_Call[Res]{Call: _e.mock.On("Context")}
}

func (_c *FlowAPI_StreamClient_Context_Call[Res]) Run(run func()) *FlowAPI_StreamClient_Context_Call[Res] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FlowAPI_StreamClient_Context_Call[Res]) Return(_a0 context.Context) *FlowAPI_StreamClient_Context_Call[Res] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlowAPI_StreamClient_Context_Call[Res]) RunAndReturn(run func() context.Context) *FlowAPI_StreamClient_Context_Call[Res] {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function with no fields
func (_m *FlowAPI_StreamClient[Res]) Header() (metadata.MD, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Header")
	}

	var r0 metadata.MD
	var r1 error
	if rf, ok := ret.Get(0).(func() (metadata.MD, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() metadata.MD); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.MD)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlowAPI_StreamClient_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type FlowAPI_StreamClient_Header_Call[Res any] struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
func (_e *FlowAPI_StreamClient_Expecter[Res]) Header() *FlowAPI_StreamClient_Header_Call[Res] {
	return &FlowAPI_StreamClient_Header_Call[Res]{Call: _e.mock.On("Header")}
}

func (_c *FlowAPI_StreamClient_Header_Call[Res]) Run(run func()) *FlowAPI_StreamClient_Header_Call[Res] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FlowAPI_StreamClient_Header_Call[Res]) Return(_a0 metadata.MD, _a1 error) *FlowAPI_StreamClient_Header_Call[Res] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FlowAPI_StreamClient_Header_Call[Res]) RunAndReturn(run func() (metadata.MD, error)) *FlowAPI_StreamClient_Header_Call[Res] {
	_c.Call.Return(run)
	return _c
}

// Recv provides a mock function with no fields
func (_m *FlowAPI_StreamClient[Res]) Recv() (*proto.Flow, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Recv")
	}

	var r0 *proto.Flow
	var r1 error
	if rf, ok := ret.Get(0).(func() (*proto.Flow, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *proto.Flow); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Flow)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlowAPI_StreamClient_Recv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recv'
type FlowAPI_StreamClient_Recv_Call[Res any] struct {
	*mock.Call
}

// Recv is a helper method to define mock.On call
func (_e *FlowAPI_StreamClient_Expecter[Res]) Recv() *FlowAPI_StreamClient_Recv_Call[Res] {
	return &FlowAPI_StreamClient_Recv_Call[Res]{Call: _e.mock.On("Recv")}
}

func (_c *FlowAPI_StreamClient_Recv_Call[Res]) Run(run func()) *FlowAPI_StreamClient_Recv_Call[Res] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FlowAPI_StreamClient_Recv_Call[Res]) Return(_a0 *proto.Flow, _a1 error) *FlowAPI_StreamClient_Recv_Call[Res] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FlowAPI_StreamClient_Recv_Call[Res]) RunAndReturn(run func() (*proto.Flow, error)) *FlowAPI_StreamClient_Recv_Call[Res] {
	_c.Call.Return(run)
	return _c
}

// RecvMsg provides a mock function with given fields: m
func (_m *FlowAPI_StreamClient[Res]) RecvMsg(m any) error {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for RecvMsg")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(any) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FlowAPI_StreamClient_RecvMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecvMsg'
type FlowAPI_StreamClient_RecvMsg_Call[Res any] struct {
	*mock.Call
}

// RecvMsg is a helper method to define mock.On call
//   - m any
func (_e *FlowAPI_StreamClient_Expecter[Res]) RecvMsg(m interface{}) *FlowAPI_StreamClient_RecvMsg_Call[Res] {
	return &FlowAPI_StreamClient_RecvMsg_Call[Res]{Call: _e.mock.On("RecvMsg", m)}
}

func (_c *FlowAPI_StreamClient_RecvMsg_Call[Res]) Run(run func(m any)) *FlowAPI_StreamClient_RecvMsg_Call[Res] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any))
	})
	return _c
}

func (_c *FlowAPI_StreamClient_RecvMsg_Call[Res]) Return(_a0 error) *FlowAPI_StreamClient_RecvMsg_Call[Res] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlowAPI_StreamClient_RecvMsg_Call[Res]) RunAndReturn(run func(any) error) *FlowAPI_StreamClient_RecvMsg_Call[Res] {
	_c.Call.Return(run)
	return _c
}

// SendMsg provides a mock function with given fields: m
func (_m *FlowAPI_StreamClient[Res]) SendMsg(m any) error {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for SendMsg")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(any) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FlowAPI_StreamClient_SendMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMsg'
type FlowAPI_StreamClient_SendMsg_Call[Res any] struct {
	*mock.Call
}

// SendMsg is a helper method to define mock.On call
//   - m any
func (_e *FlowAPI_StreamClient_Expecter[Res]) SendMsg(m interface{}) *FlowAPI_StreamClient_SendMsg_Call[Res] {
	return &FlowAPI_StreamClient_SendMsg_Call[Res]{Call: _e.mock.On("SendMsg", m)}
}

func (_c *FlowAPI_StreamClient_SendMsg_Call[Res]) Run(run func(m any)) *FlowAPI_StreamClient_SendMsg_Call[Res] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any))
	})
	return _c
}

func (_c *FlowAPI_StreamClient_SendMsg_Call[Res]) Return(_a0 error) *FlowAPI_StreamClient_SendMsg_Call[Res] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlowAPI_StreamClient_SendMsg_Call[Res]) RunAndReturn(run func(any) error) *FlowAPI_StreamClient_SendMsg_Call[Res] {
	_c.Call.Return(run)
	return _c
}

// Trailer provides a mock function with no fields
func (_m *FlowAPI_StreamClient[Res]) Trailer() metadata.MD {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Trailer")
	}

	var r0 metadata.MD
	if rf, ok := ret.Get(0).(func() metadata.MD); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.MD)
		}
	}

	return r0
}

// FlowAPI_StreamClient_Trailer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Trailer'
type FlowAPI_StreamClient_Trailer_Call[Res any] struct {
	*mock.Call
}

// Trailer is a helper method to define mock.On call
func (_e *FlowAPI_StreamClient_Expecter[Res]) Trailer() *FlowAPI_StreamClient_Trailer_Call[Res] {
	return &FlowAPI_StreamClient_Trailer_Call[Res]{Call: _e.mock.On("Trailer")}
}

func (_c *FlowAPI_StreamClient_Trailer_Call[Res]) Run(run func()) *FlowAPI_StreamClient_Trailer_Call[Res] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FlowAPI_StreamClient_Trailer_Call[Res]) Return(_a0 metadata.MD) *FlowAPI_StreamClient_Trailer_Call[Res] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlowAPI_StreamClient_Trailer_Call[Res]) RunAndReturn(run func() metadata.MD) *FlowAPI_StreamClient_Trailer_Call[Res] {
	_c.Call.Return(run)
	return _c
}

// NewFlowAPI_StreamClient creates a new instance of FlowAPI_StreamClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFlowAPI_StreamClient[Res any](t interface {
	mock.TestingT
	Cleanup(func())
}) *FlowAPI_StreamClient[Res] {
	mock := &FlowAPI_StreamClient[Res]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
