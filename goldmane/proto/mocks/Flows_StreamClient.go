// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc/metadata"

	"github.com/projectcalico/calico/goldmane/proto"
)

// NewFlows_StreamClient creates a new instance of Flows_StreamClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFlows_StreamClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Flows_StreamClient {
	mock := &Flows_StreamClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Flows_StreamClient is an autogenerated mock type for the Flows_StreamClient type
type Flows_StreamClient struct {
	mock.Mock
}

type Flows_StreamClient_Expecter struct {
	mock *mock.Mock
}

func (_m *Flows_StreamClient) EXPECT() *Flows_StreamClient_Expecter {
	return &Flows_StreamClient_Expecter{mock: &_m.Mock}
}

// CloseSend provides a mock function for the type Flows_StreamClient
func (_mock *Flows_StreamClient) CloseSend() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseSend")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Flows_StreamClient_CloseSend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseSend'
type Flows_StreamClient_CloseSend_Call struct {
	*mock.Call
}

// CloseSend is a helper method to define mock.On call
func (_e *Flows_StreamClient_Expecter) CloseSend() *Flows_StreamClient_CloseSend_Call {
	return &Flows_StreamClient_CloseSend_Call{Call: _e.mock.On("CloseSend")}
}

func (_c *Flows_StreamClient_CloseSend_Call) Run(run func()) *Flows_StreamClient_CloseSend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Flows_StreamClient_CloseSend_Call) Return(err error) *Flows_StreamClient_CloseSend_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Flows_StreamClient_CloseSend_Call) RunAndReturn(run func() error) *Flows_StreamClient_CloseSend_Call {
	_c.Call.Return(run)
	return _c
}

// Context provides a mock function for the type Flows_StreamClient
func (_mock *Flows_StreamClient) Context() context.Context {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if returnFunc, ok := ret.Get(0).(func() context.Context); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	return r0
}

// Flows_StreamClient_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type Flows_StreamClient_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *Flows_StreamClient_Expecter) Context() *Flows_StreamClient_Context_Call {
	return &Flows_StreamClient_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *Flows_StreamClient_Context_Call) Run(run func()) *Flows_StreamClient_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Flows_StreamClient_Context_Call) Return(context1 context.Context) *Flows_StreamClient_Context_Call {
	_c.Call.Return(context1)
	return _c
}

func (_c *Flows_StreamClient_Context_Call) RunAndReturn(run func() context.Context) *Flows_StreamClient_Context_Call {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function for the type Flows_StreamClient
func (_mock *Flows_StreamClient) Header() (metadata.MD, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Header")
	}

	var r0 metadata.MD
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (metadata.MD, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() metadata.MD); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.MD)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Flows_StreamClient_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type Flows_StreamClient_Header_Call struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
func (_e *Flows_StreamClient_Expecter) Header() *Flows_StreamClient_Header_Call {
	return &Flows_StreamClient_Header_Call{Call: _e.mock.On("Header")}
}

func (_c *Flows_StreamClient_Header_Call) Run(run func()) *Flows_StreamClient_Header_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Flows_StreamClient_Header_Call) Return(mD metadata.MD, err error) *Flows_StreamClient_Header_Call {
	_c.Call.Return(mD, err)
	return _c
}

func (_c *Flows_StreamClient_Header_Call) RunAndReturn(run func() (metadata.MD, error)) *Flows_StreamClient_Header_Call {
	_c.Call.Return(run)
	return _c
}

// Recv provides a mock function for the type Flows_StreamClient
func (_mock *Flows_StreamClient) Recv() (*proto.FlowResult, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Recv")
	}

	var r0 *proto.FlowResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*proto.FlowResult, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *proto.FlowResult); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.FlowResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Flows_StreamClient_Recv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recv'
type Flows_StreamClient_Recv_Call struct {
	*mock.Call
}

// Recv is a helper method to define mock.On call
func (_e *Flows_StreamClient_Expecter) Recv() *Flows_StreamClient_Recv_Call {
	return &Flows_StreamClient_Recv_Call{Call: _e.mock.On("Recv")}
}

func (_c *Flows_StreamClient_Recv_Call) Run(run func()) *Flows_StreamClient_Recv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Flows_StreamClient_Recv_Call) Return(flowResult *proto.FlowResult, err error) *Flows_StreamClient_Recv_Call {
	_c.Call.Return(flowResult, err)
	return _c
}

func (_c *Flows_StreamClient_Recv_Call) RunAndReturn(run func() (*proto.FlowResult, error)) *Flows_StreamClient_Recv_Call {
	_c.Call.Return(run)
	return _c
}

// RecvMsg provides a mock function for the type Flows_StreamClient
func (_mock *Flows_StreamClient) RecvMsg(m any) error {
	ret := _mock.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for RecvMsg")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(m)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Flows_StreamClient_RecvMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecvMsg'
type Flows_StreamClient_RecvMsg_Call struct {
	*mock.Call
}

// RecvMsg is a helper method to define mock.On call
//   - m any
func (_e *Flows_StreamClient_Expecter) RecvMsg(m interface{}) *Flows_StreamClient_RecvMsg_Call {
	return &Flows_StreamClient_RecvMsg_Call{Call: _e.mock.On("RecvMsg", m)}
}

func (_c *Flows_StreamClient_RecvMsg_Call) Run(run func(m any)) *Flows_StreamClient_RecvMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Flows_StreamClient_RecvMsg_Call) Return(err error) *Flows_StreamClient_RecvMsg_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Flows_StreamClient_RecvMsg_Call) RunAndReturn(run func(m any) error) *Flows_StreamClient_RecvMsg_Call {
	_c.Call.Return(run)
	return _c
}

// SendMsg provides a mock function for the type Flows_StreamClient
func (_mock *Flows_StreamClient) SendMsg(m any) error {
	ret := _mock.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for SendMsg")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(m)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Flows_StreamClient_SendMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMsg'
type Flows_StreamClient_SendMsg_Call struct {
	*mock.Call
}

// SendMsg is a helper method to define mock.On call
//   - m any
func (_e *Flows_StreamClient_Expecter) SendMsg(m interface{}) *Flows_StreamClient_SendMsg_Call {
	return &Flows_StreamClient_SendMsg_Call{Call: _e.mock.On("SendMsg", m)}
}

func (_c *Flows_StreamClient_SendMsg_Call) Run(run func(m any)) *Flows_StreamClient_SendMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Flows_StreamClient_SendMsg_Call) Return(err error) *Flows_StreamClient_SendMsg_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Flows_StreamClient_SendMsg_Call) RunAndReturn(run func(m any) error) *Flows_StreamClient_SendMsg_Call {
	_c.Call.Return(run)
	return _c
}

// Trailer provides a mock function for the type Flows_StreamClient
func (_mock *Flows_StreamClient) Trailer() metadata.MD {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Trailer")
	}

	var r0 metadata.MD
	if returnFunc, ok := ret.Get(0).(func() metadata.MD); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.MD)
		}
	}
	return r0
}

// Flows_StreamClient_Trailer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Trailer'
type Flows_StreamClient_Trailer_Call struct {
	*mock.Call
}

// Trailer is a helper method to define mock.On call
func (_e *Flows_StreamClient_Expecter) Trailer() *Flows_StreamClient_Trailer_Call {
	return &Flows_StreamClient_Trailer_Call{Call: _e.mock.On("Trailer")}
}

func (_c *Flows_StreamClient_Trailer_Call) Run(run func()) *Flows_StreamClient_Trailer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Flows_StreamClient_Trailer_Call) Return(mD metadata.MD) *Flows_StreamClient_Trailer_Call {
	_c.Call.Return(mD)
	return _c
}

func (_c *Flows_StreamClient_Trailer_Call) RunAndReturn(run func() metadata.MD) *Flows_StreamClient_Trailer_Call {
	_c.Call.Return(run)
	return _c
}
