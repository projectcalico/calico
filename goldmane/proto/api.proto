syntax = "proto3";

package goldmane;

option go_package = "./proto";

// FlowService provides APIs for querying aggregated Flow data.
//
// The returned Flows will be aggregated across cluster nodes, as well as the specified aggregation
// time interval.
service FlowService {
  // List is an API call to query for one or more Flows.
  rpc List(FlowListRequest) returns (stream FlowResult);

  // Stream is an API call to return a long running stream of new Flows as they are generated.
  rpc Stream(FlowStreamRequest) returns (stream FlowResult);

  // FilterHints can be used to discover available filter criteria, such as
  // Namespaces and source / destination names. It allows progressive filtering of criteria based on
  // other filters. i.e., return the flow destinations given a source namespace.
  // Note that this API provides hints to the UI based on past flows and other values may be valid.
  rpc FilterHints(FilterHintsRequest) returns (stream FilterHint);
}

// FlowListRequest defines a message to request a particular selection of aggregated Flow objects.
message FlowListRequest {
  // StartTimeGt specifies the beginning of a time window with which to filter Flows. Flows
  // will be returned only if their start time occurs after the requested time.
  int64 start_time_gt = 1;

  // StartTimeLt specifies the end of a time window with which to filter flows. Flows will
  // be returned only if their start time occurs before the requested time.
  int64 start_time_lt = 2;

  // PageNumber specifies the page number to return. It requires that PageSize is also specified in order
  // to determine page boundaries. Note that pages may change over time as new flow data is collected or expired.
  // Querying the same page at different points in time may return different results.
  int64 page_number = 3;

  // PageSize configures the maximum number of results to return as part of this query.
  int64 page_size = 4;

  // SortBy configures how to sort the results of this query. By default flows are sorted by start time.
  // The returned list is sorted by each sort option, in order, using the next sort option in the list as a tie-breaker.
  // Note: At the moment, only a single sort option is supported.
  repeated SortOption sort_by = 5;

  // Filter allows specification of one or more criteria on which to filter the returned Flows.
  Filter filter = 6;

  // AggregationInterval is the width of the time window in seconds across which to aggregate when generating
  // Flows to return. This must be a multiple of 15.
  int64 aggregation_interval = 7;
}

// FlowStreamRequest defines a message to request a stream of aggregated Flows.
message FlowStreamRequest {
  // StartTimeGt specifies the beginning of a time window from which to stream Flows. Flows
  // will be streamed only if their start time occurs after the requested time.
  int64 start_time_gt = 1;

  // Filter allows specification of one or more criteria on which to filter the returned Flows.
  Filter filter = 2;

  // AggregationInterval defines both the frequency of streamed updates for each Flow, and the amount of time that FlowResult covers.
  // It must always be 15s.
  //
  // Every AggregationInterval the server must send a FlowResult containing the aggregated data for that Flow from a
  // time interval of width AggregationInterval.
  //
  // For a Flow that has continuous traffic, the server should send updates covering the range
  // [now-2*AggregationInterval, now-AggregationInterval] so that the data is reasonably likely to be complete.
  int64 aggregation_interval = 3;
}

message FilterHintsRequest {
  // Type is type of Filter to query.
  FilterType type = 1;

  // Filter is a set of filter criteria used to narrow down returned results.
  Filter filter = 2;

  // StartTimeGt specifies the beginning of a time window with which to filter.
  int64 start_time_gt = 3;

  // StartTimeLt specifies the end of a time window with which to filter.
  int64 start_time_lt = 4;
}

message FilterHint {
  string value = 1;
}

// FilterType specifies which fields on the underlying Flow data to collect.
enum FilterType {
  FilterTypeDestName = 0;
  FilterTypeSourceName = 1;
  FilterTypeDestNamespace = 2;
  FilterTypeSourceNamespace = 3;
  FilterTypePolicyTier = 4;
}

// FlowResult wraps a Flow object with additional metadata.
message FlowResult {
  // ID is an opaque integer value ID that can be used to identify a Flow, and is 1:1 with the FlowKey.
  // Note that this ID is not valid across server restarts. Its primary use-case is for correlating FlowResult
  // updates from a Stream request.
  int64 id = 1;

  // The Flow object itself.
  Flow flow = 2;
}

// Filter defines criteria for selecting a set of Flows based on their parameters.
message Filter {
  string source_name = 1;
  string source_namespace = 2;
  string dest_name = 3;
  string dest_namespace = 4;
  string protocol = 5;
  int64 dest_port = 6;
  string action = 7;
  PolicyMatch policy = 8;
}

message SortOption {
  // SortBy delcares the field by which to sort.
  SortBy sort_by = 1;
}

// PolicyMatch defines criteria for matching one or more policy rules within a Flow's
// policy trace.
message PolicyMatch {
  PolicyKind kind = 1;
  string tier = 2;
  string namespace = 3;
  string name = 4;
  string action = 5;
}

enum PolicyKind {
  // Unspecified
  KindUnspecified = 0;

  // Calico policy types.
  CalicoNetworkPolicy = 1;
  CalicoGlobalNetworkPolicy = 2;
  CalicoStagedNetworkPolicy = 3;
  CalicoStagedGlobalNetworkPolicy = 4;
  StagedKubernetesNetworkPolicy = 5;

  // Native Kubernetes types.
  NetworkPolicy = 6;
  AdminNetworkPolicy = 7;
  BaselineAdminNetworkPolicy = 8;

  // Calico Profiles.
  Profile = 9;
  EndOfTier = 10;
}

enum SortBy {
  Time = 0;
  DestName = 1;
  DestNamespace = 2;
  SourceName = 3;
  SourceNamespace = 4;
}

// FlowCollector provides APIs capable of receiving streams of Flow data from cluster nodes.
service FlowCollector {
  // Connect receives a connection that may stream one or more FlowUpdates. A FlowReceipt is returned
  // to the client by the server after each FlowUpdate.
  //
  // Following a connection or reconnection to the server, clients should duplicates of previously transmitted FlowsUpdates
  // in order to allow the server to rebuild its cache, as well as any new FlowUpdates that have not previously been transmitted.
  // The server is responsible for deduplicating where needed.
  rpc Connect(stream FlowUpdate) returns (stream FlowReceipt);
}

// FlowReceipt is a response from the server to a client after publishing a Flow.
message FlowReceipt {}

// FlowUpdate wraps a Flow with additional metadata.
message FlowUpdate {
  // Flow contains the actual flow being sent.
  Flow flow = 1;
}

// FlowKey includes the identifying fields for a Flow.
// - Source: Name, namespace, type, and labels.
// - Destination: Name, namespace, type, labels and port
// - Action taken on the connection.
// - Reporter (i.e., measured at source or destination).
// - Protocol of the connection (TCP, UDP, etc.).
message FlowKey {
  // SourceName is the name of the source for this Flow. It represents one or more
  // source pods that share a GenerateName.
  string source_name = 1;

  // SourceNamespace is the namespace of the source pods for this flow.
  string source_namespace = 2;

  // SourceType is the type of the source, used to contextualize the source
  // name and namespace fields.
  //
  // This can be one of:
  //
  // - wep: WorkloadEndpoint (i.e., Pod)
  // - hep: HostEndpoint
  // - ns: NetworkSet
  // - pub/pvt: External network (source name omitted)
  string source_type = 3;

  // DestName is the name of the destination for this Flow. It represents one or more
  // destination pods that share a GenerateName.
  string dest_name = 4;

  // DestNamespace is the namespace of the destination pods for this flow.
  string dest_namespace = 5;

  // DestType is the type of the destination, used to contextualize the dest
  // name and namespace fields.
  //
  // This can be one of:
  //
  // - wep: WorkloadEndpoint (i.e., Pod)
  // - hep: HostEndpoint
  // - ns: NetworkSet
  // - pub/pvt: External network (dest name omitted)
  string dest_type = 6;

  // DestPort is the destination port on the specified protocol accessed by this flow.
  int64 dest_port = 7;

  // DestServiceName is the name of the destination service, if any.
  string dest_service_name = 8;

  // DestServiceNamespace is the namespace of the destination service, if any.
  string dest_service_namespace = 9;

  // DestServicePortName is the name of the port on the destination service, if any.
  string dest_service_port_name = 10;

  // DestServicePort is the port number on the destination service.
  int64 dest_service_port = 11;

  // Proto is the L4 protocol for this flow. Either TCP or UDP.
  string proto = 12;

  // Reporter is either "src" or "dst", depending on whether this flow was generated
  // at the initiating or terminating end of the connection attempt.
  string reporter = 13;

  // Action is the ultimate action taken on the flow. Either Allow or Drop.
  string action = 14;

  // Policies includes an entry for each policy rule that took an action on the connections
  // aggregated into this flow.
  PolicyTrace policies = 15;
}

// Flow is a message representing statistics gathered about connections that share common fields,
// aggregated across either time, nodes, or both.
message Flow {
  // Key includes the identifying fields for this flow.
  FlowKey Key = 1;

  // StartTime is the start time for this flow. It is represented as the number of
  // seconds since the UNIX epoch.
  int64 start_time = 2;

  // EndTime is the end time for this flow. It is always exactly one aggregation
  // interval after the start time.
  int64 end_time = 3;

  // SourceLabels contains the intersection of labels that appear on all source
  // pods that contributed to this flow.
  repeated string source_labels = 4;

  // SourceLabels contains the intersection of labels that appear on all destination
  // pods that contributed to this flow.
  repeated string dest_labels = 5;

  // Statistics.
  int64 packets_in = 6;
  int64 packets_out = 7;
  int64 bytes_in = 8;
  int64 bytes_out = 9;

  // NumConnectionsStarted tracks the total number of new connections recorded for this Flow. It counts each
  // connection attempt that matches the FlowKey that was made between this Flow's StartTime and EndTime.
  int64 num_connections_started = 10;

  // NumConnectionsCompleted tracks the total number of completed TCP connections recorded for this Flow. It counts each
  // connection that matches the FlowKey that was completed between this Flow's StartTime and EndTime.
  int64 num_connections_completed = 11;

  // NumConnectionsLive tracks the total number of still active connections recorded for this Flow. It counts each
  // connection that matches the FlowKey that was active at this Flow's EndTime.
  int64 num_connections_live = 12;
}

message PolicyTrace {
  // EnforcedPolicies shows the active dataplane policy rules traversed by this Flow.
  repeated PolicyHit enforced_policies = 1;

  // PendingPolicies shows the expected policy rules traversed by this Flow when including
  // staged policies.
  repeated PolicyHit pending_policies = 2;
}

// PolicyHit represents a policy rule that was traversed by this flow. It can be either an enforced policy hit
// from the dataplane, or a staged policy hit that is not yet active.
message PolicyHit {
  // Kind corresponds to the resource Kind for the policy.
  PolicyKind kind = 1;

  // Namespace is the Kubernetes namespace of the Policy, if namespaced. It is empty for global /
  // cluster-scoped policy kinds.
  string namespace = 2;

  // Name is the Name of the policy object.
  string name = 3;

  // Tier is the Tier of the policy object.
  string tier = 4;

  // Action is the action taken by this policy rule.
  string action = 5;

  // PolicyIndex is the order of the Policy among all policies traversed.
  int64 policy_index = 6;

  // RuleIndex is the order of the Rule within the Policy rules.
  int64 rule_index = 7;

  // Trigger indicates the first policy that selected this Flow and thus triggered the tier's
  // end-of-tier action. This is only valid for kind=EndOfTier, and is nil otherwise.
  PolicyHit trigger = 8;
}
