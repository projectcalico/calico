// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/projectcalico/calico/goldmane/proto"
)

// FlowsClient is an autogenerated mock type for the FlowsClient type
type FlowsClient struct {
	mock.Mock
}

type FlowsClient_Expecter struct {
	mock *mock.Mock
}

func (_m *FlowsClient) EXPECT() *FlowsClient_Expecter {
	return &FlowsClient_Expecter{mock: &_m.Mock}
}

// FilterHints provides a mock function with given fields: ctx, req
func (_m *FlowsClient) FilterHints(ctx context.Context, req *proto.FilterHintsRequest) (*proto.ListMetadata, []*proto.FilterHint, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for FilterHints")
	}

	var r0 *proto.ListMetadata
	var r1 []*proto.FilterHint
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.FilterHintsRequest) (*proto.ListMetadata, []*proto.FilterHint, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.FilterHintsRequest) *proto.ListMetadata); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.FilterHintsRequest) []*proto.FilterHint); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*proto.FilterHint)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *proto.FilterHintsRequest) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FlowsClient_FilterHints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterHints'
type FlowsClient_FilterHints_Call struct {
	*mock.Call
}

// FilterHints is a helper method to define mock.On call
//   - ctx context.Context
//   - req *proto.FilterHintsRequest
func (_e *FlowsClient_Expecter) FilterHints(ctx interface{}, req interface{}) *FlowsClient_FilterHints_Call {
	return &FlowsClient_FilterHints_Call{Call: _e.mock.On("FilterHints", ctx, req)}
}

func (_c *FlowsClient_FilterHints_Call) Run(run func(ctx context.Context, req *proto.FilterHintsRequest)) *FlowsClient_FilterHints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.FilterHintsRequest))
	})
	return _c
}

func (_c *FlowsClient_FilterHints_Call) Return(_a0 *proto.ListMetadata, _a1 []*proto.FilterHint, _a2 error) *FlowsClient_FilterHints_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FlowsClient_FilterHints_Call) RunAndReturn(run func(context.Context, *proto.FilterHintsRequest) (*proto.ListMetadata, []*proto.FilterHint, error)) *FlowsClient_FilterHints_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: _a0, _a1
func (_m *FlowsClient) List(_a0 context.Context, _a1 *proto.FlowListRequest) (*proto.ListMetadata, []*proto.FlowResult, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *proto.ListMetadata
	var r1 []*proto.FlowResult
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.FlowListRequest) (*proto.ListMetadata, []*proto.FlowResult, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.FlowListRequest) *proto.ListMetadata); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.FlowListRequest) []*proto.FlowResult); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*proto.FlowResult)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *proto.FlowListRequest) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FlowsClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type FlowsClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.FlowListRequest
func (_e *FlowsClient_Expecter) List(_a0 interface{}, _a1 interface{}) *FlowsClient_List_Call {
	return &FlowsClient_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *FlowsClient_List_Call) Run(run func(_a0 context.Context, _a1 *proto.FlowListRequest)) *FlowsClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.FlowListRequest))
	})
	return _c
}

func (_c *FlowsClient_List_Call) Return(_a0 *proto.ListMetadata, _a1 []*proto.FlowResult, _a2 error) *FlowsClient_List_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FlowsClient_List_Call) RunAndReturn(run func(context.Context, *proto.FlowListRequest) (*proto.ListMetadata, []*proto.FlowResult, error)) *FlowsClient_List_Call {
	_c.Call.Return(run)
	return _c
}

// Stream provides a mock function with given fields: ctx, request
func (_m *FlowsClient) Stream(ctx context.Context, request *proto.FlowStreamRequest) (proto.Flows_StreamClient, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Stream")
	}

	var r0 proto.Flows_StreamClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.FlowStreamRequest) (proto.Flows_StreamClient, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.FlowStreamRequest) proto.Flows_StreamClient); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(proto.Flows_StreamClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.FlowStreamRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlowsClient_Stream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stream'
type FlowsClient_Stream_Call struct {
	*mock.Call
}

// Stream is a helper method to define mock.On call
//   - ctx context.Context
//   - request *proto.FlowStreamRequest
func (_e *FlowsClient_Expecter) Stream(ctx interface{}, request interface{}) *FlowsClient_Stream_Call {
	return &FlowsClient_Stream_Call{Call: _e.mock.On("Stream", ctx, request)}
}

func (_c *FlowsClient_Stream_Call) Run(run func(ctx context.Context, request *proto.FlowStreamRequest)) *FlowsClient_Stream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.FlowStreamRequest))
	})
	return _c
}

func (_c *FlowsClient_Stream_Call) Return(_a0 proto.Flows_StreamClient, _a1 error) *FlowsClient_Stream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FlowsClient_Stream_Call) RunAndReturn(run func(context.Context, *proto.FlowStreamRequest) (proto.Flows_StreamClient, error)) *FlowsClient_Stream_Call {
	_c.Call.Return(run)
	return _c
}

// NewFlowsClient creates a new instance of FlowsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFlowsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *FlowsClient {
	mock := &FlowsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
