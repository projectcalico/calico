// Copyright (c) 2025 Tigera, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/projectcalico/calico/goldmane/proto"
)

// FlowServiceClient is an autogenerated mock type for the FlowServiceClient type
type FlowServiceClient struct {
	mock.Mock
}

type FlowServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *FlowServiceClient) EXPECT() *FlowServiceClient_Expecter {
	return &FlowServiceClient_Expecter{mock: &_m.Mock}
}

// List provides a mock function with given fields: _a0, _a1
func (_m *FlowServiceClient) List(_a0 context.Context, _a1 *proto.FlowRequest) ([]*proto.Flow, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*proto.Flow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.FlowRequest) ([]*proto.Flow, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.FlowRequest) []*proto.Flow); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*proto.Flow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.FlowRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlowServiceClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type FlowServiceClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.FlowRequest
func (_e *FlowServiceClient_Expecter) List(_a0 interface{}, _a1 interface{}) *FlowServiceClient_List_Call {
	return &FlowServiceClient_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *FlowServiceClient_List_Call) Run(run func(_a0 context.Context, _a1 *proto.FlowRequest)) *FlowServiceClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.FlowRequest))
	})
	return _c
}

func (_c *FlowServiceClient_List_Call) Return(_a0 []*proto.Flow, _a1 error) *FlowServiceClient_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FlowServiceClient_List_Call) RunAndReturn(run func(context.Context, *proto.FlowRequest) ([]*proto.Flow, error)) *FlowServiceClient_List_Call {
	_c.Call.Return(run)
	return _c
}

// Stream provides a mock function with given fields: ctx, request
func (_m *FlowServiceClient) Stream(ctx context.Context, request *proto.FlowRequest) (proto.FlowAPI_StreamClient, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Stream")
	}

	var r0 proto.FlowAPI_StreamClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.FlowRequest) (proto.FlowAPI_StreamClient, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.FlowRequest) proto.FlowAPI_StreamClient); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(proto.FlowAPI_StreamClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.FlowRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlowServiceClient_Stream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stream'
type FlowServiceClient_Stream_Call struct {
	*mock.Call
}

// Stream is a helper method to define mock.On call
//   - ctx context.Context
//   - request *proto.FlowRequest
func (_e *FlowServiceClient_Expecter) Stream(ctx interface{}, request interface{}) *FlowServiceClient_Stream_Call {
	return &FlowServiceClient_Stream_Call{Call: _e.mock.On("Stream", ctx, request)}
}

func (_c *FlowServiceClient_Stream_Call) Run(run func(ctx context.Context, request *proto.FlowRequest)) *FlowServiceClient_Stream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.FlowRequest))
	})
	return _c
}

func (_c *FlowServiceClient_Stream_Call) Return(_a0 proto.FlowAPI_StreamClient, _a1 error) *FlowServiceClient_Stream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FlowServiceClient_Stream_Call) RunAndReturn(run func(context.Context, *proto.FlowRequest) (proto.FlowAPI_StreamClient, error)) *FlowServiceClient_Stream_Call {
	_c.Call.Return(run)
	return _c
}

// NewFlowServiceClient creates a new instance of FlowServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFlowServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *FlowServiceClient {
	mock := &FlowServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
