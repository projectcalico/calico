version: v1.0
name: Publish hashrelease
agent:
  machine:
    type: f1-standard-4
    os_image: ubuntu2004
execution_time_limit:
  hours: 4

global_job_config:
  secrets:
    - name: oss-release-secrets
    # Github SSH secret for pulling private repositories.
    - name: private-repo
    # Secret for GitHub API access.
    - name: marvin-github-token
    # Secret for pushing to the docs box.
    - name: docs-ssh
    # Secret for image registries
    - name: quay-hashrelease
    - name: docker
    - name: iss-image-scanning
    # Secrets for Slack notifications
    - name: releasebot-slack
  prologue:
    commands:
      - chmod 0600 ~/.keys/*
      - ssh-add ~/.keys/*
      # For some reason, /mnt is 100 GB and has a qemu-nbd image file.
      # Let's delete it and use it for our own purposes (building calico
      # without running out of space)
      - sudo killall qemu-nbd || true
      - sudo rm -f /mnt/docker.qcow2
      - sudo chown $(id -u):$(id -g) /mnt/
      - mkdir calico
      - sudo mount --bind /mnt calico
      # Checkout the code and unshallow it.
      # (this is going to throw an error because it can't remove
      # the `calico` directory, which is a mount, but it will
      # continue anyway)
      - checkout
      - retry git fetch --quiet --unshallow
      # Semaphore mounts a copy-on-write FS as /var/lib/docker in order to provide a pre-loaded cache of
      # some images. However, the cache is not useful to us and the copy-on-write FS is a big problem given
      # how much we churn docker containers during the build.  Disable it.
      - sudo systemctl stop docker
      - sudo umount /var/lib/docker && sudo killall qemu-nbd || true
      - sudo systemctl start docker
      # Log in to container registries needed for release.
      - echo $DOCKER_TOKEN | docker login --username "$DOCKER_USER" --password-stdin
      - echo $QUAY_TOKEN | docker login --username "$QUAY_USER" --password-stdin quay.io
      # Credentials for accessing gcloud, needed to push images to gcr
      - export GOOGLE_APPLICATION_CREDENTIALS=$HOME/secrets/gcr-credentials.json
      - gcloud auth activate-service-account --key-file=${GOOGLE_APPLICATION_CREDENTIALS}
      - gcloud auth configure-docker --quiet

blocks:
  - name: Publish hashrelease
    task:
      jobs:
        - name: Build and publish hashrelease
          commands:
            - if [[ ${SEMAPHORE_WORKFLOW_TRIGGERED_BY_SCHEDULE} == "true" ]]; then export BUILD_CONTAINER_IMAGES=true; export SKIP_PUBLISH_IMAGES=false; fi
            - make hashrelease
      prologue:
        commands:
          - export GITHUB_TOKEN=${MARVIN_GITHUB_TOKEN}
          - cd release
