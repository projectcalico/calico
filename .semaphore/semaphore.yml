# !! WARNING, DO NOT EDIT !! This file is generated from semaphore.yml.tpl.
# To update, modify the template and then run 'make gen-semaphore-yaml'.
version: v1.0
name: Calico
execution_time_limit:
  hours: 4
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu2004
auto_cancel:
  running:
    when: "branch != 'master'"
  queued:
    when: "branch != 'master'"
global_job_config:
  secrets:
    - name: docker-hub
  prologue:
    commands:
      - checkout
      - export REPO_DIR="$(pwd)"
      - mkdir artifacts
      # Semaphore is doing shallow clone on a commit without tags.
      # unshallow it for GIT_VERSION:=$(shell git describe --tags --dirty --always)
      - retry git fetch --unshallow
      # Semaphore mounts a copy-on-write FS as /var/lib/docker in order to provide a pre-loaded cache of
      # some images. However, the cache is not useful to us and the copy-on-write FS is a big problem given
      # how much we churn docker containers during the build.  Disable it.
      - sudo systemctl stop docker
      - sudo umount /var/lib/docker && sudo killall qemu-nbd || true
      - sudo systemctl start docker
      # Free up space on the build machine.
      - sudo rm -rf ~/{.kerl,.kiex,.npm,.nvm,.phpbrew,.rbenv,.sbt} /opt/{apache-maven*,firefox*,scala} /usr/lib/jvm /usr/local/{aws2,golang,phantomjs*}
      - echo $DOCKERHUB_PASSWORD | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
      # Disable initramfs update to save space on the Semaphore VM (and we don't need it because we're not going to reboot).
      - sudo apt-get install -y -u crudini
      - sudo crudini --set /etc/initramfs-tools/update-initramfs.conf '' update_initramfs no
      - cat /etc/initramfs-tools/update-initramfs.conf
  epilogue:
    commands:
      - cd "$REPO_DIR"
      - .semaphore/publish-artifacts
promotions:
  # Manual promotion for publishing a release.
  - name: Publish official release
    pipeline_file: release/release.yml
  # Cleanup after ourselves if we are stopped-short.
  - name: Cleanup
    pipeline_file: cleanup.yml
    auto_promote:
      when: "result = 'stopped'"
  # Have separate promotions for publishing images so we can re-run
  # them individually if they fail, and so we can run them in parallel.
  - name: Push apiserver images
    pipeline_file: push-images/apiserver.yml
    auto_promote:
      when: "branch =~ 'master|release-.*'"
  - name: Push ALP images
    pipeline_file: push-images/alp.yml
    auto_promote:
      when: "branch =~ 'master|release-'"
  - name: Push calicoctl images
    pipeline_file: push-images/calicoctl.yml
    auto_promote:
      when: "branch =~ 'master|release-'"
  - name: Push calico-node images
    pipeline_file: push-images/node.yml
    auto_promote:
      when: "branch =~ 'master|release-'"
  - name: Push cni-plugin images
    pipeline_file: push-images/cni-plugin.yml
    auto_promote:
      when: "branch =~ 'master|release-'"
  - name: Push key-cert-provisioner images
    pipeline_file: push-images/key-cert-provisioner.yml
    auto_promote:
      when: "branch =~ 'master|release-'"
  - name: Push kube-controllers images
    pipeline_file: push-images/kube-controllers.yml
    auto_promote:
      when: "branch =~ 'master|release-'"
  - name: Push pod2daemon images
    pipeline_file: push-images/pod2daemon.yml
    auto_promote:
      when: "branch =~ 'master|release-'"
  - name: Push typha images
    pipeline_file: push-images/typha.yml
    auto_promote:
      when: "branch =~ 'master|release-'"

  - name: Publish openstack packages
    pipeline_file: push-images/packaging.yaml
    auto_promote:
      when: "branch =~ 'master'"

  - name: Run Fossa scans
    pipeline_file: license-scanning/fossa-scan.yml
    auto_promote:
      when: "branch =~ 'master|release-.*'"

blocks:

- name: Prerequisites
  dependencies: []
  task:
    jobs:
      - name: Pre-flight checks
        commands:
          - make ci-preflight-checks

- name: cni-plugin0
  run:
    when: "true"
  dependencies:
    - Prerequisites
  task:
    prologue:
      commands:
        - cd cni-plugin
    jobs:
      - name: cni-plugin tests
        commands:
          - ../.semaphore/run-and-monitor ci.log make ci

- name: cni-plugin1
  run:
    when: "true"
  dependencies:
    - Prerequisites
  task:
    prologue:
      commands:
        - cd cni-plugin
    jobs:
      - name: cni-plugin tests
        commands:
          - ../.semaphore/run-and-monitor ci.log make ci

- name: cni-plugin2
  run:
    when: "true"
  dependencies:
    - Prerequisites
  task:
    prologue:
      commands:
        - cd cni-plugin
    jobs:
      - name: cni-plugin tests
        commands:
          - ../.semaphore/run-and-monitor ci.log make ci

- name: cni-plugin3
  run:
    when: "true"
  dependencies:
    - Prerequisites
  task:
    prologue:
      commands:
        - cd cni-plugin
    jobs:
      - name: cni-plugin tests
        commands:
          - ../.semaphore/run-and-monitor ci.log make ci

- name: cni-plugin4
  run:
    when: "true"
  dependencies:
    - Prerequisites
  task:
    prologue:
      commands:
        - cd cni-plugin
    jobs:
      - name: cni-plugin tests
        commands:
          - ../.semaphore/run-and-monitor ci.log make ci

- name: cni-plugin5
  run:
    when: "true"
  dependencies:
    - Prerequisites
  task:
    prologue:
      commands:
        - cd cni-plugin
    jobs:
      - name: cni-plugin tests
        commands:
          - ../.semaphore/run-and-monitor ci.log make ci

- name: cni-plugin6
  run:
    when: "true"
  dependencies:
    - Prerequisites
  task:
    prologue:
      commands:
        - cd cni-plugin
    jobs:
      - name: cni-plugin tests
        commands:
          - ../.semaphore/run-and-monitor ci.log make ci

- name: cni-plugin7
  run:
    when: "true"
  dependencies:
    - Prerequisites
  task:
    prologue:
      commands:
        - cd cni-plugin
    jobs:
      - name: cni-plugin tests
        commands:
          - ../.semaphore/run-and-monitor ci.log make ci

- name: cni-plugin8
  run:
    when: "true"
  dependencies:
    - Prerequisites
  task:
    prologue:
      commands:
        - cd cni-plugin
    jobs:
      - name: cni-plugin tests
        commands:
          - ../.semaphore/run-and-monitor ci.log make ci

- name: cni-plugin9
  run:
    when: "true"
  dependencies:
    - Prerequisites
  task:
    prologue:
      commands:
        - cd cni-plugin
    jobs:
      - name: cni-plugin tests
        commands:
          - ../.semaphore/run-and-monitor ci.log make ci

after_pipeline:
  task:
    jobs:
      - name: Reports
        commands:
          - test-results gen-pipeline-report --force
